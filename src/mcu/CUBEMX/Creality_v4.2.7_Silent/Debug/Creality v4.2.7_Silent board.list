
Creality v4.2.7_Silent board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08007000  08007000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000193c  080071e4  080071e4  000071e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008b20  08008b20  00008b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b58  08008b58  00010020  2**0
                  CONTENTS
  4 .ARM          00000000  08008b58  08008b58  00010020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b58  08008b58  00010020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b58  08008b58  00008b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b5c  08008b5c  00008b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08008b60  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020dc  20000020  08008b80  00010020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020fc  08008b80  000120fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007801  00000000  00000000  00010049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001837  00000000  00000000  0001784a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00019088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000608  00000000  00000000  00019728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190ea  00000000  00000000  00019d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000079c2  00000000  00000000  00032e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009002c  00000000  00000000  0003a7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018e0  00000000  00000000  000ca85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080071e4 <__do_global_dtors_aux>:
 80071e4:	b510      	push	{r4, lr}
 80071e6:	4c05      	ldr	r4, [pc, #20]	; (80071fc <__do_global_dtors_aux+0x18>)
 80071e8:	7823      	ldrb	r3, [r4, #0]
 80071ea:	b933      	cbnz	r3, 80071fa <__do_global_dtors_aux+0x16>
 80071ec:	4b04      	ldr	r3, [pc, #16]	; (8007200 <__do_global_dtors_aux+0x1c>)
 80071ee:	b113      	cbz	r3, 80071f6 <__do_global_dtors_aux+0x12>
 80071f0:	4804      	ldr	r0, [pc, #16]	; (8007204 <__do_global_dtors_aux+0x20>)
 80071f2:	f3af 8000 	nop.w
 80071f6:	2301      	movs	r3, #1
 80071f8:	7023      	strb	r3, [r4, #0]
 80071fa:	bd10      	pop	{r4, pc}
 80071fc:	20000020 	.word	0x20000020
 8007200:	00000000 	.word	0x00000000
 8007204:	08008b08 	.word	0x08008b08

08007208 <frame_dummy>:
 8007208:	b508      	push	{r3, lr}
 800720a:	4b03      	ldr	r3, [pc, #12]	; (8007218 <frame_dummy+0x10>)
 800720c:	b11b      	cbz	r3, 8007216 <frame_dummy+0xe>
 800720e:	4903      	ldr	r1, [pc, #12]	; (800721c <frame_dummy+0x14>)
 8007210:	4803      	ldr	r0, [pc, #12]	; (8007220 <frame_dummy+0x18>)
 8007212:	f3af 8000 	nop.w
 8007216:	bd08      	pop	{r3, pc}
 8007218:	00000000 	.word	0x00000000
 800721c:	20000024 	.word	0x20000024
 8007220:	08008b08 	.word	0x08008b08

08007224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800722a:	f000 fa2f 	bl	800768c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800722e:	f000 f82d 	bl	800728c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007232:	f000 f89b 	bl	800736c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8007236:	f000 f86f 	bl	8007318 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800723a:	f001 fb8d 	bl	8008958 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  int i=0;
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]
  int count = (50000 * 72) / 4;
 8007242:	4b0f      	ldr	r3, [pc, #60]	; (8007280 <main+0x5c>)
 8007244:	60bb      	str	r3, [r7, #8]
  char f[3];
  HAL_UART_Receive(&huart1, (uint8_t*)f, 3, 2000); //wait for input
 8007246:	1d39      	adds	r1, r7, #4
 8007248:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800724c:	2203      	movs	r2, #3
 800724e:	480d      	ldr	r0, [pc, #52]	; (8007284 <main+0x60>)
 8007250:	f001 fa07 	bl	8008662 <HAL_UART_Receive>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 while (i < count) { //delay(some microseconds)
 8007254:	e005      	b.n	8007262 <main+0x3e>
	     count--;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	3b01      	subs	r3, #1
 800725a:	60bb      	str	r3, [r7, #8]
	     i++;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3301      	adds	r3, #1
 8007260:	60fb      	str	r3, [r7, #12]
	 while (i < count) { //delay(some microseconds)
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	429a      	cmp	r2, r3
 8007268:	dbf5      	blt.n	8007256 <main+0x32>
	 }
	 count = (50000 * 72) / 4;
 800726a:	4b05      	ldr	r3, [pc, #20]	; (8007280 <main+0x5c>)
 800726c:	60bb      	str	r3, [r7, #8]
	 i=0;
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]
     HAL_UART_Transmit(&huart1, (uint8_t*)"Hello world\n", 12, 100);
 8007272:	2364      	movs	r3, #100	; 0x64
 8007274:	220c      	movs	r2, #12
 8007276:	4904      	ldr	r1, [pc, #16]	; (8007288 <main+0x64>)
 8007278:	4802      	ldr	r0, [pc, #8]	; (8007284 <main+0x60>)
 800727a:	f001 f960 	bl	800853e <HAL_UART_Transmit>
	 while (i < count) { //delay(some microseconds)
 800727e:	e7f0      	b.n	8007262 <main+0x3e>
 8007280:	000dbba0 	.word	0x000dbba0
 8007284:	2000004c 	.word	0x2000004c
 8007288:	08008b20 	.word	0x08008b20

0800728c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b090      	sub	sp, #64	; 0x40
 8007290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007292:	f107 0318 	add.w	r3, r7, #24
 8007296:	2228      	movs	r2, #40	; 0x28
 8007298:	2100      	movs	r1, #0
 800729a:	4618      	mov	r0, r3
 800729c:	f001 fc2c 	bl	8008af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80072a0:	1d3b      	adds	r3, r7, #4
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	605a      	str	r2, [r3, #4]
 80072a8:	609a      	str	r2, [r3, #8]
 80072aa:	60da      	str	r2, [r3, #12]
 80072ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80072ae:	2301      	movs	r3, #1
 80072b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80072b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80072b8:	2300      	movs	r3, #0
 80072ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80072bc:	2301      	movs	r3, #1
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80072c0:	2302      	movs	r3, #2
 80072c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80072c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80072ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80072ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072d0:	f107 0318 	add.w	r3, r7, #24
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fccb 	bl	8007c70 <HAL_RCC_OscConfig>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80072e0:	f000 f890 	bl	8007404 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80072e4:	230f      	movs	r3, #15
 80072e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80072e8:	2302      	movs	r3, #2
 80072ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80072f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80072f6:	2300      	movs	r3, #0
 80072f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80072fa:	1d3b      	adds	r3, r7, #4
 80072fc:	2102      	movs	r1, #2
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 ff36 	bl	8008170 <HAL_RCC_ClockConfig>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800730a:	f000 f87b 	bl	8007404 <Error_Handler>
  }
}
 800730e:	bf00      	nop
 8007310:	3740      	adds	r7, #64	; 0x40
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800731c:	4b11      	ldr	r3, [pc, #68]	; (8007364 <MX_USART1_UART_Init+0x4c>)
 800731e:	4a12      	ldr	r2, [pc, #72]	; (8007368 <MX_USART1_UART_Init+0x50>)
 8007320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007322:	4b10      	ldr	r3, [pc, #64]	; (8007364 <MX_USART1_UART_Init+0x4c>)
 8007324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800732a:	4b0e      	ldr	r3, [pc, #56]	; (8007364 <MX_USART1_UART_Init+0x4c>)
 800732c:	2200      	movs	r2, #0
 800732e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007330:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <MX_USART1_UART_Init+0x4c>)
 8007332:	2200      	movs	r2, #0
 8007334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007336:	4b0b      	ldr	r3, [pc, #44]	; (8007364 <MX_USART1_UART_Init+0x4c>)
 8007338:	2200      	movs	r2, #0
 800733a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800733c:	4b09      	ldr	r3, [pc, #36]	; (8007364 <MX_USART1_UART_Init+0x4c>)
 800733e:	220c      	movs	r2, #12
 8007340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007342:	4b08      	ldr	r3, [pc, #32]	; (8007364 <MX_USART1_UART_Init+0x4c>)
 8007344:	2200      	movs	r2, #0
 8007346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007348:	4b06      	ldr	r3, [pc, #24]	; (8007364 <MX_USART1_UART_Init+0x4c>)
 800734a:	2200      	movs	r2, #0
 800734c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800734e:	4805      	ldr	r0, [pc, #20]	; (8007364 <MX_USART1_UART_Init+0x4c>)
 8007350:	f001 f8a8 	bl	80084a4 <HAL_UART_Init>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800735a:	f000 f853 	bl	8007404 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800735e:	bf00      	nop
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	2000004c 	.word	0x2000004c
 8007368:	40013800 	.word	0x40013800

0800736c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007372:	f107 0310 	add.w	r3, r7, #16
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	605a      	str	r2, [r3, #4]
 800737c:	609a      	str	r2, [r3, #8]
 800737e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007380:	4b1e      	ldr	r3, [pc, #120]	; (80073fc <MX_GPIO_Init+0x90>)
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	4a1d      	ldr	r2, [pc, #116]	; (80073fc <MX_GPIO_Init+0x90>)
 8007386:	f043 0310 	orr.w	r3, r3, #16
 800738a:	6193      	str	r3, [r2, #24]
 800738c:	4b1b      	ldr	r3, [pc, #108]	; (80073fc <MX_GPIO_Init+0x90>)
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	f003 0310 	and.w	r3, r3, #16
 8007394:	60fb      	str	r3, [r7, #12]
 8007396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007398:	4b18      	ldr	r3, [pc, #96]	; (80073fc <MX_GPIO_Init+0x90>)
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	4a17      	ldr	r2, [pc, #92]	; (80073fc <MX_GPIO_Init+0x90>)
 800739e:	f043 0320 	orr.w	r3, r3, #32
 80073a2:	6193      	str	r3, [r2, #24]
 80073a4:	4b15      	ldr	r3, [pc, #84]	; (80073fc <MX_GPIO_Init+0x90>)
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80073b0:	4b12      	ldr	r3, [pc, #72]	; (80073fc <MX_GPIO_Init+0x90>)
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	4a11      	ldr	r2, [pc, #68]	; (80073fc <MX_GPIO_Init+0x90>)
 80073b6:	f043 0304 	orr.w	r3, r3, #4
 80073ba:	6193      	str	r3, [r2, #24]
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <MX_GPIO_Init+0x90>)
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	607b      	str	r3, [r7, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80073c8:	2200      	movs	r2, #0
 80073ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073ce:	480c      	ldr	r0, [pc, #48]	; (8007400 <MX_GPIO_Init+0x94>)
 80073d0:	f000 fc36 	bl	8007c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80073d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073da:	2301      	movs	r3, #1
 80073dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073de:	2300      	movs	r3, #0
 80073e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073e2:	2302      	movs	r3, #2
 80073e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073e6:	f107 0310 	add.w	r3, r7, #16
 80073ea:	4619      	mov	r1, r3
 80073ec:	4804      	ldr	r0, [pc, #16]	; (8007400 <MX_GPIO_Init+0x94>)
 80073ee:	f000 fa93 	bl	8007918 <HAL_GPIO_Init>

}
 80073f2:	bf00      	nop
 80073f4:	3720      	adds	r7, #32
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	40021000 	.word	0x40021000
 8007400:	40011000 	.word	0x40011000

08007404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8007408:	2201      	movs	r2, #1
 800740a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800740e:	4803      	ldr	r0, [pc, #12]	; (800741c <Error_Handler+0x18>)
 8007410:	f000 fc16 	bl	8007c40 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007414:	b672      	cpsid	i
}
 8007416:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007418:	e7fe      	b.n	8007418 <Error_Handler+0x14>
 800741a:	bf00      	nop
 800741c:	40010c00 	.word	0x40010c00

08007420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007426:	4b15      	ldr	r3, [pc, #84]	; (800747c <HAL_MspInit+0x5c>)
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	4a14      	ldr	r2, [pc, #80]	; (800747c <HAL_MspInit+0x5c>)
 800742c:	f043 0301 	orr.w	r3, r3, #1
 8007430:	6193      	str	r3, [r2, #24]
 8007432:	4b12      	ldr	r3, [pc, #72]	; (800747c <HAL_MspInit+0x5c>)
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	60bb      	str	r3, [r7, #8]
 800743c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800743e:	4b0f      	ldr	r3, [pc, #60]	; (800747c <HAL_MspInit+0x5c>)
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	4a0e      	ldr	r2, [pc, #56]	; (800747c <HAL_MspInit+0x5c>)
 8007444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007448:	61d3      	str	r3, [r2, #28]
 800744a:	4b0c      	ldr	r3, [pc, #48]	; (800747c <HAL_MspInit+0x5c>)
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <HAL_MspInit+0x60>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	4a04      	ldr	r2, [pc, #16]	; (8007480 <HAL_MspInit+0x60>)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr
 800747c:	40021000 	.word	0x40021000
 8007480:	40010000 	.word	0x40010000

08007484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800748c:	f107 0310 	add.w	r3, r7, #16
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	605a      	str	r2, [r3, #4]
 8007496:	609a      	str	r2, [r3, #8]
 8007498:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1c      	ldr	r2, [pc, #112]	; (8007510 <HAL_UART_MspInit+0x8c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d131      	bne.n	8007508 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80074a4:	4b1b      	ldr	r3, [pc, #108]	; (8007514 <HAL_UART_MspInit+0x90>)
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	4a1a      	ldr	r2, [pc, #104]	; (8007514 <HAL_UART_MspInit+0x90>)
 80074aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074ae:	6193      	str	r3, [r2, #24]
 80074b0:	4b18      	ldr	r3, [pc, #96]	; (8007514 <HAL_UART_MspInit+0x90>)
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074bc:	4b15      	ldr	r3, [pc, #84]	; (8007514 <HAL_UART_MspInit+0x90>)
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	4a14      	ldr	r2, [pc, #80]	; (8007514 <HAL_UART_MspInit+0x90>)
 80074c2:	f043 0304 	orr.w	r3, r3, #4
 80074c6:	6193      	str	r3, [r2, #24]
 80074c8:	4b12      	ldr	r3, [pc, #72]	; (8007514 <HAL_UART_MspInit+0x90>)
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80074d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074da:	2302      	movs	r3, #2
 80074dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074de:	2303      	movs	r3, #3
 80074e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074e2:	f107 0310 	add.w	r3, r7, #16
 80074e6:	4619      	mov	r1, r3
 80074e8:	480b      	ldr	r0, [pc, #44]	; (8007518 <HAL_UART_MspInit+0x94>)
 80074ea:	f000 fa15 	bl	8007918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80074ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074fc:	f107 0310 	add.w	r3, r7, #16
 8007500:	4619      	mov	r1, r3
 8007502:	4805      	ldr	r0, [pc, #20]	; (8007518 <HAL_UART_MspInit+0x94>)
 8007504:	f000 fa08 	bl	8007918 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007508:	bf00      	nop
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	40013800 	.word	0x40013800
 8007514:	40021000 	.word	0x40021000
 8007518:	40010800 	.word	0x40010800

0800751c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{  
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007520:	4b0d      	ldr	r3, [pc, #52]	; (8007558 <SDTimer_Handler+0x3c>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d006      	beq.n	8007538 <SDTimer_Handler+0x1c>
    Timer1--;
 800752a:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <SDTimer_Handler+0x3c>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	3b01      	subs	r3, #1
 8007532:	b2da      	uxtb	r2, r3
 8007534:	4b08      	ldr	r3, [pc, #32]	; (8007558 <SDTimer_Handler+0x3c>)
 8007536:	701a      	strb	r2, [r3, #0]
  
  if(Timer2 > 0)
 8007538:	4b08      	ldr	r3, [pc, #32]	; (800755c <SDTimer_Handler+0x40>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d006      	beq.n	8007550 <SDTimer_Handler+0x34>
    Timer2--;
 8007542:	4b06      	ldr	r3, [pc, #24]	; (800755c <SDTimer_Handler+0x40>)
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	4b03      	ldr	r3, [pc, #12]	; (800755c <SDTimer_Handler+0x40>)
 800754e:	701a      	strb	r2, [r3, #0]
}
 8007550:	bf00      	nop
 8007552:	46bd      	mov	sp, r7
 8007554:	bc80      	pop	{r7}
 8007556:	4770      	bx	lr
 8007558:	20000091 	.word	0x20000091
 800755c:	20000090 	.word	0x20000090

08007560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007564:	e7fe      	b.n	8007564 <NMI_Handler+0x4>

08007566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007566:	b480      	push	{r7}
 8007568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800756a:	e7fe      	b.n	800756a <HardFault_Handler+0x4>

0800756c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007570:	e7fe      	b.n	8007570 <MemManage_Handler+0x4>

08007572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007572:	b480      	push	{r7}
 8007574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007576:	e7fe      	b.n	8007576 <BusFault_Handler+0x4>

08007578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007578:	b480      	push	{r7}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800757c:	e7fe      	b.n	800757c <UsageFault_Handler+0x4>

0800757e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800757e:	b480      	push	{r7}
 8007580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007582:	bf00      	nop
 8007584:	46bd      	mov	sp, r7
 8007586:	bc80      	pop	{r7}
 8007588:	4770      	bx	lr

0800758a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800758a:	b480      	push	{r7}
 800758c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800758e:	bf00      	nop
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr

08007596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007596:	b480      	push	{r7}
 8007598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800759a:	bf00      	nop
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr
	...

080075a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80075a8:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <SysTick_Handler+0x30>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	3301      	adds	r3, #1
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	4b08      	ldr	r3, [pc, #32]	; (80075d4 <SysTick_Handler+0x30>)
 80075b4:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 80075b6:	4b07      	ldr	r3, [pc, #28]	; (80075d4 <SysTick_Handler+0x30>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b09      	cmp	r3, #9
 80075be:	d904      	bls.n	80075ca <SysTick_Handler+0x26>
  {
    FatFsCnt = 0;
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <SysTick_Handler+0x30>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 80075c6:	f7ff ffa9 	bl	800751c <SDTimer_Handler>
  }  

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80075ca:	f000 f8a5 	bl	8007718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80075ce:	bf00      	nop
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	2000003c 	.word	0x2000003c

080075d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80075dc:	4b15      	ldr	r3, [pc, #84]	; (8007634 <SystemInit+0x5c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a14      	ldr	r2, [pc, #80]	; (8007634 <SystemInit+0x5c>)
 80075e2:	f043 0301 	orr.w	r3, r3, #1
 80075e6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80075e8:	4b12      	ldr	r3, [pc, #72]	; (8007634 <SystemInit+0x5c>)
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	4911      	ldr	r1, [pc, #68]	; (8007634 <SystemInit+0x5c>)
 80075ee:	4b12      	ldr	r3, [pc, #72]	; (8007638 <SystemInit+0x60>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80075f4:	4b0f      	ldr	r3, [pc, #60]	; (8007634 <SystemInit+0x5c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a0e      	ldr	r2, [pc, #56]	; (8007634 <SystemInit+0x5c>)
 80075fa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80075fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007602:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007604:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <SystemInit+0x5c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a0a      	ldr	r2, [pc, #40]	; (8007634 <SystemInit+0x5c>)
 800760a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800760e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8007610:	4b08      	ldr	r3, [pc, #32]	; (8007634 <SystemInit+0x5c>)
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	4a07      	ldr	r2, [pc, #28]	; (8007634 <SystemInit+0x5c>)
 8007616:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800761a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800761c:	4b05      	ldr	r3, [pc, #20]	; (8007634 <SystemInit+0x5c>)
 800761e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8007622:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007624:	4b05      	ldr	r3, [pc, #20]	; (800763c <SystemInit+0x64>)
 8007626:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800762a:	609a      	str	r2, [r3, #8]
#endif 
}
 800762c:	bf00      	nop
 800762e:	46bd      	mov	sp, r7
 8007630:	bc80      	pop	{r7}
 8007632:	4770      	bx	lr
 8007634:	40021000 	.word	0x40021000
 8007638:	f8ff0000 	.word	0xf8ff0000
 800763c:	e000ed00 	.word	0xe000ed00

08007640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007640:	480c      	ldr	r0, [pc, #48]	; (8007674 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007642:	490d      	ldr	r1, [pc, #52]	; (8007678 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007644:	4a0d      	ldr	r2, [pc, #52]	; (800767c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007648:	e002      	b.n	8007650 <LoopCopyDataInit>

0800764a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800764a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800764c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800764e:	3304      	adds	r3, #4

08007650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007654:	d3f9      	bcc.n	800764a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007656:	4a0a      	ldr	r2, [pc, #40]	; (8007680 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007658:	4c0a      	ldr	r4, [pc, #40]	; (8007684 <LoopFillZerobss+0x22>)
  movs r3, #0
 800765a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800765c:	e001      	b.n	8007662 <LoopFillZerobss>

0800765e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800765e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007660:	3204      	adds	r2, #4

08007662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007664:	d3fb      	bcc.n	800765e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007666:	f7ff ffb7 	bl	80075d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800766a:	f001 fa21 	bl	8008ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800766e:	f7ff fdd9 	bl	8007224 <main>
  bx lr
 8007672:	4770      	bx	lr
  ldr r0, =_sdata
 8007674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007678:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800767c:	08008b60 	.word	0x08008b60
  ldr r2, =_sbss
 8007680:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8007684:	200020fc 	.word	0x200020fc

08007688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007688:	e7fe      	b.n	8007688 <ADC1_2_IRQHandler>
	...

0800768c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007690:	4b08      	ldr	r3, [pc, #32]	; (80076b4 <HAL_Init+0x28>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a07      	ldr	r2, [pc, #28]	; (80076b4 <HAL_Init+0x28>)
 8007696:	f043 0310 	orr.w	r3, r3, #16
 800769a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800769c:	2003      	movs	r0, #3
 800769e:	f000 f907 	bl	80078b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80076a2:	2000      	movs	r0, #0
 80076a4:	f000 f808 	bl	80076b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80076a8:	f7ff feba 	bl	8007420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	40022000 	.word	0x40022000

080076b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80076c0:	4b12      	ldr	r3, [pc, #72]	; (800770c <HAL_InitTick+0x54>)
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	4b12      	ldr	r3, [pc, #72]	; (8007710 <HAL_InitTick+0x58>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	4619      	mov	r1, r3
 80076ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80076d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 f911 	bl	80078fe <HAL_SYSTICK_Config>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e00e      	b.n	8007704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b0f      	cmp	r3, #15
 80076ea:	d80a      	bhi.n	8007702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80076ec:	2200      	movs	r2, #0
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	f000 f8e7 	bl	80078c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80076f8:	4a06      	ldr	r2, [pc, #24]	; (8007714 <HAL_InitTick+0x5c>)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	e000      	b.n	8007704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20000000 	.word	0x20000000
 8007710:	20000008 	.word	0x20000008
 8007714:	20000004 	.word	0x20000004

08007718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800771c:	4b05      	ldr	r3, [pc, #20]	; (8007734 <HAL_IncTick+0x1c>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	4b05      	ldr	r3, [pc, #20]	; (8007738 <HAL_IncTick+0x20>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4413      	add	r3, r2
 8007728:	4a03      	ldr	r2, [pc, #12]	; (8007738 <HAL_IncTick+0x20>)
 800772a:	6013      	str	r3, [r2, #0]
}
 800772c:	bf00      	nop
 800772e:	46bd      	mov	sp, r7
 8007730:	bc80      	pop	{r7}
 8007732:	4770      	bx	lr
 8007734:	20000008 	.word	0x20000008
 8007738:	20000094 	.word	0x20000094

0800773c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
  return uwTick;
 8007740:	4b02      	ldr	r3, [pc, #8]	; (800774c <HAL_GetTick+0x10>)
 8007742:	681b      	ldr	r3, [r3, #0]
}
 8007744:	4618      	mov	r0, r3
 8007746:	46bd      	mov	sp, r7
 8007748:	bc80      	pop	{r7}
 800774a:	4770      	bx	lr
 800774c:	20000094 	.word	0x20000094

08007750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007760:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <__NVIC_SetPriorityGrouping+0x44>)
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800776c:	4013      	ands	r3, r2
 800776e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800777c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007782:	4a04      	ldr	r2, [pc, #16]	; (8007794 <__NVIC_SetPriorityGrouping+0x44>)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	60d3      	str	r3, [r2, #12]
}
 8007788:	bf00      	nop
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	bc80      	pop	{r7}
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	e000ed00 	.word	0xe000ed00

08007798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800779c:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <__NVIC_GetPriorityGrouping+0x18>)
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	0a1b      	lsrs	r3, r3, #8
 80077a2:	f003 0307 	and.w	r3, r3, #7
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	e000ed00 	.word	0xe000ed00

080077b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	6039      	str	r1, [r7, #0]
 80077be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	db0a      	blt.n	80077de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	490c      	ldr	r1, [pc, #48]	; (8007800 <__NVIC_SetPriority+0x4c>)
 80077ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077d2:	0112      	lsls	r2, r2, #4
 80077d4:	b2d2      	uxtb	r2, r2
 80077d6:	440b      	add	r3, r1
 80077d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80077dc:	e00a      	b.n	80077f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	4908      	ldr	r1, [pc, #32]	; (8007804 <__NVIC_SetPriority+0x50>)
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	3b04      	subs	r3, #4
 80077ec:	0112      	lsls	r2, r2, #4
 80077ee:	b2d2      	uxtb	r2, r2
 80077f0:	440b      	add	r3, r1
 80077f2:	761a      	strb	r2, [r3, #24]
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bc80      	pop	{r7}
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	e000e100 	.word	0xe000e100
 8007804:	e000ed00 	.word	0xe000ed00

08007808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007808:	b480      	push	{r7}
 800780a:	b089      	sub	sp, #36	; 0x24
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f1c3 0307 	rsb	r3, r3, #7
 8007822:	2b04      	cmp	r3, #4
 8007824:	bf28      	it	cs
 8007826:	2304      	movcs	r3, #4
 8007828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	3304      	adds	r3, #4
 800782e:	2b06      	cmp	r3, #6
 8007830:	d902      	bls.n	8007838 <NVIC_EncodePriority+0x30>
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	3b03      	subs	r3, #3
 8007836:	e000      	b.n	800783a <NVIC_EncodePriority+0x32>
 8007838:	2300      	movs	r3, #0
 800783a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800783c:	f04f 32ff 	mov.w	r2, #4294967295
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	fa02 f303 	lsl.w	r3, r2, r3
 8007846:	43da      	mvns	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	401a      	ands	r2, r3
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007850:	f04f 31ff 	mov.w	r1, #4294967295
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	fa01 f303 	lsl.w	r3, r1, r3
 800785a:	43d9      	mvns	r1, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007860:	4313      	orrs	r3, r2
         );
}
 8007862:	4618      	mov	r0, r3
 8007864:	3724      	adds	r7, #36	; 0x24
 8007866:	46bd      	mov	sp, r7
 8007868:	bc80      	pop	{r7}
 800786a:	4770      	bx	lr

0800786c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3b01      	subs	r3, #1
 8007878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800787c:	d301      	bcc.n	8007882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800787e:	2301      	movs	r3, #1
 8007880:	e00f      	b.n	80078a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007882:	4a0a      	ldr	r2, [pc, #40]	; (80078ac <SysTick_Config+0x40>)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3b01      	subs	r3, #1
 8007888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800788a:	210f      	movs	r1, #15
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	f7ff ff90 	bl	80077b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007894:	4b05      	ldr	r3, [pc, #20]	; (80078ac <SysTick_Config+0x40>)
 8007896:	2200      	movs	r2, #0
 8007898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800789a:	4b04      	ldr	r3, [pc, #16]	; (80078ac <SysTick_Config+0x40>)
 800789c:	2207      	movs	r2, #7
 800789e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	e000e010 	.word	0xe000e010

080078b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff ff49 	bl	8007750 <__NVIC_SetPriorityGrouping>
}
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b086      	sub	sp, #24
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	4603      	mov	r3, r0
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	607a      	str	r2, [r7, #4]
 80078d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80078d8:	f7ff ff5e 	bl	8007798 <__NVIC_GetPriorityGrouping>
 80078dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	68b9      	ldr	r1, [r7, #8]
 80078e2:	6978      	ldr	r0, [r7, #20]
 80078e4:	f7ff ff90 	bl	8007808 <NVIC_EncodePriority>
 80078e8:	4602      	mov	r2, r0
 80078ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ee:	4611      	mov	r1, r2
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff ff5f 	bl	80077b4 <__NVIC_SetPriority>
}
 80078f6:	bf00      	nop
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff ffb0 	bl	800786c <SysTick_Config>
 800790c:	4603      	mov	r3, r0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007918:	b480      	push	{r7}
 800791a:	b08b      	sub	sp, #44	; 0x2c
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007922:	2300      	movs	r3, #0
 8007924:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007926:	2300      	movs	r3, #0
 8007928:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800792a:	e179      	b.n	8007c20 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800792c:	2201      	movs	r2, #1
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69fa      	ldr	r2, [r7, #28]
 800793c:	4013      	ands	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	429a      	cmp	r2, r3
 8007946:	f040 8168 	bne.w	8007c1a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	4aa0      	ldr	r2, [pc, #640]	; (8007bd0 <HAL_GPIO_Init+0x2b8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d05e      	beq.n	8007a12 <HAL_GPIO_Init+0xfa>
 8007954:	4a9e      	ldr	r2, [pc, #632]	; (8007bd0 <HAL_GPIO_Init+0x2b8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d875      	bhi.n	8007a46 <HAL_GPIO_Init+0x12e>
 800795a:	4a9e      	ldr	r2, [pc, #632]	; (8007bd4 <HAL_GPIO_Init+0x2bc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d058      	beq.n	8007a12 <HAL_GPIO_Init+0xfa>
 8007960:	4a9c      	ldr	r2, [pc, #624]	; (8007bd4 <HAL_GPIO_Init+0x2bc>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d86f      	bhi.n	8007a46 <HAL_GPIO_Init+0x12e>
 8007966:	4a9c      	ldr	r2, [pc, #624]	; (8007bd8 <HAL_GPIO_Init+0x2c0>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d052      	beq.n	8007a12 <HAL_GPIO_Init+0xfa>
 800796c:	4a9a      	ldr	r2, [pc, #616]	; (8007bd8 <HAL_GPIO_Init+0x2c0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d869      	bhi.n	8007a46 <HAL_GPIO_Init+0x12e>
 8007972:	4a9a      	ldr	r2, [pc, #616]	; (8007bdc <HAL_GPIO_Init+0x2c4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d04c      	beq.n	8007a12 <HAL_GPIO_Init+0xfa>
 8007978:	4a98      	ldr	r2, [pc, #608]	; (8007bdc <HAL_GPIO_Init+0x2c4>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d863      	bhi.n	8007a46 <HAL_GPIO_Init+0x12e>
 800797e:	4a98      	ldr	r2, [pc, #608]	; (8007be0 <HAL_GPIO_Init+0x2c8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d046      	beq.n	8007a12 <HAL_GPIO_Init+0xfa>
 8007984:	4a96      	ldr	r2, [pc, #600]	; (8007be0 <HAL_GPIO_Init+0x2c8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d85d      	bhi.n	8007a46 <HAL_GPIO_Init+0x12e>
 800798a:	2b12      	cmp	r3, #18
 800798c:	d82a      	bhi.n	80079e4 <HAL_GPIO_Init+0xcc>
 800798e:	2b12      	cmp	r3, #18
 8007990:	d859      	bhi.n	8007a46 <HAL_GPIO_Init+0x12e>
 8007992:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <HAL_GPIO_Init+0x80>)
 8007994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007998:	08007a13 	.word	0x08007a13
 800799c:	080079ed 	.word	0x080079ed
 80079a0:	080079ff 	.word	0x080079ff
 80079a4:	08007a41 	.word	0x08007a41
 80079a8:	08007a47 	.word	0x08007a47
 80079ac:	08007a47 	.word	0x08007a47
 80079b0:	08007a47 	.word	0x08007a47
 80079b4:	08007a47 	.word	0x08007a47
 80079b8:	08007a47 	.word	0x08007a47
 80079bc:	08007a47 	.word	0x08007a47
 80079c0:	08007a47 	.word	0x08007a47
 80079c4:	08007a47 	.word	0x08007a47
 80079c8:	08007a47 	.word	0x08007a47
 80079cc:	08007a47 	.word	0x08007a47
 80079d0:	08007a47 	.word	0x08007a47
 80079d4:	08007a47 	.word	0x08007a47
 80079d8:	08007a47 	.word	0x08007a47
 80079dc:	080079f5 	.word	0x080079f5
 80079e0:	08007a09 	.word	0x08007a09
 80079e4:	4a7f      	ldr	r2, [pc, #508]	; (8007be4 <HAL_GPIO_Init+0x2cc>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d013      	beq.n	8007a12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80079ea:	e02c      	b.n	8007a46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	623b      	str	r3, [r7, #32]
          break;
 80079f2:	e029      	b.n	8007a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	3304      	adds	r3, #4
 80079fa:	623b      	str	r3, [r7, #32]
          break;
 80079fc:	e024      	b.n	8007a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	3308      	adds	r3, #8
 8007a04:	623b      	str	r3, [r7, #32]
          break;
 8007a06:	e01f      	b.n	8007a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	623b      	str	r3, [r7, #32]
          break;
 8007a10:	e01a      	b.n	8007a48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d102      	bne.n	8007a20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007a1a:	2304      	movs	r3, #4
 8007a1c:	623b      	str	r3, [r7, #32]
          break;
 8007a1e:	e013      	b.n	8007a48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d105      	bne.n	8007a34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007a28:	2308      	movs	r3, #8
 8007a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	611a      	str	r2, [r3, #16]
          break;
 8007a32:	e009      	b.n	8007a48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007a34:	2308      	movs	r3, #8
 8007a36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	615a      	str	r2, [r3, #20]
          break;
 8007a3e:	e003      	b.n	8007a48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007a40:	2300      	movs	r3, #0
 8007a42:	623b      	str	r3, [r7, #32]
          break;
 8007a44:	e000      	b.n	8007a48 <HAL_GPIO_Init+0x130>
          break;
 8007a46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	2bff      	cmp	r3, #255	; 0xff
 8007a4c:	d801      	bhi.n	8007a52 <HAL_GPIO_Init+0x13a>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	e001      	b.n	8007a56 <HAL_GPIO_Init+0x13e>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3304      	adds	r3, #4
 8007a56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2bff      	cmp	r3, #255	; 0xff
 8007a5c:	d802      	bhi.n	8007a64 <HAL_GPIO_Init+0x14c>
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	e002      	b.n	8007a6a <HAL_GPIO_Init+0x152>
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	3b08      	subs	r3, #8
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	210f      	movs	r1, #15
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	fa01 f303 	lsl.w	r3, r1, r3
 8007a78:	43db      	mvns	r3, r3
 8007a7a:	401a      	ands	r2, r3
 8007a7c:	6a39      	ldr	r1, [r7, #32]
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	fa01 f303 	lsl.w	r3, r1, r3
 8007a84:	431a      	orrs	r2, r3
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 80c1 	beq.w	8007c1a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007a98:	4b53      	ldr	r3, [pc, #332]	; (8007be8 <HAL_GPIO_Init+0x2d0>)
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	4a52      	ldr	r2, [pc, #328]	; (8007be8 <HAL_GPIO_Init+0x2d0>)
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	6193      	str	r3, [r2, #24]
 8007aa4:	4b50      	ldr	r3, [pc, #320]	; (8007be8 <HAL_GPIO_Init+0x2d0>)
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	60bb      	str	r3, [r7, #8]
 8007aae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007ab0:	4a4e      	ldr	r2, [pc, #312]	; (8007bec <HAL_GPIO_Init+0x2d4>)
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	089b      	lsrs	r3, r3, #2
 8007ab6:	3302      	adds	r3, #2
 8007ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007abc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac0:	f003 0303 	and.w	r3, r3, #3
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	220f      	movs	r2, #15
 8007ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8007acc:	43db      	mvns	r3, r3
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a46      	ldr	r2, [pc, #280]	; (8007bf0 <HAL_GPIO_Init+0x2d8>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d01f      	beq.n	8007b1c <HAL_GPIO_Init+0x204>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a45      	ldr	r2, [pc, #276]	; (8007bf4 <HAL_GPIO_Init+0x2dc>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d019      	beq.n	8007b18 <HAL_GPIO_Init+0x200>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a44      	ldr	r2, [pc, #272]	; (8007bf8 <HAL_GPIO_Init+0x2e0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d013      	beq.n	8007b14 <HAL_GPIO_Init+0x1fc>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a43      	ldr	r2, [pc, #268]	; (8007bfc <HAL_GPIO_Init+0x2e4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00d      	beq.n	8007b10 <HAL_GPIO_Init+0x1f8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a42      	ldr	r2, [pc, #264]	; (8007c00 <HAL_GPIO_Init+0x2e8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d007      	beq.n	8007b0c <HAL_GPIO_Init+0x1f4>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a41      	ldr	r2, [pc, #260]	; (8007c04 <HAL_GPIO_Init+0x2ec>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d101      	bne.n	8007b08 <HAL_GPIO_Init+0x1f0>
 8007b04:	2305      	movs	r3, #5
 8007b06:	e00a      	b.n	8007b1e <HAL_GPIO_Init+0x206>
 8007b08:	2306      	movs	r3, #6
 8007b0a:	e008      	b.n	8007b1e <HAL_GPIO_Init+0x206>
 8007b0c:	2304      	movs	r3, #4
 8007b0e:	e006      	b.n	8007b1e <HAL_GPIO_Init+0x206>
 8007b10:	2303      	movs	r3, #3
 8007b12:	e004      	b.n	8007b1e <HAL_GPIO_Init+0x206>
 8007b14:	2302      	movs	r3, #2
 8007b16:	e002      	b.n	8007b1e <HAL_GPIO_Init+0x206>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e000      	b.n	8007b1e <HAL_GPIO_Init+0x206>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b20:	f002 0203 	and.w	r2, r2, #3
 8007b24:	0092      	lsls	r2, r2, #2
 8007b26:	4093      	lsls	r3, r2
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007b2e:	492f      	ldr	r1, [pc, #188]	; (8007bec <HAL_GPIO_Init+0x2d4>)
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	089b      	lsrs	r3, r3, #2
 8007b34:	3302      	adds	r3, #2
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d006      	beq.n	8007b56 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007b48:	4b2f      	ldr	r3, [pc, #188]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	492e      	ldr	r1, [pc, #184]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	600b      	str	r3, [r1, #0]
 8007b54:	e006      	b.n	8007b64 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007b56:	4b2c      	ldr	r3, [pc, #176]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	43db      	mvns	r3, r3
 8007b5e:	492a      	ldr	r1, [pc, #168]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d006      	beq.n	8007b7e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007b70:	4b25      	ldr	r3, [pc, #148]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	4924      	ldr	r1, [pc, #144]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	604b      	str	r3, [r1, #4]
 8007b7c:	e006      	b.n	8007b8c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007b7e:	4b22      	ldr	r3, [pc, #136]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	43db      	mvns	r3, r3
 8007b86:	4920      	ldr	r1, [pc, #128]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d006      	beq.n	8007ba6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007b98:	4b1b      	ldr	r3, [pc, #108]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	491a      	ldr	r1, [pc, #104]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	608b      	str	r3, [r1, #8]
 8007ba4:	e006      	b.n	8007bb4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007ba6:	4b18      	ldr	r3, [pc, #96]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	43db      	mvns	r3, r3
 8007bae:	4916      	ldr	r1, [pc, #88]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d025      	beq.n	8007c0c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007bc0:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007bc2:	68da      	ldr	r2, [r3, #12]
 8007bc4:	4910      	ldr	r1, [pc, #64]	; (8007c08 <HAL_GPIO_Init+0x2f0>)
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60cb      	str	r3, [r1, #12]
 8007bcc:	e025      	b.n	8007c1a <HAL_GPIO_Init+0x302>
 8007bce:	bf00      	nop
 8007bd0:	10320000 	.word	0x10320000
 8007bd4:	10310000 	.word	0x10310000
 8007bd8:	10220000 	.word	0x10220000
 8007bdc:	10210000 	.word	0x10210000
 8007be0:	10120000 	.word	0x10120000
 8007be4:	10110000 	.word	0x10110000
 8007be8:	40021000 	.word	0x40021000
 8007bec:	40010000 	.word	0x40010000
 8007bf0:	40010800 	.word	0x40010800
 8007bf4:	40010c00 	.word	0x40010c00
 8007bf8:	40011000 	.word	0x40011000
 8007bfc:	40011400 	.word	0x40011400
 8007c00:	40011800 	.word	0x40011800
 8007c04:	40011c00 	.word	0x40011c00
 8007c08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007c0c:	4b0b      	ldr	r3, [pc, #44]	; (8007c3c <HAL_GPIO_Init+0x324>)
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	43db      	mvns	r3, r3
 8007c14:	4909      	ldr	r1, [pc, #36]	; (8007c3c <HAL_GPIO_Init+0x324>)
 8007c16:	4013      	ands	r3, r2
 8007c18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	fa22 f303 	lsr.w	r3, r2, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f47f ae7e 	bne.w	800792c <HAL_GPIO_Init+0x14>
  }
}
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
 8007c34:	372c      	adds	r7, #44	; 0x2c
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr
 8007c3c:	40010400 	.word	0x40010400

08007c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	807b      	strh	r3, [r7, #2]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c50:	787b      	ldrb	r3, [r7, #1]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c56:	887a      	ldrh	r2, [r7, #2]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007c5c:	e003      	b.n	8007c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007c5e:	887b      	ldrh	r3, [r7, #2]
 8007c60:	041a      	lsls	r2, r3, #16
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	611a      	str	r2, [r3, #16]
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bc80      	pop	{r7}
 8007c6e:	4770      	bx	lr

08007c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e26c      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8087 	beq.w	8007d9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c90:	4b92      	ldr	r3, [pc, #584]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f003 030c 	and.w	r3, r3, #12
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d00c      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007c9c:	4b8f      	ldr	r3, [pc, #572]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f003 030c 	and.w	r3, r3, #12
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d112      	bne.n	8007cce <HAL_RCC_OscConfig+0x5e>
 8007ca8:	4b8c      	ldr	r3, [pc, #560]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cb4:	d10b      	bne.n	8007cce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cb6:	4b89      	ldr	r3, [pc, #548]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d06c      	beq.n	8007d9c <HAL_RCC_OscConfig+0x12c>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d168      	bne.n	8007d9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e246      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd6:	d106      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x76>
 8007cd8:	4b80      	ldr	r3, [pc, #512]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a7f      	ldr	r2, [pc, #508]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ce2:	6013      	str	r3, [r2, #0]
 8007ce4:	e02e      	b.n	8007d44 <HAL_RCC_OscConfig+0xd4>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10c      	bne.n	8007d08 <HAL_RCC_OscConfig+0x98>
 8007cee:	4b7b      	ldr	r3, [pc, #492]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a7a      	ldr	r2, [pc, #488]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	4b78      	ldr	r3, [pc, #480]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a77      	ldr	r2, [pc, #476]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	e01d      	b.n	8007d44 <HAL_RCC_OscConfig+0xd4>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d10:	d10c      	bne.n	8007d2c <HAL_RCC_OscConfig+0xbc>
 8007d12:	4b72      	ldr	r3, [pc, #456]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a71      	ldr	r2, [pc, #452]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	4b6f      	ldr	r3, [pc, #444]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a6e      	ldr	r2, [pc, #440]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	e00b      	b.n	8007d44 <HAL_RCC_OscConfig+0xd4>
 8007d2c:	4b6b      	ldr	r3, [pc, #428]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a6a      	ldr	r2, [pc, #424]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	4b68      	ldr	r3, [pc, #416]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a67      	ldr	r2, [pc, #412]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d013      	beq.n	8007d74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d4c:	f7ff fcf6 	bl	800773c <HAL_GetTick>
 8007d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d52:	e008      	b.n	8007d66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d54:	f7ff fcf2 	bl	800773c <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b64      	cmp	r3, #100	; 0x64
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e1fa      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d66:	4b5d      	ldr	r3, [pc, #372]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0f0      	beq.n	8007d54 <HAL_RCC_OscConfig+0xe4>
 8007d72:	e014      	b.n	8007d9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d74:	f7ff fce2 	bl	800773c <HAL_GetTick>
 8007d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d7a:	e008      	b.n	8007d8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d7c:	f7ff fcde 	bl	800773c <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b64      	cmp	r3, #100	; 0x64
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e1e6      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d8e:	4b53      	ldr	r3, [pc, #332]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f0      	bne.n	8007d7c <HAL_RCC_OscConfig+0x10c>
 8007d9a:	e000      	b.n	8007d9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d063      	beq.n	8007e72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007daa:	4b4c      	ldr	r3, [pc, #304]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f003 030c 	and.w	r3, r3, #12
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00b      	beq.n	8007dce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007db6:	4b49      	ldr	r3, [pc, #292]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f003 030c 	and.w	r3, r3, #12
 8007dbe:	2b08      	cmp	r3, #8
 8007dc0:	d11c      	bne.n	8007dfc <HAL_RCC_OscConfig+0x18c>
 8007dc2:	4b46      	ldr	r3, [pc, #280]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d116      	bne.n	8007dfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dce:	4b43      	ldr	r3, [pc, #268]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d005      	beq.n	8007de6 <HAL_RCC_OscConfig+0x176>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d001      	beq.n	8007de6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e1ba      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007de6:	4b3d      	ldr	r3, [pc, #244]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	4939      	ldr	r1, [pc, #228]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dfa:	e03a      	b.n	8007e72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d020      	beq.n	8007e46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e04:	4b36      	ldr	r3, [pc, #216]	; (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007e06:	2201      	movs	r2, #1
 8007e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e0a:	f7ff fc97 	bl	800773c <HAL_GetTick>
 8007e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e10:	e008      	b.n	8007e24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e12:	f7ff fc93 	bl	800773c <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d901      	bls.n	8007e24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e19b      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e24:	4b2d      	ldr	r3, [pc, #180]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0f0      	beq.n	8007e12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e30:	4b2a      	ldr	r3, [pc, #168]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4927      	ldr	r1, [pc, #156]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	600b      	str	r3, [r1, #0]
 8007e44:	e015      	b.n	8007e72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e46:	4b26      	ldr	r3, [pc, #152]	; (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e4c:	f7ff fc76 	bl	800773c <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e54:	f7ff fc72 	bl	800773c <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e17a      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e66:	4b1d      	ldr	r3, [pc, #116]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1f0      	bne.n	8007e54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0308 	and.w	r3, r3, #8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d03a      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d019      	beq.n	8007eba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e86:	4b17      	ldr	r3, [pc, #92]	; (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007e88:	2201      	movs	r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e8c:	f7ff fc56 	bl	800773c <HAL_GetTick>
 8007e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e92:	e008      	b.n	8007ea6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e94:	f7ff fc52 	bl	800773c <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e15a      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ea6:	4b0d      	ldr	r3, [pc, #52]	; (8007edc <HAL_RCC_OscConfig+0x26c>)
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0f0      	beq.n	8007e94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007eb2:	2001      	movs	r0, #1
 8007eb4:	f000 fad8 	bl	8008468 <RCC_Delay>
 8007eb8:	e01c      	b.n	8007ef4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eba:	4b0a      	ldr	r3, [pc, #40]	; (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ec0:	f7ff fc3c 	bl	800773c <HAL_GetTick>
 8007ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ec6:	e00f      	b.n	8007ee8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ec8:	f7ff fc38 	bl	800773c <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d908      	bls.n	8007ee8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e140      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
 8007eda:	bf00      	nop
 8007edc:	40021000 	.word	0x40021000
 8007ee0:	42420000 	.word	0x42420000
 8007ee4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ee8:	4b9e      	ldr	r3, [pc, #632]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e9      	bne.n	8007ec8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 80a6 	beq.w	800804e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f06:	4b97      	ldr	r3, [pc, #604]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10d      	bne.n	8007f2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f12:	4b94      	ldr	r3, [pc, #592]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	4a93      	ldr	r2, [pc, #588]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f1c:	61d3      	str	r3, [r2, #28]
 8007f1e:	4b91      	ldr	r3, [pc, #580]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f26:	60bb      	str	r3, [r7, #8]
 8007f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f2e:	4b8e      	ldr	r3, [pc, #568]	; (8008168 <HAL_RCC_OscConfig+0x4f8>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d118      	bne.n	8007f6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f3a:	4b8b      	ldr	r3, [pc, #556]	; (8008168 <HAL_RCC_OscConfig+0x4f8>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a8a      	ldr	r2, [pc, #552]	; (8008168 <HAL_RCC_OscConfig+0x4f8>)
 8007f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f46:	f7ff fbf9 	bl	800773c <HAL_GetTick>
 8007f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f4c:	e008      	b.n	8007f60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f4e:	f7ff fbf5 	bl	800773c <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	2b64      	cmp	r3, #100	; 0x64
 8007f5a:	d901      	bls.n	8007f60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e0fd      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f60:	4b81      	ldr	r3, [pc, #516]	; (8008168 <HAL_RCC_OscConfig+0x4f8>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0f0      	beq.n	8007f4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d106      	bne.n	8007f82 <HAL_RCC_OscConfig+0x312>
 8007f74:	4b7b      	ldr	r3, [pc, #492]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	4a7a      	ldr	r2, [pc, #488]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007f7a:	f043 0301 	orr.w	r3, r3, #1
 8007f7e:	6213      	str	r3, [r2, #32]
 8007f80:	e02d      	b.n	8007fde <HAL_RCC_OscConfig+0x36e>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10c      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x334>
 8007f8a:	4b76      	ldr	r3, [pc, #472]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	4a75      	ldr	r2, [pc, #468]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007f90:	f023 0301 	bic.w	r3, r3, #1
 8007f94:	6213      	str	r3, [r2, #32]
 8007f96:	4b73      	ldr	r3, [pc, #460]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	4a72      	ldr	r2, [pc, #456]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007f9c:	f023 0304 	bic.w	r3, r3, #4
 8007fa0:	6213      	str	r3, [r2, #32]
 8007fa2:	e01c      	b.n	8007fde <HAL_RCC_OscConfig+0x36e>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	2b05      	cmp	r3, #5
 8007faa:	d10c      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x356>
 8007fac:	4b6d      	ldr	r3, [pc, #436]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	4a6c      	ldr	r2, [pc, #432]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007fb2:	f043 0304 	orr.w	r3, r3, #4
 8007fb6:	6213      	str	r3, [r2, #32]
 8007fb8:	4b6a      	ldr	r3, [pc, #424]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	4a69      	ldr	r2, [pc, #420]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007fbe:	f043 0301 	orr.w	r3, r3, #1
 8007fc2:	6213      	str	r3, [r2, #32]
 8007fc4:	e00b      	b.n	8007fde <HAL_RCC_OscConfig+0x36e>
 8007fc6:	4b67      	ldr	r3, [pc, #412]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	4a66      	ldr	r2, [pc, #408]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007fcc:	f023 0301 	bic.w	r3, r3, #1
 8007fd0:	6213      	str	r3, [r2, #32]
 8007fd2:	4b64      	ldr	r3, [pc, #400]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	4a63      	ldr	r2, [pc, #396]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8007fd8:	f023 0304 	bic.w	r3, r3, #4
 8007fdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d015      	beq.n	8008012 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fe6:	f7ff fba9 	bl	800773c <HAL_GetTick>
 8007fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fec:	e00a      	b.n	8008004 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fee:	f7ff fba5 	bl	800773c <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d901      	bls.n	8008004 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e0ab      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008004:	4b57      	ldr	r3, [pc, #348]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d0ee      	beq.n	8007fee <HAL_RCC_OscConfig+0x37e>
 8008010:	e014      	b.n	800803c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008012:	f7ff fb93 	bl	800773c <HAL_GetTick>
 8008016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008018:	e00a      	b.n	8008030 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800801a:	f7ff fb8f 	bl	800773c <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	f241 3288 	movw	r2, #5000	; 0x1388
 8008028:	4293      	cmp	r3, r2
 800802a:	d901      	bls.n	8008030 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e095      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008030:	4b4c      	ldr	r3, [pc, #304]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8008032:	6a1b      	ldr	r3, [r3, #32]
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1ee      	bne.n	800801a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800803c:	7dfb      	ldrb	r3, [r7, #23]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d105      	bne.n	800804e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008042:	4b48      	ldr	r3, [pc, #288]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	4a47      	ldr	r2, [pc, #284]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8008048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800804c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 8081 	beq.w	800815a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008058:	4b42      	ldr	r3, [pc, #264]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f003 030c 	and.w	r3, r3, #12
 8008060:	2b08      	cmp	r3, #8
 8008062:	d061      	beq.n	8008128 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d146      	bne.n	80080fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800806c:	4b3f      	ldr	r3, [pc, #252]	; (800816c <HAL_RCC_OscConfig+0x4fc>)
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008072:	f7ff fb63 	bl	800773c <HAL_GetTick>
 8008076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008078:	e008      	b.n	800808c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800807a:	f7ff fb5f 	bl	800773c <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d901      	bls.n	800808c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e067      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800808c:	4b35      	ldr	r3, [pc, #212]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1f0      	bne.n	800807a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a0:	d108      	bne.n	80080b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80080a2:	4b30      	ldr	r3, [pc, #192]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	492d      	ldr	r1, [pc, #180]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080b4:	4b2b      	ldr	r3, [pc, #172]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a19      	ldr	r1, [r3, #32]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	430b      	orrs	r3, r1
 80080c6:	4927      	ldr	r1, [pc, #156]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080cc:	4b27      	ldr	r3, [pc, #156]	; (800816c <HAL_RCC_OscConfig+0x4fc>)
 80080ce:	2201      	movs	r2, #1
 80080d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d2:	f7ff fb33 	bl	800773c <HAL_GetTick>
 80080d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80080d8:	e008      	b.n	80080ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080da:	f7ff fb2f 	bl	800773c <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d901      	bls.n	80080ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e037      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80080ec:	4b1d      	ldr	r3, [pc, #116]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0f0      	beq.n	80080da <HAL_RCC_OscConfig+0x46a>
 80080f8:	e02f      	b.n	800815a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080fa:	4b1c      	ldr	r3, [pc, #112]	; (800816c <HAL_RCC_OscConfig+0x4fc>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008100:	f7ff fb1c 	bl	800773c <HAL_GetTick>
 8008104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008106:	e008      	b.n	800811a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008108:	f7ff fb18 	bl	800773c <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b02      	cmp	r3, #2
 8008114:	d901      	bls.n	800811a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e020      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800811a:	4b12      	ldr	r3, [pc, #72]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1f0      	bne.n	8008108 <HAL_RCC_OscConfig+0x498>
 8008126:	e018      	b.n	800815a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d101      	bne.n	8008134 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e013      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008134:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <HAL_RCC_OscConfig+0x4f4>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	429a      	cmp	r2, r3
 8008146:	d106      	bne.n	8008156 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008152:	429a      	cmp	r2, r3
 8008154:	d001      	beq.n	800815a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e000      	b.n	800815c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	40021000 	.word	0x40021000
 8008168:	40007000 	.word	0x40007000
 800816c:	42420060 	.word	0x42420060

08008170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e0d0      	b.n	8008326 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008184:	4b6a      	ldr	r3, [pc, #424]	; (8008330 <HAL_RCC_ClockConfig+0x1c0>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0307 	and.w	r3, r3, #7
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d910      	bls.n	80081b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008192:	4b67      	ldr	r3, [pc, #412]	; (8008330 <HAL_RCC_ClockConfig+0x1c0>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f023 0207 	bic.w	r2, r3, #7
 800819a:	4965      	ldr	r1, [pc, #404]	; (8008330 <HAL_RCC_ClockConfig+0x1c0>)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	4313      	orrs	r3, r2
 80081a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081a2:	4b63      	ldr	r3, [pc, #396]	; (8008330 <HAL_RCC_ClockConfig+0x1c0>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d001      	beq.n	80081b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e0b8      	b.n	8008326 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d020      	beq.n	8008202 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d005      	beq.n	80081d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081cc:	4b59      	ldr	r3, [pc, #356]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4a58      	ldr	r2, [pc, #352]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 80081d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80081d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081e4:	4b53      	ldr	r3, [pc, #332]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	4a52      	ldr	r2, [pc, #328]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 80081ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80081ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081f0:	4b50      	ldr	r3, [pc, #320]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	494d      	ldr	r1, [pc, #308]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	d040      	beq.n	8008290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d107      	bne.n	8008226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008216:	4b47      	ldr	r3, [pc, #284]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d115      	bne.n	800824e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e07f      	b.n	8008326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d107      	bne.n	800823e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800822e:	4b41      	ldr	r3, [pc, #260]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e073      	b.n	8008326 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800823e:	4b3d      	ldr	r3, [pc, #244]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0302 	and.w	r3, r3, #2
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e06b      	b.n	8008326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800824e:	4b39      	ldr	r3, [pc, #228]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f023 0203 	bic.w	r2, r3, #3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	4936      	ldr	r1, [pc, #216]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 800825c:	4313      	orrs	r3, r2
 800825e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008260:	f7ff fa6c 	bl	800773c <HAL_GetTick>
 8008264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008266:	e00a      	b.n	800827e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008268:	f7ff fa68 	bl	800773c <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	f241 3288 	movw	r2, #5000	; 0x1388
 8008276:	4293      	cmp	r3, r2
 8008278:	d901      	bls.n	800827e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e053      	b.n	8008326 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800827e:	4b2d      	ldr	r3, [pc, #180]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f003 020c 	and.w	r2, r3, #12
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	429a      	cmp	r2, r3
 800828e:	d1eb      	bne.n	8008268 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008290:	4b27      	ldr	r3, [pc, #156]	; (8008330 <HAL_RCC_ClockConfig+0x1c0>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0307 	and.w	r3, r3, #7
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d210      	bcs.n	80082c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800829e:	4b24      	ldr	r3, [pc, #144]	; (8008330 <HAL_RCC_ClockConfig+0x1c0>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f023 0207 	bic.w	r2, r3, #7
 80082a6:	4922      	ldr	r1, [pc, #136]	; (8008330 <HAL_RCC_ClockConfig+0x1c0>)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ae:	4b20      	ldr	r3, [pc, #128]	; (8008330 <HAL_RCC_ClockConfig+0x1c0>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d001      	beq.n	80082c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e032      	b.n	8008326 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0304 	and.w	r3, r3, #4
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d008      	beq.n	80082de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082cc:	4b19      	ldr	r3, [pc, #100]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	4916      	ldr	r1, [pc, #88]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0308 	and.w	r3, r3, #8
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d009      	beq.n	80082fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80082ea:	4b12      	ldr	r3, [pc, #72]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	00db      	lsls	r3, r3, #3
 80082f8:	490e      	ldr	r1, [pc, #56]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80082fe:	f000 f821 	bl	8008344 <HAL_RCC_GetSysClockFreq>
 8008302:	4602      	mov	r2, r0
 8008304:	4b0b      	ldr	r3, [pc, #44]	; (8008334 <HAL_RCC_ClockConfig+0x1c4>)
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	091b      	lsrs	r3, r3, #4
 800830a:	f003 030f 	and.w	r3, r3, #15
 800830e:	490a      	ldr	r1, [pc, #40]	; (8008338 <HAL_RCC_ClockConfig+0x1c8>)
 8008310:	5ccb      	ldrb	r3, [r1, r3]
 8008312:	fa22 f303 	lsr.w	r3, r2, r3
 8008316:	4a09      	ldr	r2, [pc, #36]	; (800833c <HAL_RCC_ClockConfig+0x1cc>)
 8008318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800831a:	4b09      	ldr	r3, [pc, #36]	; (8008340 <HAL_RCC_ClockConfig+0x1d0>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff f9ca 	bl	80076b8 <HAL_InitTick>

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	40022000 	.word	0x40022000
 8008334:	40021000 	.word	0x40021000
 8008338:	08008b40 	.word	0x08008b40
 800833c:	20000000 	.word	0x20000000
 8008340:	20000004 	.word	0x20000004

08008344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008344:	b490      	push	{r4, r7}
 8008346:	b08a      	sub	sp, #40	; 0x28
 8008348:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800834a:	4b2a      	ldr	r3, [pc, #168]	; (80083f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800834c:	1d3c      	adds	r4, r7, #4
 800834e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008350:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008354:	f240 2301 	movw	r3, #513	; 0x201
 8008358:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	61fb      	str	r3, [r7, #28]
 800835e:	2300      	movs	r3, #0
 8008360:	61bb      	str	r3, [r7, #24]
 8008362:	2300      	movs	r3, #0
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
 8008366:	2300      	movs	r3, #0
 8008368:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800836e:	4b22      	ldr	r3, [pc, #136]	; (80083f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	f003 030c 	and.w	r3, r3, #12
 800837a:	2b04      	cmp	r3, #4
 800837c:	d002      	beq.n	8008384 <HAL_RCC_GetSysClockFreq+0x40>
 800837e:	2b08      	cmp	r3, #8
 8008380:	d003      	beq.n	800838a <HAL_RCC_GetSysClockFreq+0x46>
 8008382:	e02d      	b.n	80083e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008384:	4b1d      	ldr	r3, [pc, #116]	; (80083fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008386:	623b      	str	r3, [r7, #32]
      break;
 8008388:	e02d      	b.n	80083e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	0c9b      	lsrs	r3, r3, #18
 800838e:	f003 030f 	and.w	r3, r3, #15
 8008392:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008396:	4413      	add	r3, r2
 8008398:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800839c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d013      	beq.n	80083d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80083a8:	4b13      	ldr	r3, [pc, #76]	; (80083f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	0c5b      	lsrs	r3, r3, #17
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80083b6:	4413      	add	r3, r2
 80083b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80083bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	4a0e      	ldr	r2, [pc, #56]	; (80083fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80083c2:	fb02 f203 	mul.w	r2, r2, r3
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
 80083ce:	e004      	b.n	80083da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	4a0b      	ldr	r2, [pc, #44]	; (8008400 <HAL_RCC_GetSysClockFreq+0xbc>)
 80083d4:	fb02 f303 	mul.w	r3, r2, r3
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	623b      	str	r3, [r7, #32]
      break;
 80083de:	e002      	b.n	80083e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80083e0:	4b06      	ldr	r3, [pc, #24]	; (80083fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80083e2:	623b      	str	r3, [r7, #32]
      break;
 80083e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083e6:	6a3b      	ldr	r3, [r7, #32]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3728      	adds	r7, #40	; 0x28
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bc90      	pop	{r4, r7}
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	08008b30 	.word	0x08008b30
 80083f8:	40021000 	.word	0x40021000
 80083fc:	007a1200 	.word	0x007a1200
 8008400:	003d0900 	.word	0x003d0900

08008404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008408:	4b02      	ldr	r3, [pc, #8]	; (8008414 <HAL_RCC_GetHCLKFreq+0x10>)
 800840a:	681b      	ldr	r3, [r3, #0]
}
 800840c:	4618      	mov	r0, r3
 800840e:	46bd      	mov	sp, r7
 8008410:	bc80      	pop	{r7}
 8008412:	4770      	bx	lr
 8008414:	20000000 	.word	0x20000000

08008418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800841c:	f7ff fff2 	bl	8008404 <HAL_RCC_GetHCLKFreq>
 8008420:	4602      	mov	r2, r0
 8008422:	4b05      	ldr	r3, [pc, #20]	; (8008438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	0a1b      	lsrs	r3, r3, #8
 8008428:	f003 0307 	and.w	r3, r3, #7
 800842c:	4903      	ldr	r1, [pc, #12]	; (800843c <HAL_RCC_GetPCLK1Freq+0x24>)
 800842e:	5ccb      	ldrb	r3, [r1, r3]
 8008430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008434:	4618      	mov	r0, r3
 8008436:	bd80      	pop	{r7, pc}
 8008438:	40021000 	.word	0x40021000
 800843c:	08008b50 	.word	0x08008b50

08008440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008444:	f7ff ffde 	bl	8008404 <HAL_RCC_GetHCLKFreq>
 8008448:	4602      	mov	r2, r0
 800844a:	4b05      	ldr	r3, [pc, #20]	; (8008460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	0adb      	lsrs	r3, r3, #11
 8008450:	f003 0307 	and.w	r3, r3, #7
 8008454:	4903      	ldr	r1, [pc, #12]	; (8008464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008456:	5ccb      	ldrb	r3, [r1, r3]
 8008458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800845c:	4618      	mov	r0, r3
 800845e:	bd80      	pop	{r7, pc}
 8008460:	40021000 	.word	0x40021000
 8008464:	08008b50 	.word	0x08008b50

08008468 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008470:	4b0a      	ldr	r3, [pc, #40]	; (800849c <RCC_Delay+0x34>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a0a      	ldr	r2, [pc, #40]	; (80084a0 <RCC_Delay+0x38>)
 8008476:	fba2 2303 	umull	r2, r3, r2, r3
 800847a:	0a5b      	lsrs	r3, r3, #9
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	fb02 f303 	mul.w	r3, r2, r3
 8008482:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008484:	bf00      	nop
  }
  while (Delay --);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	1e5a      	subs	r2, r3, #1
 800848a:	60fa      	str	r2, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1f9      	bne.n	8008484 <RCC_Delay+0x1c>
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	bc80      	pop	{r7}
 800849a:	4770      	bx	lr
 800849c:	20000000 	.word	0x20000000
 80084a0:	10624dd3 	.word	0x10624dd3

080084a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e03f      	b.n	8008536 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d106      	bne.n	80084d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7fe ffda 	bl	8007484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2224      	movs	r2, #36	; 0x24
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f9a7 	bl	800883c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	691a      	ldr	r2, [r3, #16]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	695a      	ldr	r2, [r3, #20]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800850c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800851c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2220      	movs	r2, #32
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2220      	movs	r2, #32
 8008530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b08a      	sub	sp, #40	; 0x28
 8008542:	af02      	add	r7, sp, #8
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	603b      	str	r3, [r7, #0]
 800854a:	4613      	mov	r3, r2
 800854c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b20      	cmp	r3, #32
 800855c:	d17c      	bne.n	8008658 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <HAL_UART_Transmit+0x2c>
 8008564:	88fb      	ldrh	r3, [r7, #6]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e075      	b.n	800865a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008574:	2b01      	cmp	r3, #1
 8008576:	d101      	bne.n	800857c <HAL_UART_Transmit+0x3e>
 8008578:	2302      	movs	r3, #2
 800857a:	e06e      	b.n	800865a <HAL_UART_Transmit+0x11c>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2221      	movs	r2, #33	; 0x21
 800858e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008592:	f7ff f8d3 	bl	800773c <HAL_GetTick>
 8008596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	88fa      	ldrh	r2, [r7, #6]
 800859c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	88fa      	ldrh	r2, [r7, #6]
 80085a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ac:	d108      	bne.n	80085c0 <HAL_UART_Transmit+0x82>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d104      	bne.n	80085c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80085b6:	2300      	movs	r3, #0
 80085b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	61bb      	str	r3, [r7, #24]
 80085be:	e003      	b.n	80085c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085c4:	2300      	movs	r3, #0
 80085c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80085d0:	e02a      	b.n	8008628 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2200      	movs	r2, #0
 80085da:	2180      	movs	r1, #128	; 0x80
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 f8e2 	bl	80087a6 <UART_WaitOnFlagUntilTimeout>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e036      	b.n	800865a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10b      	bne.n	800860a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008600:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	3302      	adds	r3, #2
 8008606:	61bb      	str	r3, [r7, #24]
 8008608:	e007      	b.n	800861a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	781a      	ldrb	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	3301      	adds	r3, #1
 8008618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800861e:	b29b      	uxth	r3, r3
 8008620:	3b01      	subs	r3, #1
 8008622:	b29a      	uxth	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800862c:	b29b      	uxth	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1cf      	bne.n	80085d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2200      	movs	r2, #0
 800863a:	2140      	movs	r1, #64	; 0x40
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 f8b2 	bl	80087a6 <UART_WaitOnFlagUntilTimeout>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e006      	b.n	800865a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2220      	movs	r2, #32
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	e000      	b.n	800865a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008658:	2302      	movs	r3, #2
  }
}
 800865a:	4618      	mov	r0, r3
 800865c:	3720      	adds	r7, #32
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b08a      	sub	sp, #40	; 0x28
 8008666:	af02      	add	r7, sp, #8
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	603b      	str	r3, [r7, #0]
 800866e:	4613      	mov	r3, r2
 8008670:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b20      	cmp	r3, #32
 8008680:	f040 808c 	bne.w	800879c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <HAL_UART_Receive+0x2e>
 800868a:	88fb      	ldrh	r3, [r7, #6]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e084      	b.n	800879e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800869a:	2b01      	cmp	r3, #1
 800869c:	d101      	bne.n	80086a2 <HAL_UART_Receive+0x40>
 800869e:	2302      	movs	r3, #2
 80086a0:	e07d      	b.n	800879e <HAL_UART_Receive+0x13c>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2222      	movs	r2, #34	; 0x22
 80086b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086be:	f7ff f83d 	bl	800773c <HAL_GetTick>
 80086c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	88fa      	ldrh	r2, [r7, #6]
 80086c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	88fa      	ldrh	r2, [r7, #6]
 80086ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d8:	d108      	bne.n	80086ec <HAL_UART_Receive+0x8a>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d104      	bne.n	80086ec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80086e2:	2300      	movs	r3, #0
 80086e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	61bb      	str	r3, [r7, #24]
 80086ea:	e003      	b.n	80086f4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086f0:	2300      	movs	r3, #0
 80086f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80086fc:	e043      	b.n	8008786 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2200      	movs	r2, #0
 8008706:	2120      	movs	r1, #32
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 f84c 	bl	80087a6 <UART_WaitOnFlagUntilTimeout>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e042      	b.n	800879e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10c      	bne.n	8008738 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	b29b      	uxth	r3, r3
 8008726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872a:	b29a      	uxth	r2, r3
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	3302      	adds	r3, #2
 8008734:	61bb      	str	r3, [r7, #24]
 8008736:	e01f      	b.n	8008778 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008740:	d007      	beq.n	8008752 <HAL_UART_Receive+0xf0>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10a      	bne.n	8008760 <HAL_UART_Receive+0xfe>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d106      	bne.n	8008760 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	b2da      	uxtb	r2, r3
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	701a      	strb	r2, [r3, #0]
 800875e:	e008      	b.n	8008772 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	b2db      	uxtb	r3, r3
 8008768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876c:	b2da      	uxtb	r2, r3
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	3301      	adds	r3, #1
 8008776:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800877c:	b29b      	uxth	r3, r3
 800877e:	3b01      	subs	r3, #1
 8008780:	b29a      	uxth	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800878a:	b29b      	uxth	r3, r3
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1b6      	bne.n	80086fe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	e000      	b.n	800879e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800879c:	2302      	movs	r3, #2
  }
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3720      	adds	r7, #32
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	603b      	str	r3, [r7, #0]
 80087b2:	4613      	mov	r3, r2
 80087b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087b6:	e02c      	b.n	8008812 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087be:	d028      	beq.n	8008812 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d007      	beq.n	80087d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80087c6:	f7fe ffb9 	bl	800773c <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d21d      	bcs.n	8008812 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68da      	ldr	r2, [r3, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	695a      	ldr	r2, [r3, #20]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 0201 	bic.w	r2, r2, #1
 80087f4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2220      	movs	r2, #32
 80087fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2220      	movs	r2, #32
 8008802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e00f      	b.n	8008832 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4013      	ands	r3, r2
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	429a      	cmp	r2, r3
 8008820:	bf0c      	ite	eq
 8008822:	2301      	moveq	r3, #1
 8008824:	2300      	movne	r3, #0
 8008826:	b2db      	uxtb	r3, r3
 8008828:	461a      	mov	r2, r3
 800882a:	79fb      	ldrb	r3, [r7, #7]
 800882c:	429a      	cmp	r2, r3
 800882e:	d0c3      	beq.n	80087b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
	...

0800883c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68da      	ldr	r2, [r3, #12]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	689a      	ldr	r2, [r3, #8]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	431a      	orrs	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	4313      	orrs	r3, r2
 800886a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008876:	f023 030c 	bic.w	r3, r3, #12
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	6812      	ldr	r2, [r2, #0]
 800887e:	68b9      	ldr	r1, [r7, #8]
 8008880:	430b      	orrs	r3, r1
 8008882:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	430a      	orrs	r2, r1
 8008898:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a2c      	ldr	r2, [pc, #176]	; (8008950 <UART_SetConfig+0x114>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d103      	bne.n	80088ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80088a4:	f7ff fdcc 	bl	8008440 <HAL_RCC_GetPCLK2Freq>
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	e002      	b.n	80088b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80088ac:	f7ff fdb4 	bl	8008418 <HAL_RCC_GetPCLK1Freq>
 80088b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	009a      	lsls	r2, r3, #2
 80088bc:	441a      	add	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c8:	4a22      	ldr	r2, [pc, #136]	; (8008954 <UART_SetConfig+0x118>)
 80088ca:	fba2 2303 	umull	r2, r3, r2, r3
 80088ce:	095b      	lsrs	r3, r3, #5
 80088d0:	0119      	lsls	r1, r3, #4
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	4613      	mov	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	009a      	lsls	r2, r3, #2
 80088dc:	441a      	add	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80088e8:	4b1a      	ldr	r3, [pc, #104]	; (8008954 <UART_SetConfig+0x118>)
 80088ea:	fba3 0302 	umull	r0, r3, r3, r2
 80088ee:	095b      	lsrs	r3, r3, #5
 80088f0:	2064      	movs	r0, #100	; 0x64
 80088f2:	fb00 f303 	mul.w	r3, r0, r3
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	011b      	lsls	r3, r3, #4
 80088fa:	3332      	adds	r3, #50	; 0x32
 80088fc:	4a15      	ldr	r2, [pc, #84]	; (8008954 <UART_SetConfig+0x118>)
 80088fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008902:	095b      	lsrs	r3, r3, #5
 8008904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008908:	4419      	add	r1, r3
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	4613      	mov	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	009a      	lsls	r2, r3, #2
 8008914:	441a      	add	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008920:	4b0c      	ldr	r3, [pc, #48]	; (8008954 <UART_SetConfig+0x118>)
 8008922:	fba3 0302 	umull	r0, r3, r3, r2
 8008926:	095b      	lsrs	r3, r3, #5
 8008928:	2064      	movs	r0, #100	; 0x64
 800892a:	fb00 f303 	mul.w	r3, r0, r3
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	011b      	lsls	r3, r3, #4
 8008932:	3332      	adds	r3, #50	; 0x32
 8008934:	4a07      	ldr	r2, [pc, #28]	; (8008954 <UART_SetConfig+0x118>)
 8008936:	fba2 2303 	umull	r2, r3, r2, r3
 800893a:	095b      	lsrs	r3, r3, #5
 800893c:	f003 020f 	and.w	r2, r3, #15
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	440a      	add	r2, r1
 8008946:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	40013800 	.word	0x40013800
 8008954:	51eb851f 	.word	0x51eb851f

08008958 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800895c:	4904      	ldr	r1, [pc, #16]	; (8008970 <MX_FATFS_Init+0x18>)
 800895e:	4805      	ldr	r0, [pc, #20]	; (8008974 <MX_FATFS_Init+0x1c>)
 8008960:	f000 f896 	bl	8008a90 <FATFS_LinkDriver>
 8008964:	4603      	mov	r3, r0
 8008966:	461a      	mov	r2, r3
 8008968:	4b03      	ldr	r3, [pc, #12]	; (8008978 <MX_FATFS_Init+0x20>)
 800896a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800896c:	bf00      	nop
 800896e:	bd80      	pop	{r7, pc}
 8008970:	20000098 	.word	0x20000098
 8008974:	2000000c 	.word	0x2000000c
 8008978:	2000009c 	.word	0x2000009c

0800897c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	4603      	mov	r3, r0
 8008984:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */

  /* USER CODE END INIT */
}
 8008986:	bf00      	nop
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	bc80      	pop	{r7}
 8008990:	4770      	bx	lr

08008992 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	4603      	mov	r3, r0
 800899a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

  /* USER CODE END STATUS */
}
 800899c:	bf00      	nop
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bc80      	pop	{r7}
 80089a6:	4770      	bx	lr

080089a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	607a      	str	r2, [r7, #4]
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	4603      	mov	r3, r0
 80089b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

  /* USER CODE END READ */
}
 80089b8:	bf00      	nop
 80089ba:	4618      	mov	r0, r3
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	bc80      	pop	{r7}
 80089c2:	4770      	bx	lr

080089c4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60b9      	str	r1, [r7, #8]
 80089cc:	607a      	str	r2, [r7, #4]
 80089ce:	603b      	str	r3, [r7, #0]
 80089d0:	4603      	mov	r3, r0
 80089d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

  /* USER CODE END WRITE */
}
 80089d4:	bf00      	nop
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	bc80      	pop	{r7}
 80089de:	4770      	bx	lr

080089e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	603a      	str	r2, [r7, #0]
 80089ea:	71fb      	strb	r3, [r7, #7]
 80089ec:	460b      	mov	r3, r1
 80089ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

  /* USER CODE END IOCTL */
}
 80089f0:	bf00      	nop
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bc80      	pop	{r7}
 80089fa:	4770      	bx	lr

080089fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	4613      	mov	r3, r2
 8008a08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008a12:	4b1e      	ldr	r3, [pc, #120]	; (8008a8c <FATFS_LinkDriverEx+0x90>)
 8008a14:	7a5b      	ldrb	r3, [r3, #9]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d831      	bhi.n	8008a80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a1c:	4b1b      	ldr	r3, [pc, #108]	; (8008a8c <FATFS_LinkDriverEx+0x90>)
 8008a1e:	7a5b      	ldrb	r3, [r3, #9]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	461a      	mov	r2, r3
 8008a24:	4b19      	ldr	r3, [pc, #100]	; (8008a8c <FATFS_LinkDriverEx+0x90>)
 8008a26:	2100      	movs	r1, #0
 8008a28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008a2a:	4b18      	ldr	r3, [pc, #96]	; (8008a8c <FATFS_LinkDriverEx+0x90>)
 8008a2c:	7a5b      	ldrb	r3, [r3, #9]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	4a16      	ldr	r2, [pc, #88]	; (8008a8c <FATFS_LinkDriverEx+0x90>)
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008a3a:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <FATFS_LinkDriverEx+0x90>)
 8008a3c:	7a5b      	ldrb	r3, [r3, #9]
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	461a      	mov	r2, r3
 8008a42:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <FATFS_LinkDriverEx+0x90>)
 8008a44:	4413      	add	r3, r2
 8008a46:	79fa      	ldrb	r2, [r7, #7]
 8008a48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a4a:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <FATFS_LinkDriverEx+0x90>)
 8008a4c:	7a5b      	ldrb	r3, [r3, #9]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	b2d1      	uxtb	r1, r2
 8008a54:	4a0d      	ldr	r2, [pc, #52]	; (8008a8c <FATFS_LinkDriverEx+0x90>)
 8008a56:	7251      	strb	r1, [r2, #9]
 8008a58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008a5a:	7dbb      	ldrb	r3, [r7, #22]
 8008a5c:	3330      	adds	r3, #48	; 0x30
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	3301      	adds	r3, #1
 8008a68:	223a      	movs	r2, #58	; 0x3a
 8008a6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	3302      	adds	r3, #2
 8008a70:	222f      	movs	r2, #47	; 0x2f
 8008a72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	3303      	adds	r3, #3
 8008a78:	2200      	movs	r2, #0
 8008a7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	371c      	adds	r7, #28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr
 8008a8c:	20000040 	.word	0x20000040

08008a90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7ff ffac 	bl	80089fc <FATFS_LinkDriverEx>
 8008aa4:	4603      	mov	r3, r0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <__libc_init_array>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	2600      	movs	r6, #0
 8008ab4:	4d0c      	ldr	r5, [pc, #48]	; (8008ae8 <__libc_init_array+0x38>)
 8008ab6:	4c0d      	ldr	r4, [pc, #52]	; (8008aec <__libc_init_array+0x3c>)
 8008ab8:	1b64      	subs	r4, r4, r5
 8008aba:	10a4      	asrs	r4, r4, #2
 8008abc:	42a6      	cmp	r6, r4
 8008abe:	d109      	bne.n	8008ad4 <__libc_init_array+0x24>
 8008ac0:	f000 f822 	bl	8008b08 <_init>
 8008ac4:	2600      	movs	r6, #0
 8008ac6:	4d0a      	ldr	r5, [pc, #40]	; (8008af0 <__libc_init_array+0x40>)
 8008ac8:	4c0a      	ldr	r4, [pc, #40]	; (8008af4 <__libc_init_array+0x44>)
 8008aca:	1b64      	subs	r4, r4, r5
 8008acc:	10a4      	asrs	r4, r4, #2
 8008ace:	42a6      	cmp	r6, r4
 8008ad0:	d105      	bne.n	8008ade <__libc_init_array+0x2e>
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad8:	4798      	blx	r3
 8008ada:	3601      	adds	r6, #1
 8008adc:	e7ee      	b.n	8008abc <__libc_init_array+0xc>
 8008ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae2:	4798      	blx	r3
 8008ae4:	3601      	adds	r6, #1
 8008ae6:	e7f2      	b.n	8008ace <__libc_init_array+0x1e>
 8008ae8:	08008b58 	.word	0x08008b58
 8008aec:	08008b58 	.word	0x08008b58
 8008af0:	08008b58 	.word	0x08008b58
 8008af4:	08008b5c 	.word	0x08008b5c

08008af8 <memset>:
 8008af8:	4603      	mov	r3, r0
 8008afa:	4402      	add	r2, r0
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d100      	bne.n	8008b02 <memset+0xa>
 8008b00:	4770      	bx	lr
 8008b02:	f803 1b01 	strb.w	r1, [r3], #1
 8008b06:	e7f9      	b.n	8008afc <memset+0x4>

08008b08 <_init>:
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	bf00      	nop
 8008b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0e:	bc08      	pop	{r3}
 8008b10:	469e      	mov	lr, r3
 8008b12:	4770      	bx	lr

08008b14 <_fini>:
 8008b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b16:	bf00      	nop
 8008b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1a:	bc08      	pop	{r3}
 8008b1c:	469e      	mov	lr, r3
 8008b1e:	4770      	bx	lr
