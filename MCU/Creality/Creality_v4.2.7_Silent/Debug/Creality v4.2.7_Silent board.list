
Creality v4.2.7_Silent board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08007000  08007000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000667c  080071e4  080071e4  000071e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800d860  0800d860  0000d860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de6c  0800de6c  00010024  2**0
                  CONTENTS
  4 .ARM          00000000  0800de6c  0800de6c  00010024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de6c  0800de6c  00010024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de6c  0800de6c  0000de6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de70  0800de70  0000de70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800de74  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004420  20000024  0800de98  00010024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004444  0800de98  00014444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0b8  00000000  00000000  0001004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231f  00000000  00000000  0001d105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0001f428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  0001ffb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f20  00000000  00000000  00020a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9d5  00000000  00000000  0003a970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092aae  00000000  00000000  00049345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbdf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e70  00000000  00000000  000dbe48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080071e4 <__do_global_dtors_aux>:
 80071e4:	b510      	push	{r4, lr}
 80071e6:	4c05      	ldr	r4, [pc, #20]	; (80071fc <__do_global_dtors_aux+0x18>)
 80071e8:	7823      	ldrb	r3, [r4, #0]
 80071ea:	b933      	cbnz	r3, 80071fa <__do_global_dtors_aux+0x16>
 80071ec:	4b04      	ldr	r3, [pc, #16]	; (8007200 <__do_global_dtors_aux+0x1c>)
 80071ee:	b113      	cbz	r3, 80071f6 <__do_global_dtors_aux+0x12>
 80071f0:	4804      	ldr	r0, [pc, #16]	; (8007204 <__do_global_dtors_aux+0x20>)
 80071f2:	f3af 8000 	nop.w
 80071f6:	2301      	movs	r3, #1
 80071f8:	7023      	strb	r3, [r4, #0]
 80071fa:	bd10      	pop	{r4, pc}
 80071fc:	20000024 	.word	0x20000024
 8007200:	00000000 	.word	0x00000000
 8007204:	0800d848 	.word	0x0800d848

08007208 <frame_dummy>:
 8007208:	b508      	push	{r3, lr}
 800720a:	4b03      	ldr	r3, [pc, #12]	; (8007218 <frame_dummy+0x10>)
 800720c:	b11b      	cbz	r3, 8007216 <frame_dummy+0xe>
 800720e:	4903      	ldr	r1, [pc, #12]	; (800721c <frame_dummy+0x14>)
 8007210:	4803      	ldr	r0, [pc, #12]	; (8007220 <frame_dummy+0x18>)
 8007212:	f3af 8000 	nop.w
 8007216:	bd08      	pop	{r3, pc}
 8007218:	00000000 	.word	0x00000000
 800721c:	20000028 	.word	0x20000028
 8007220:	0800d848 	.word	0x0800d848

08007224 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8007228:	2200      	movs	r2, #0
 800722a:	2110      	movs	r1, #16
 800722c:	4802      	ldr	r0, [pc, #8]	; (8007238 <SELECT+0x14>)
 800722e:	f001 fa77 	bl	8008720 <HAL_GPIO_WritePin>
}
 8007232:	bf00      	nop
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	40010800 	.word	0x40010800

0800723c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8007240:	2201      	movs	r2, #1
 8007242:	2110      	movs	r1, #16
 8007244:	4802      	ldr	r0, [pc, #8]	; (8007250 <DESELECT+0x14>)
 8007246:	f001 fa6b 	bl	8008720 <HAL_GPIO_WritePin>
}
 800724a:	bf00      	nop
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40010800 	.word	0x40010800

08007254 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800725e:	bf00      	nop
 8007260:	4808      	ldr	r0, [pc, #32]	; (8007284 <SPI_TxByte+0x30>)
 8007262:	f002 f9f1 	bl	8009648 <HAL_SPI_GetState>
 8007266:	4603      	mov	r3, r0
 8007268:	2b01      	cmp	r3, #1
 800726a:	d1f9      	bne.n	8007260 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800726c:	1df9      	adds	r1, r7, #7
 800726e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007272:	2201      	movs	r2, #1
 8007274:	4803      	ldr	r0, [pc, #12]	; (8007284 <SPI_TxByte+0x30>)
 8007276:	f001 ff09 	bl	800908c <HAL_SPI_Transmit>
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20001350 	.word	0x20001350

08007288 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800728e:	23ff      	movs	r3, #255	; 0xff
 8007290:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8007296:	bf00      	nop
 8007298:	4809      	ldr	r0, [pc, #36]	; (80072c0 <SPI_RxByte+0x38>)
 800729a:	f002 f9d5 	bl	8009648 <HAL_SPI_GetState>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d1f9      	bne.n	8007298 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80072a4:	1dba      	adds	r2, r7, #6
 80072a6:	1df9      	adds	r1, r7, #7
 80072a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	2301      	movs	r3, #1
 80072b0:	4803      	ldr	r0, [pc, #12]	; (80072c0 <SPI_RxByte+0x38>)
 80072b2:	f002 f827 	bl	8009304 <HAL_SPI_TransmitReceive>
  
  return data;
 80072b6:	79bb      	ldrb	r3, [r7, #6]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20001350 	.word	0x20001350

080072c4 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80072cc:	f7ff ffdc 	bl	8007288 <SPI_RxByte>
 80072d0:	4603      	mov	r3, r0
 80072d2:	461a      	mov	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	701a      	strb	r2, [r3, #0]
}
 80072d8:	bf00      	nop
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80072e6:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <SD_ReadyWait+0x34>)
 80072e8:	2232      	movs	r2, #50	; 0x32
 80072ea:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80072ec:	f7ff ffcc 	bl	8007288 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80072f0:	f7ff ffca 	bl	8007288 <SPI_RxByte>
 80072f4:	4603      	mov	r3, r0
 80072f6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	2bff      	cmp	r3, #255	; 0xff
 80072fc:	d004      	beq.n	8007308 <SD_ReadyWait+0x28>
 80072fe:	4b05      	ldr	r3, [pc, #20]	; (8007314 <SD_ReadyWait+0x34>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1f3      	bne.n	80072f0 <SD_ReadyWait+0x10>
  
  return res;
 8007308:	79fb      	ldrb	r3, [r7, #7]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	200023d8 	.word	0x200023d8

08007318 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800731e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8007322:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8007324:	f7ff ff8a 	bl	800723c <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8007328:	2300      	movs	r3, #0
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	e005      	b.n	800733a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800732e:	20ff      	movs	r0, #255	; 0xff
 8007330:	f7ff ff90 	bl	8007254 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	3301      	adds	r3, #1
 8007338:	613b      	str	r3, [r7, #16]
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b09      	cmp	r3, #9
 800733e:	ddf6      	ble.n	800732e <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8007340:	f7ff ff70 	bl	8007224 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8007344:	2340      	movs	r3, #64	; 0x40
 8007346:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8007358:	2395      	movs	r3, #149	; 0x95
 800735a:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e009      	b.n	8007376 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8007362:	1d3a      	adds	r2, r7, #4
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4413      	add	r3, r2
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff ff72 	bl	8007254 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3301      	adds	r3, #1
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b05      	cmp	r3, #5
 800737a:	ddf2      	ble.n	8007362 <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 800737c:	e002      	b.n	8007384 <SD_PowerOn+0x6c>
  {
    Count--;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	3b01      	subs	r3, #1
 8007382:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8007384:	f7ff ff80 	bl	8007288 <SPI_RxByte>
 8007388:	4603      	mov	r3, r0
 800738a:	2b01      	cmp	r3, #1
 800738c:	d002      	beq.n	8007394 <SD_PowerOn+0x7c>
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1f4      	bne.n	800737e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8007394:	f7ff ff52 	bl	800723c <DESELECT>
  SPI_TxByte(0XFF);
 8007398:	20ff      	movs	r0, #255	; 0xff
 800739a:	f7ff ff5b 	bl	8007254 <SPI_TxByte>
  
  PowerFlag = 1;
 800739e:	4b03      	ldr	r3, [pc, #12]	; (80073ac <SD_PowerOn+0x94>)
 80073a0:	2201      	movs	r2, #1
 80073a2:	701a      	strb	r2, [r3, #0]
}
 80073a4:	bf00      	nop
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20000041 	.word	0x20000041

080073b0 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80073b4:	4b03      	ldr	r3, [pc, #12]	; (80073c4 <SD_PowerOff+0x14>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]
}
 80073ba:	bf00      	nop
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20000041 	.word	0x20000041

080073c8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80073cc:	4b02      	ldr	r3, [pc, #8]	; (80073d8 <SD_CheckPower+0x10>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr
 80073d8:	20000041 	.word	0x20000041

080073dc <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 80073e6:	4b17      	ldr	r3, [pc, #92]	; (8007444 <SD_RxDataBlock+0x68>)
 80073e8:	220a      	movs	r2, #10
 80073ea:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 80073ec:	f7ff ff4c 	bl	8007288 <SPI_RxByte>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2bff      	cmp	r3, #255	; 0xff
 80073f8:	d104      	bne.n	8007404 <SD_RxDataBlock+0x28>
 80073fa:	4b12      	ldr	r3, [pc, #72]	; (8007444 <SD_RxDataBlock+0x68>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1f3      	bne.n	80073ec <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	2bfe      	cmp	r3, #254	; 0xfe
 8007408:	d001      	beq.n	800740e <SD_RxDataBlock+0x32>
    return FALSE;
 800740a:	2300      	movs	r3, #0
 800740c:	e016      	b.n	800743c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff ff55 	bl	80072c4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff ff4f 	bl	80072c4 <SPI_RxBytePtr>
  } while(btr -= 2);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	3b02      	subs	r3, #2
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1ed      	bne.n	800740e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8007432:	f7ff ff29 	bl	8007288 <SPI_RxByte>
  SPI_RxByte();
 8007436:	f7ff ff27 	bl	8007288 <SPI_RxByte>
  
  return TRUE;
 800743a:	2301      	movs	r3, #1
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	200023d9 	.word	0x200023d9

08007448 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8007458:	f7ff ff42 	bl	80072e0 <SD_ReadyWait>
 800745c:	4603      	mov	r3, r0
 800745e:	2bff      	cmp	r3, #255	; 0xff
 8007460:	d001      	beq.n	8007466 <SD_TxDataBlock+0x1e>
    return FALSE;
 8007462:	2300      	movs	r3, #0
 8007464:	e040      	b.n	80074e8 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff fef3 	bl	8007254 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800746e:	78fb      	ldrb	r3, [r7, #3]
 8007470:	2bfd      	cmp	r3, #253	; 0xfd
 8007472:	d031      	beq.n	80074d8 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff fee7 	bl	8007254 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff fee0 	bl	8007254 <SPI_TxByte>
    } while (--wc);
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	3b01      	subs	r3, #1
 8007498:	73bb      	strb	r3, [r7, #14]
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1eb      	bne.n	8007478 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80074a0:	f7ff fef2 	bl	8007288 <SPI_RxByte>
    SPI_RxByte();
 80074a4:	f7ff fef0 	bl	8007288 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80074a8:	e00b      	b.n	80074c2 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80074aa:	f7ff feed 	bl	8007288 <SPI_RxByte>
 80074ae:	4603      	mov	r3, r0
 80074b0:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	2b05      	cmp	r3, #5
 80074ba:	d006      	beq.n	80074ca <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80074bc:	7b7b      	ldrb	r3, [r7, #13]
 80074be:	3301      	adds	r3, #1
 80074c0:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80074c2:	7b7b      	ldrb	r3, [r7, #13]
 80074c4:	2b40      	cmp	r3, #64	; 0x40
 80074c6:	d9f0      	bls.n	80074aa <SD_TxDataBlock+0x62>
 80074c8:	e000      	b.n	80074cc <SD_TxDataBlock+0x84>
        break;
 80074ca:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80074cc:	bf00      	nop
 80074ce:	f7ff fedb 	bl	8007288 <SPI_RxByte>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0fa      	beq.n	80074ce <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	f003 031f 	and.w	r3, r3, #31
 80074de:	2b05      	cmp	r3, #5
 80074e0:	d101      	bne.n	80074e6 <SD_TxDataBlock+0x9e>
    return TRUE;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e000      	b.n	80074e8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	6039      	str	r1, [r7, #0]
 80074fa:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80074fc:	f7ff fef0 	bl	80072e0 <SD_ReadyWait>
 8007500:	4603      	mov	r3, r0
 8007502:	2bff      	cmp	r3, #255	; 0xff
 8007504:	d001      	beq.n	800750a <SD_SendCmd+0x1a>
    return 0xFF;
 8007506:	23ff      	movs	r3, #255	; 0xff
 8007508:	e040      	b.n	800758c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff fea1 	bl	8007254 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	0e1b      	lsrs	r3, r3, #24
 8007516:	b2db      	uxtb	r3, r3
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff fe9b 	bl	8007254 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	0c1b      	lsrs	r3, r3, #16
 8007522:	b2db      	uxtb	r3, r3
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff fe95 	bl	8007254 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	0a1b      	lsrs	r3, r3, #8
 800752e:	b2db      	uxtb	r3, r3
 8007530:	4618      	mov	r0, r3
 8007532:	f7ff fe8f 	bl	8007254 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	4618      	mov	r0, r3
 800753c:	f7ff fe8a 	bl	8007254 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8007540:	2300      	movs	r3, #0
 8007542:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	2b40      	cmp	r3, #64	; 0x40
 8007548:	d101      	bne.n	800754e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800754a:	2395      	movs	r3, #149	; 0x95
 800754c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800754e:	79fb      	ldrb	r3, [r7, #7]
 8007550:	2b48      	cmp	r3, #72	; 0x48
 8007552:	d101      	bne.n	8007558 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8007554:	2387      	movs	r3, #135	; 0x87
 8007556:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fe7a 	bl	8007254 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8007560:	79fb      	ldrb	r3, [r7, #7]
 8007562:	2b4c      	cmp	r3, #76	; 0x4c
 8007564:	d101      	bne.n	800756a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8007566:	f7ff fe8f 	bl	8007288 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800756a:	230a      	movs	r3, #10
 800756c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800756e:	f7ff fe8b 	bl	8007288 <SPI_RxByte>
 8007572:	4603      	mov	r3, r0
 8007574:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8007576:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800757a:	2b00      	cmp	r3, #0
 800757c:	da05      	bge.n	800758a <SD_SendCmd+0x9a>
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	3b01      	subs	r3, #1
 8007582:	73bb      	strb	r3, [r7, #14]
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1f1      	bne.n	800756e <SD_SendCmd+0x7e>
  
  return res;
 800758a:	7b7b      	ldrb	r3, [r7, #13]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8007594:	b590      	push	{r4, r7, lr}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	4603      	mov	r3, r0
 800759c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80075a4:	2301      	movs	r3, #1
 80075a6:	e0d5      	b.n	8007754 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80075a8:	4b6c      	ldr	r3, [pc, #432]	; (800775c <SD_disk_initialize+0x1c8>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <SD_disk_initialize+0x2a>
    return Stat;        
 80075b6:	4b69      	ldr	r3, [pc, #420]	; (800775c <SD_disk_initialize+0x1c8>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	e0ca      	b.n	8007754 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 80075be:	f7ff feab 	bl	8007318 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 80075c2:	f7ff fe2f 	bl	8007224 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 80075c6:	2300      	movs	r3, #0
 80075c8:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 80075ca:	2100      	movs	r1, #0
 80075cc:	2040      	movs	r0, #64	; 0x40
 80075ce:	f7ff ff8f 	bl	80074f0 <SD_SendCmd>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	f040 80a5 	bne.w	8007724 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80075da:	4b61      	ldr	r3, [pc, #388]	; (8007760 <SD_disk_initialize+0x1cc>)
 80075dc:	2264      	movs	r2, #100	; 0x64
 80075de:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80075e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80075e4:	2048      	movs	r0, #72	; 0x48
 80075e6:	f7ff ff83 	bl	80074f0 <SD_SendCmd>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d158      	bne.n	80076a2 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]
 80075f4:	e00c      	b.n	8007610 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80075f6:	7bfc      	ldrb	r4, [r7, #15]
 80075f8:	f7ff fe46 	bl	8007288 <SPI_RxByte>
 80075fc:	4603      	mov	r3, r0
 80075fe:	461a      	mov	r2, r3
 8007600:	f107 0310 	add.w	r3, r7, #16
 8007604:	4423      	add	r3, r4
 8007606:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	3301      	adds	r3, #1
 800760e:	73fb      	strb	r3, [r7, #15]
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b03      	cmp	r3, #3
 8007614:	d9ef      	bls.n	80075f6 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8007616:	7abb      	ldrb	r3, [r7, #10]
 8007618:	2b01      	cmp	r3, #1
 800761a:	f040 8083 	bne.w	8007724 <SD_disk_initialize+0x190>
 800761e:	7afb      	ldrb	r3, [r7, #11]
 8007620:	2baa      	cmp	r3, #170	; 0xaa
 8007622:	d17f      	bne.n	8007724 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8007624:	2100      	movs	r1, #0
 8007626:	2077      	movs	r0, #119	; 0x77
 8007628:	f7ff ff62 	bl	80074f0 <SD_SendCmd>
 800762c:	4603      	mov	r3, r0
 800762e:	2b01      	cmp	r3, #1
 8007630:	d807      	bhi.n	8007642 <SD_disk_initialize+0xae>
 8007632:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007636:	2069      	movs	r0, #105	; 0x69
 8007638:	f7ff ff5a 	bl	80074f0 <SD_SendCmd>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d005      	beq.n	800764e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8007642:	4b47      	ldr	r3, [pc, #284]	; (8007760 <SD_disk_initialize+0x1cc>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1eb      	bne.n	8007624 <SD_disk_initialize+0x90>
 800764c:	e000      	b.n	8007650 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800764e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8007650:	4b43      	ldr	r3, [pc, #268]	; (8007760 <SD_disk_initialize+0x1cc>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d064      	beq.n	8007724 <SD_disk_initialize+0x190>
 800765a:	2100      	movs	r1, #0
 800765c:	207a      	movs	r0, #122	; 0x7a
 800765e:	f7ff ff47 	bl	80074f0 <SD_SendCmd>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d15d      	bne.n	8007724 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]
 800766c:	e00c      	b.n	8007688 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800766e:	7bfc      	ldrb	r4, [r7, #15]
 8007670:	f7ff fe0a 	bl	8007288 <SPI_RxByte>
 8007674:	4603      	mov	r3, r0
 8007676:	461a      	mov	r2, r3
 8007678:	f107 0310 	add.w	r3, r7, #16
 800767c:	4423      	add	r3, r4
 800767e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	3301      	adds	r3, #1
 8007686:	73fb      	strb	r3, [r7, #15]
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	2b03      	cmp	r3, #3
 800768c:	d9ef      	bls.n	800766e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800768e:	7a3b      	ldrb	r3, [r7, #8]
 8007690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <SD_disk_initialize+0x108>
 8007698:	2306      	movs	r3, #6
 800769a:	e000      	b.n	800769e <SD_disk_initialize+0x10a>
 800769c:	2302      	movs	r3, #2
 800769e:	73bb      	strb	r3, [r7, #14]
 80076a0:	e040      	b.n	8007724 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80076a2:	2100      	movs	r1, #0
 80076a4:	2077      	movs	r0, #119	; 0x77
 80076a6:	f7ff ff23 	bl	80074f0 <SD_SendCmd>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d808      	bhi.n	80076c2 <SD_disk_initialize+0x12e>
 80076b0:	2100      	movs	r1, #0
 80076b2:	2069      	movs	r0, #105	; 0x69
 80076b4:	f7ff ff1c 	bl	80074f0 <SD_SendCmd>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d801      	bhi.n	80076c2 <SD_disk_initialize+0x12e>
 80076be:	2302      	movs	r3, #2
 80076c0:	e000      	b.n	80076c4 <SD_disk_initialize+0x130>
 80076c2:	2301      	movs	r3, #1
 80076c4:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d10e      	bne.n	80076ea <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80076cc:	2100      	movs	r1, #0
 80076ce:	2077      	movs	r0, #119	; 0x77
 80076d0:	f7ff ff0e 	bl	80074f0 <SD_SendCmd>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d80e      	bhi.n	80076f8 <SD_disk_initialize+0x164>
 80076da:	2100      	movs	r1, #0
 80076dc:	2069      	movs	r0, #105	; 0x69
 80076de:	f7ff ff07 	bl	80074f0 <SD_SendCmd>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d107      	bne.n	80076f8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80076e8:	e00d      	b.n	8007706 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80076ea:	2100      	movs	r1, #0
 80076ec:	2041      	movs	r0, #65	; 0x41
 80076ee:	f7ff feff 	bl	80074f0 <SD_SendCmd>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80076f8:	4b19      	ldr	r3, [pc, #100]	; (8007760 <SD_disk_initialize+0x1cc>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e1      	bne.n	80076c6 <SD_disk_initialize+0x132>
 8007702:	e000      	b.n	8007706 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8007704:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8007706:	4b16      	ldr	r3, [pc, #88]	; (8007760 <SD_disk_initialize+0x1cc>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <SD_disk_initialize+0x18c>
 8007710:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007714:	2050      	movs	r0, #80	; 0x50
 8007716:	f7ff feeb 	bl	80074f0 <SD_SendCmd>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8007724:	4a0f      	ldr	r2, [pc, #60]	; (8007764 <SD_disk_initialize+0x1d0>)
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 800772a:	f7ff fd87 	bl	800723c <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800772e:	f7ff fdab 	bl	8007288 <SPI_RxByte>
  
  if (type) 
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d008      	beq.n	800774a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8007738:	4b08      	ldr	r3, [pc, #32]	; (800775c <SD_disk_initialize+0x1c8>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	f023 0301 	bic.w	r3, r3, #1
 8007742:	b2da      	uxtb	r2, r3
 8007744:	4b05      	ldr	r3, [pc, #20]	; (800775c <SD_disk_initialize+0x1c8>)
 8007746:	701a      	strb	r2, [r3, #0]
 8007748:	e001      	b.n	800774e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800774a:	f7ff fe31 	bl	80073b0 <SD_PowerOff>
  }
  
  return Stat;
 800774e:	4b03      	ldr	r3, [pc, #12]	; (800775c <SD_disk_initialize+0x1c8>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b2db      	uxtb	r3, r3
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	bd90      	pop	{r4, r7, pc}
 800775c:	20000000 	.word	0x20000000
 8007760:	200023d9 	.word	0x200023d9
 8007764:	20000040 	.word	0x20000040

08007768 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8007778:	2301      	movs	r3, #1
 800777a:	e002      	b.n	8007782 <SD_disk_status+0x1a>
  
  return Stat;
 800777c:	4b03      	ldr	r3, [pc, #12]	; (800778c <SD_disk_status+0x24>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	b2db      	uxtb	r3, r3
}
 8007782:	4618      	mov	r0, r3
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	bc80      	pop	{r7}
 800778a:	4770      	bx	lr
 800778c:	20000000 	.word	0x20000000

08007790 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	607a      	str	r2, [r7, #4]
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	4603      	mov	r3, r0
 800779e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <SD_disk_read+0x1c>
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <SD_disk_read+0x20>
    return RES_PARERR;
 80077ac:	2304      	movs	r3, #4
 80077ae:	e051      	b.n	8007854 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 80077b0:	4b2a      	ldr	r3, [pc, #168]	; (800785c <SD_disk_read+0xcc>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 80077be:	2303      	movs	r3, #3
 80077c0:	e048      	b.n	8007854 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 80077c2:	4b27      	ldr	r3, [pc, #156]	; (8007860 <SD_disk_read+0xd0>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	f003 0304 	and.w	r3, r3, #4
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d102      	bne.n	80077d4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	025b      	lsls	r3, r3, #9
 80077d2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80077d4:	f7ff fd26 	bl	8007224 <SELECT>
  
  if (count == 1) 
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d111      	bne.n	8007802 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	2051      	movs	r0, #81	; 0x51
 80077e2:	f7ff fe85 	bl	80074f0 <SD_SendCmd>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d129      	bne.n	8007840 <SD_disk_read+0xb0>
 80077ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077f0:	68b8      	ldr	r0, [r7, #8]
 80077f2:	f7ff fdf3 	bl	80073dc <SD_RxDataBlock>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d021      	beq.n	8007840 <SD_disk_read+0xb0>
      count = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	e01e      	b.n	8007840 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	2052      	movs	r0, #82	; 0x52
 8007806:	f7ff fe73 	bl	80074f0 <SD_SendCmd>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d117      	bne.n	8007840 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8007810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007814:	68b8      	ldr	r0, [r7, #8]
 8007816:	f7ff fde1 	bl	80073dc <SD_RxDataBlock>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00a      	beq.n	8007836 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007826:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	3b01      	subs	r3, #1
 800782c:	603b      	str	r3, [r7, #0]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1ed      	bne.n	8007810 <SD_disk_read+0x80>
 8007834:	e000      	b.n	8007838 <SD_disk_read+0xa8>
          break;
 8007836:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8007838:	2100      	movs	r1, #0
 800783a:	204c      	movs	r0, #76	; 0x4c
 800783c:	f7ff fe58 	bl	80074f0 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8007840:	f7ff fcfc 	bl	800723c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8007844:	f7ff fd20 	bl	8007288 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	bf14      	ite	ne
 800784e:	2301      	movne	r3, #1
 8007850:	2300      	moveq	r3, #0
 8007852:	b2db      	uxtb	r3, r3
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20000000 	.word	0x20000000
 8007860:	20000040 	.word	0x20000040

08007864 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	607a      	str	r2, [r7, #4]
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d102      	bne.n	8007880 <SD_disk_write+0x1c>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <SD_disk_write+0x20>
    return RES_PARERR;
 8007880:	2304      	movs	r3, #4
 8007882:	e06b      	b.n	800795c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8007884:	4b37      	ldr	r3, [pc, #220]	; (8007964 <SD_disk_write+0x100>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8007892:	2303      	movs	r3, #3
 8007894:	e062      	b.n	800795c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8007896:	4b33      	ldr	r3, [pc, #204]	; (8007964 <SD_disk_write+0x100>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <SD_disk_write+0x44>
    return RES_WRPRT;
 80078a4:	2302      	movs	r3, #2
 80078a6:	e059      	b.n	800795c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80078a8:	4b2f      	ldr	r3, [pc, #188]	; (8007968 <SD_disk_write+0x104>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	025b      	lsls	r3, r3, #9
 80078b8:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80078ba:	f7ff fcb3 	bl	8007224 <SELECT>
  
  if (count == 1) 
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d110      	bne.n	80078e6 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	2058      	movs	r0, #88	; 0x58
 80078c8:	f7ff fe12 	bl	80074f0 <SD_SendCmd>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d13a      	bne.n	8007948 <SD_disk_write+0xe4>
 80078d2:	21fe      	movs	r1, #254	; 0xfe
 80078d4:	68b8      	ldr	r0, [r7, #8]
 80078d6:	f7ff fdb7 	bl	8007448 <SD_TxDataBlock>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d033      	beq.n	8007948 <SD_disk_write+0xe4>
      count = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	e030      	b.n	8007948 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 80078e6:	4b20      	ldr	r3, [pc, #128]	; (8007968 <SD_disk_write+0x104>)
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d007      	beq.n	8007902 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80078f2:	2100      	movs	r1, #0
 80078f4:	2077      	movs	r0, #119	; 0x77
 80078f6:	f7ff fdfb 	bl	80074f0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	2057      	movs	r0, #87	; 0x57
 80078fe:	f7ff fdf7 	bl	80074f0 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	2059      	movs	r0, #89	; 0x59
 8007906:	f7ff fdf3 	bl	80074f0 <SD_SendCmd>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d11b      	bne.n	8007948 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8007910:	21fc      	movs	r1, #252	; 0xfc
 8007912:	68b8      	ldr	r0, [r7, #8]
 8007914:	f7ff fd98 	bl	8007448 <SD_TxDataBlock>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007924:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	3b01      	subs	r3, #1
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1ee      	bne.n	8007910 <SD_disk_write+0xac>
 8007932:	e000      	b.n	8007936 <SD_disk_write+0xd2>
          break;
 8007934:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8007936:	21fd      	movs	r1, #253	; 0xfd
 8007938:	2000      	movs	r0, #0
 800793a:	f7ff fd85 	bl	8007448 <SD_TxDataBlock>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <SD_disk_write+0xe4>
      {        
        count = 1;
 8007944:	2301      	movs	r3, #1
 8007946:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8007948:	f7ff fc78 	bl	800723c <DESELECT>
  SPI_RxByte();
 800794c:	f7ff fc9c 	bl	8007288 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	bf14      	ite	ne
 8007956:	2301      	movne	r3, #1
 8007958:	2300      	moveq	r3, #0
 800795a:	b2db      	uxtb	r3, r3
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20000000 	.word	0x20000000
 8007968:	20000040 	.word	0x20000040

0800796c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b08b      	sub	sp, #44	; 0x2c
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	603a      	str	r2, [r7, #0]
 8007976:	71fb      	strb	r3, [r7, #7]
 8007978:	460b      	mov	r3, r1
 800797a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8007980:	79fb      	ldrb	r3, [r7, #7]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8007986:	2304      	movs	r3, #4
 8007988:	e11b      	b.n	8007bc2 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8007990:	79bb      	ldrb	r3, [r7, #6]
 8007992:	2b05      	cmp	r3, #5
 8007994:	d129      	bne.n	80079ea <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b02      	cmp	r3, #2
 800799c:	d017      	beq.n	80079ce <SD_disk_ioctl+0x62>
 800799e:	2b02      	cmp	r3, #2
 80079a0:	dc1f      	bgt.n	80079e2 <SD_disk_ioctl+0x76>
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <SD_disk_ioctl+0x40>
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d00b      	beq.n	80079c2 <SD_disk_ioctl+0x56>
 80079aa:	e01a      	b.n	80079e2 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80079ac:	f7ff fd0c 	bl	80073c8 <SD_CheckPower>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80079b6:	f7ff fcfb 	bl	80073b0 <SD_PowerOff>
      res = RES_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80079c0:	e0fd      	b.n	8007bbe <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80079c2:	f7ff fca9 	bl	8007318 <SD_PowerOn>
      res = RES_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80079cc:	e0f7      	b.n	8007bbe <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	1c5c      	adds	r4, r3, #1
 80079d2:	f7ff fcf9 	bl	80073c8 <SD_CheckPower>
 80079d6:	4603      	mov	r3, r0
 80079d8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80079da:	2300      	movs	r3, #0
 80079dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80079e0:	e0ed      	b.n	8007bbe <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 80079e2:	2304      	movs	r3, #4
 80079e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079e8:	e0e9      	b.n	8007bbe <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80079ea:	4b78      	ldr	r3, [pc, #480]	; (8007bcc <SD_disk_ioctl+0x260>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e0e2      	b.n	8007bc2 <SD_disk_ioctl+0x256>
    
    SELECT();
 80079fc:	f7ff fc12 	bl	8007224 <SELECT>
    
    switch (ctrl) 
 8007a00:	79bb      	ldrb	r3, [r7, #6]
 8007a02:	2b0d      	cmp	r3, #13
 8007a04:	f200 80cc 	bhi.w	8007ba0 <SD_disk_ioctl+0x234>
 8007a08:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <SD_disk_ioctl+0xa4>)
 8007a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0e:	bf00      	nop
 8007a10:	08007b0b 	.word	0x08007b0b
 8007a14:	08007a49 	.word	0x08007a49
 8007a18:	08007afb 	.word	0x08007afb
 8007a1c:	08007ba1 	.word	0x08007ba1
 8007a20:	08007ba1 	.word	0x08007ba1
 8007a24:	08007ba1 	.word	0x08007ba1
 8007a28:	08007ba1 	.word	0x08007ba1
 8007a2c:	08007ba1 	.word	0x08007ba1
 8007a30:	08007ba1 	.word	0x08007ba1
 8007a34:	08007ba1 	.word	0x08007ba1
 8007a38:	08007ba1 	.word	0x08007ba1
 8007a3c:	08007b1d 	.word	0x08007b1d
 8007a40:	08007b41 	.word	0x08007b41
 8007a44:	08007b65 	.word	0x08007b65
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8007a48:	2100      	movs	r1, #0
 8007a4a:	2049      	movs	r0, #73	; 0x49
 8007a4c:	f7ff fd50 	bl	80074f0 <SD_SendCmd>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f040 80a8 	bne.w	8007ba8 <SD_disk_ioctl+0x23c>
 8007a58:	f107 030c 	add.w	r3, r7, #12
 8007a5c:	2110      	movs	r1, #16
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff fcbc 	bl	80073dc <SD_RxDataBlock>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 809e 	beq.w	8007ba8 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8007a6c:	7b3b      	ldrb	r3, [r7, #12]
 8007a6e:	099b      	lsrs	r3, r3, #6
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d10e      	bne.n	8007a94 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8007a76:	7d7b      	ldrb	r3, [r7, #21]
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	7d3b      	ldrb	r3, [r7, #20]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	4413      	add	r3, r2
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	3301      	adds	r3, #1
 8007a88:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8007a8a:	8bfb      	ldrh	r3, [r7, #30]
 8007a8c:	029a      	lsls	r2, r3, #10
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	e02e      	b.n	8007af2 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007a94:	7c7b      	ldrb	r3, [r7, #17]
 8007a96:	f003 030f 	and.w	r3, r3, #15
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	7dbb      	ldrb	r3, [r7, #22]
 8007a9e:	09db      	lsrs	r3, r3, #7
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	4413      	add	r3, r2
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	7d7b      	ldrb	r3, [r7, #21]
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	f003 0306 	and.w	r3, r3, #6
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	4413      	add	r3, r2
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	3302      	adds	r3, #2
 8007ab8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8007abc:	7d3b      	ldrb	r3, [r7, #20]
 8007abe:	099b      	lsrs	r3, r3, #6
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	7cfb      	ldrb	r3, [r7, #19]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	4413      	add	r3, r2
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	7cbb      	ldrb	r3, [r7, #18]
 8007ad2:	029b      	lsls	r3, r3, #10
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	4413      	add	r3, r2
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8007ae4:	8bfa      	ldrh	r2, [r7, #30]
 8007ae6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007aea:	3b09      	subs	r3, #9
 8007aec:	409a      	lsls	r2, r3
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8007af8:	e056      	b.n	8007ba8 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b00:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007b08:	e055      	b.n	8007bb6 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8007b0a:	f7ff fbe9 	bl	80072e0 <SD_ReadyWait>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2bff      	cmp	r3, #255	; 0xff
 8007b12:	d14b      	bne.n	8007bac <SD_disk_ioctl+0x240>
        res = RES_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007b1a:	e047      	b.n	8007bac <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	2049      	movs	r0, #73	; 0x49
 8007b20:	f7ff fce6 	bl	80074f0 <SD_SendCmd>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d142      	bne.n	8007bb0 <SD_disk_ioctl+0x244>
 8007b2a:	2110      	movs	r1, #16
 8007b2c:	6a38      	ldr	r0, [r7, #32]
 8007b2e:	f7ff fc55 	bl	80073dc <SD_RxDataBlock>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d03b      	beq.n	8007bb0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007b3e:	e037      	b.n	8007bb0 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8007b40:	2100      	movs	r1, #0
 8007b42:	204a      	movs	r0, #74	; 0x4a
 8007b44:	f7ff fcd4 	bl	80074f0 <SD_SendCmd>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d132      	bne.n	8007bb4 <SD_disk_ioctl+0x248>
 8007b4e:	2110      	movs	r1, #16
 8007b50:	6a38      	ldr	r0, [r7, #32]
 8007b52:	f7ff fc43 	bl	80073dc <SD_RxDataBlock>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d02b      	beq.n	8007bb4 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007b62:	e027      	b.n	8007bb4 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8007b64:	2100      	movs	r1, #0
 8007b66:	207a      	movs	r0, #122	; 0x7a
 8007b68:	f7ff fcc2 	bl	80074f0 <SD_SendCmd>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d116      	bne.n	8007ba0 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8007b72:	2300      	movs	r3, #0
 8007b74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b78:	e00b      	b.n	8007b92 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8007b7a:	6a3c      	ldr	r4, [r7, #32]
 8007b7c:	1c63      	adds	r3, r4, #1
 8007b7e:	623b      	str	r3, [r7, #32]
 8007b80:	f7ff fb82 	bl	8007288 <SPI_RxByte>
 8007b84:	4603      	mov	r3, r0
 8007b86:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8007b88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d9ef      	bls.n	8007b7a <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ba6:	e006      	b.n	8007bb6 <SD_disk_ioctl+0x24a>
      break;
 8007ba8:	bf00      	nop
 8007baa:	e004      	b.n	8007bb6 <SD_disk_ioctl+0x24a>
      break;
 8007bac:	bf00      	nop
 8007bae:	e002      	b.n	8007bb6 <SD_disk_ioctl+0x24a>
      break;
 8007bb0:	bf00      	nop
 8007bb2:	e000      	b.n	8007bb6 <SD_disk_ioctl+0x24a>
      break;
 8007bb4:	bf00      	nop
    }
    
    DESELECT();
 8007bb6:	f7ff fb41 	bl	800723c <DESELECT>
    SPI_RxByte();
 8007bba:	f7ff fb65 	bl	8007288 <SPI_RxByte>
  }
  
  return res;
 8007bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	372c      	adds	r7, #44	; 0x2c
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd90      	pop	{r4, r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000000 	.word	0x20000000

08007bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007bd6:	f000 fabd 	bl	8008154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007bda:	f000 f851 	bl	8007c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007bde:	f000 f8f5 	bl	8007dcc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8007be2:	f000 f8c9 	bl	8007d78 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8007be6:	f000 f891 	bl	8007d0c <MX_SPI1_Init>
  MX_FATFS_Init();
 8007bea:	f002 f83b 	bl	8009c64 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  int i=0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60fb      	str	r3, [r7, #12]
  int count = (50000 * 72) / 4;
 8007bf2:	4b1a      	ldr	r3, [pc, #104]	; (8007c5c <main+0x8c>)
 8007bf4:	60bb      	str	r3, [r7, #8]
  char f[3];

  /* Mount SD Card */
  HAL_UART_Receive(&huart1, (uint8_t*)f, 3, 2000);
 8007bf6:	1d39      	adds	r1, r7, #4
 8007bf8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007bfc:	2203      	movs	r2, #3
 8007bfe:	4818      	ldr	r0, [pc, #96]	; (8007c60 <main+0x90>)
 8007c00:	f001 feb5 	bl	800996e <HAL_UART_Receive>

  /* Mount SD Card */
  f_mount(&fs, "", 0);
 8007c04:	2200      	movs	r2, #0
 8007c06:	4917      	ldr	r1, [pc, #92]	; (8007c64 <main+0x94>)
 8007c08:	4817      	ldr	r0, [pc, #92]	; (8007c68 <main+0x98>)
 8007c0a:	f004 fdb9 	bl	800c780 <f_mount>
  f_open(&fil, "first.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8007c0e:	2213      	movs	r2, #19
 8007c10:	4916      	ldr	r1, [pc, #88]	; (8007c6c <main+0x9c>)
 8007c12:	4817      	ldr	r0, [pc, #92]	; (8007c70 <main+0xa0>)
 8007c14:	f004 fdfe 	bl	800c814 <f_open>
  f_puts("STM32 SD Card I/O Example via SPI\n", &fil);
 8007c18:	4915      	ldr	r1, [pc, #84]	; (8007c70 <main+0xa0>)
 8007c1a:	4816      	ldr	r0, [pc, #88]	; (8007c74 <main+0xa4>)
 8007c1c:	f005 fced 	bl	800d5fa <f_puts>
  f_puts("Save the world!!!", &fil);
 8007c20:	4913      	ldr	r1, [pc, #76]	; (8007c70 <main+0xa0>)
 8007c22:	4815      	ldr	r0, [pc, #84]	; (8007c78 <main+0xa8>)
 8007c24:	f005 fce9 	bl	800d5fa <f_puts>
  f_close(&fil);
 8007c28:	4811      	ldr	r0, [pc, #68]	; (8007c70 <main+0xa0>)
 8007c2a:	f005 fc7e 	bl	800d52a <f_close>
	 //}
	 //count = (50000 * 72) / 4;
	 //i=0;
	 //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
	 //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
	 while (i < count) {
 8007c2e:	e005      	b.n	8007c3c <main+0x6c>
	     count--;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	60bb      	str	r3, [r7, #8]
	     i++;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]
	 while (i < count) {
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	dbf5      	blt.n	8007c30 <main+0x60>
	 }
	 count = (50000 * 72) / 4;
 8007c44:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <main+0x8c>)
 8007c46:	60bb      	str	r3, [r7, #8]
	 i=0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60fb      	str	r3, [r7, #12]
     HAL_UART_Transmit(&huart1, (uint8_t*)"H\n", 2, 100);
 8007c4c:	2364      	movs	r3, #100	; 0x64
 8007c4e:	2202      	movs	r2, #2
 8007c50:	490a      	ldr	r1, [pc, #40]	; (8007c7c <main+0xac>)
 8007c52:	4803      	ldr	r0, [pc, #12]	; (8007c60 <main+0x90>)
 8007c54:	f001 fdf9 	bl	800984a <HAL_UART_Transmit>
	 while (i < count) {
 8007c58:	e7f0      	b.n	8007c3c <main+0x6c>
 8007c5a:	bf00      	nop
 8007c5c:	000dbba0 	.word	0x000dbba0
 8007c60:	200012a4 	.word	0x200012a4
 8007c64:	0800d860 	.word	0x0800d860
 8007c68:	20000274 	.word	0x20000274
 8007c6c:	0800d864 	.word	0x0800d864
 8007c70:	200013ac 	.word	0x200013ac
 8007c74:	0800d870 	.word	0x0800d870
 8007c78:	0800d894 	.word	0x0800d894
 8007c7c:	0800d8a8 	.word	0x0800d8a8

08007c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b090      	sub	sp, #64	; 0x40
 8007c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c86:	f107 0318 	add.w	r3, r7, #24
 8007c8a:	2228      	movs	r2, #40	; 0x28
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f005 fdd2 	bl	800d838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007c94:	1d3b      	adds	r3, r7, #4
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	605a      	str	r2, [r3, #4]
 8007c9c:	609a      	str	r2, [r3, #8]
 8007c9e:	60da      	str	r2, [r3, #12]
 8007ca0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007caa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007cac:	2300      	movs	r3, #0
 8007cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007cbe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007cc4:	f107 0318 	add.w	r3, r7, #24
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fd41 	bl	8008750 <HAL_RCC_OscConfig>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007cd4:	f000 f8c4 	bl	8007e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007cd8:	230f      	movs	r3, #15
 8007cda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007cdc:	2302      	movs	r3, #2
 8007cde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007cea:	2300      	movs	r3, #0
 8007cec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007cee:	1d3b      	adds	r3, r7, #4
 8007cf0:	2102      	movs	r1, #2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 ffac 	bl	8008c50 <HAL_RCC_ClockConfig>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007cfe:	f000 f8af 	bl	8007e60 <Error_Handler>
  }
}
 8007d02:	bf00      	nop
 8007d04:	3740      	adds	r7, #64	; 0x40
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
	...

08007d0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007d10:	4b17      	ldr	r3, [pc, #92]	; (8007d70 <MX_SPI1_Init+0x64>)
 8007d12:	4a18      	ldr	r2, [pc, #96]	; (8007d74 <MX_SPI1_Init+0x68>)
 8007d14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007d16:	4b16      	ldr	r3, [pc, #88]	; (8007d70 <MX_SPI1_Init+0x64>)
 8007d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007d1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007d1e:	4b14      	ldr	r3, [pc, #80]	; (8007d70 <MX_SPI1_Init+0x64>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007d24:	4b12      	ldr	r3, [pc, #72]	; (8007d70 <MX_SPI1_Init+0x64>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d2a:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <MX_SPI1_Init+0x64>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007d30:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <MX_SPI1_Init+0x64>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007d36:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <MX_SPI1_Init+0x64>)
 8007d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8007d3e:	4b0c      	ldr	r3, [pc, #48]	; (8007d70 <MX_SPI1_Init+0x64>)
 8007d40:	2220      	movs	r2, #32
 8007d42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007d44:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <MX_SPI1_Init+0x64>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007d4a:	4b09      	ldr	r3, [pc, #36]	; (8007d70 <MX_SPI1_Init+0x64>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <MX_SPI1_Init+0x64>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007d56:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <MX_SPI1_Init+0x64>)
 8007d58:	220a      	movs	r2, #10
 8007d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007d5c:	4804      	ldr	r0, [pc, #16]	; (8007d70 <MX_SPI1_Init+0x64>)
 8007d5e:	f001 f911 	bl	8008f84 <HAL_SPI_Init>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007d68:	f000 f87a 	bl	8007e60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007d6c:	bf00      	nop
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20001350 	.word	0x20001350
 8007d74:	40013000 	.word	0x40013000

08007d78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007d7c:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <MX_USART1_UART_Init+0x4c>)
 8007d7e:	4a12      	ldr	r2, [pc, #72]	; (8007dc8 <MX_USART1_UART_Init+0x50>)
 8007d80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007d82:	4b10      	ldr	r3, [pc, #64]	; (8007dc4 <MX_USART1_UART_Init+0x4c>)
 8007d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007d88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007d8a:	4b0e      	ldr	r3, [pc, #56]	; (8007dc4 <MX_USART1_UART_Init+0x4c>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007d90:	4b0c      	ldr	r3, [pc, #48]	; (8007dc4 <MX_USART1_UART_Init+0x4c>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007d96:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <MX_USART1_UART_Init+0x4c>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007d9c:	4b09      	ldr	r3, [pc, #36]	; (8007dc4 <MX_USART1_UART_Init+0x4c>)
 8007d9e:	220c      	movs	r2, #12
 8007da0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007da2:	4b08      	ldr	r3, [pc, #32]	; (8007dc4 <MX_USART1_UART_Init+0x4c>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007da8:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <MX_USART1_UART_Init+0x4c>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007dae:	4805      	ldr	r0, [pc, #20]	; (8007dc4 <MX_USART1_UART_Init+0x4c>)
 8007db0:	f001 fcfe 	bl	80097b0 <HAL_UART_Init>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007dba:	f000 f851 	bl	8007e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007dbe:	bf00      	nop
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	200012a4 	.word	0x200012a4
 8007dc8:	40013800 	.word	0x40013800

08007dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b088      	sub	sp, #32
 8007dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dd2:	f107 0310 	add.w	r3, r7, #16
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	605a      	str	r2, [r3, #4]
 8007ddc:	609a      	str	r2, [r3, #8]
 8007dde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007de0:	4b1d      	ldr	r3, [pc, #116]	; (8007e58 <MX_GPIO_Init+0x8c>)
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	4a1c      	ldr	r2, [pc, #112]	; (8007e58 <MX_GPIO_Init+0x8c>)
 8007de6:	f043 0310 	orr.w	r3, r3, #16
 8007dea:	6193      	str	r3, [r2, #24]
 8007dec:	4b1a      	ldr	r3, [pc, #104]	; (8007e58 <MX_GPIO_Init+0x8c>)
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007df8:	4b17      	ldr	r3, [pc, #92]	; (8007e58 <MX_GPIO_Init+0x8c>)
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	4a16      	ldr	r2, [pc, #88]	; (8007e58 <MX_GPIO_Init+0x8c>)
 8007dfe:	f043 0320 	orr.w	r3, r3, #32
 8007e02:	6193      	str	r3, [r2, #24]
 8007e04:	4b14      	ldr	r3, [pc, #80]	; (8007e58 <MX_GPIO_Init+0x8c>)
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	f003 0320 	and.w	r3, r3, #32
 8007e0c:	60bb      	str	r3, [r7, #8]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e10:	4b11      	ldr	r3, [pc, #68]	; (8007e58 <MX_GPIO_Init+0x8c>)
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	4a10      	ldr	r2, [pc, #64]	; (8007e58 <MX_GPIO_Init+0x8c>)
 8007e16:	f043 0304 	orr.w	r3, r3, #4
 8007e1a:	6193      	str	r3, [r2, #24]
 8007e1c:	4b0e      	ldr	r3, [pc, #56]	; (8007e58 <MX_GPIO_Init+0x8c>)
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	607b      	str	r3, [r7, #4]
 8007e26:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_Pin_GPIO_Port, SD_CS_Pin_Pin, GPIO_PIN_SET);
 8007e28:	2201      	movs	r2, #1
 8007e2a:	2110      	movs	r1, #16
 8007e2c:	480b      	ldr	r0, [pc, #44]	; (8007e5c <MX_GPIO_Init+0x90>)
 8007e2e:	f000 fc77 	bl	8008720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin_Pin;
 8007e32:	2310      	movs	r3, #16
 8007e34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e36:	2301      	movs	r3, #1
 8007e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_Pin_GPIO_Port, &GPIO_InitStruct);
 8007e42:	f107 0310 	add.w	r3, r7, #16
 8007e46:	4619      	mov	r1, r3
 8007e48:	4804      	ldr	r0, [pc, #16]	; (8007e5c <MX_GPIO_Init+0x90>)
 8007e4a:	f000 fad5 	bl	80083f8 <HAL_GPIO_Init>

}
 8007e4e:	bf00      	nop
 8007e50:	3720      	adds	r7, #32
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	40021000 	.word	0x40021000
 8007e5c:	40010800 	.word	0x40010800

08007e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8007e64:	2201      	movs	r2, #1
 8007e66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e6a:	4803      	ldr	r0, [pc, #12]	; (8007e78 <Error_Handler+0x18>)
 8007e6c:	f000 fc58 	bl	8008720 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007e70:	b672      	cpsid	i
}
 8007e72:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007e74:	e7fe      	b.n	8007e74 <Error_Handler+0x14>
 8007e76:	bf00      	nop
 8007e78:	40010c00 	.word	0x40010c00

08007e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007e82:	4b15      	ldr	r3, [pc, #84]	; (8007ed8 <HAL_MspInit+0x5c>)
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	4a14      	ldr	r2, [pc, #80]	; (8007ed8 <HAL_MspInit+0x5c>)
 8007e88:	f043 0301 	orr.w	r3, r3, #1
 8007e8c:	6193      	str	r3, [r2, #24]
 8007e8e:	4b12      	ldr	r3, [pc, #72]	; (8007ed8 <HAL_MspInit+0x5c>)
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	60bb      	str	r3, [r7, #8]
 8007e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ed8 <HAL_MspInit+0x5c>)
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	4a0e      	ldr	r2, [pc, #56]	; (8007ed8 <HAL_MspInit+0x5c>)
 8007ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ea4:	61d3      	str	r3, [r2, #28]
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	; (8007ed8 <HAL_MspInit+0x5c>)
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eae:	607b      	str	r3, [r7, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8007eb2:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <HAL_MspInit+0x60>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	4a04      	ldr	r2, [pc, #16]	; (8007edc <HAL_MspInit+0x60>)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007ece:	bf00      	nop
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bc80      	pop	{r7}
 8007ed6:	4770      	bx	lr
 8007ed8:	40021000 	.word	0x40021000
 8007edc:	40010000 	.word	0x40010000

08007ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ee8:	f107 0310 	add.w	r3, r7, #16
 8007eec:	2200      	movs	r2, #0
 8007eee:	601a      	str	r2, [r3, #0]
 8007ef0:	605a      	str	r2, [r3, #4]
 8007ef2:	609a      	str	r2, [r3, #8]
 8007ef4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a1b      	ldr	r2, [pc, #108]	; (8007f68 <HAL_SPI_MspInit+0x88>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d12f      	bne.n	8007f60 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007f00:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <HAL_SPI_MspInit+0x8c>)
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	4a19      	ldr	r2, [pc, #100]	; (8007f6c <HAL_SPI_MspInit+0x8c>)
 8007f06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f0a:	6193      	str	r3, [r2, #24]
 8007f0c:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <HAL_SPI_MspInit+0x8c>)
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f18:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <HAL_SPI_MspInit+0x8c>)
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	4a13      	ldr	r2, [pc, #76]	; (8007f6c <HAL_SPI_MspInit+0x8c>)
 8007f1e:	f043 0304 	orr.w	r3, r3, #4
 8007f22:	6193      	str	r3, [r2, #24]
 8007f24:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <HAL_SPI_MspInit+0x8c>)
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	60bb      	str	r3, [r7, #8]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8007f30:	23a0      	movs	r3, #160	; 0xa0
 8007f32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f34:	2302      	movs	r3, #2
 8007f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f3c:	f107 0310 	add.w	r3, r7, #16
 8007f40:	4619      	mov	r1, r3
 8007f42:	480b      	ldr	r0, [pc, #44]	; (8007f70 <HAL_SPI_MspInit+0x90>)
 8007f44:	f000 fa58 	bl	80083f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007f48:	2340      	movs	r3, #64	; 0x40
 8007f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f54:	f107 0310 	add.w	r3, r7, #16
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4805      	ldr	r0, [pc, #20]	; (8007f70 <HAL_SPI_MspInit+0x90>)
 8007f5c:	f000 fa4c 	bl	80083f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007f60:	bf00      	nop
 8007f62:	3720      	adds	r7, #32
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	40013000 	.word	0x40013000
 8007f6c:	40021000 	.word	0x40021000
 8007f70:	40010800 	.word	0x40010800

08007f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f7c:	f107 0310 	add.w	r3, r7, #16
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	605a      	str	r2, [r3, #4]
 8007f86:	609a      	str	r2, [r3, #8]
 8007f88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a1c      	ldr	r2, [pc, #112]	; (8008000 <HAL_UART_MspInit+0x8c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d131      	bne.n	8007ff8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007f94:	4b1b      	ldr	r3, [pc, #108]	; (8008004 <HAL_UART_MspInit+0x90>)
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	4a1a      	ldr	r2, [pc, #104]	; (8008004 <HAL_UART_MspInit+0x90>)
 8007f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f9e:	6193      	str	r3, [r2, #24]
 8007fa0:	4b18      	ldr	r3, [pc, #96]	; (8008004 <HAL_UART_MspInit+0x90>)
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa8:	60fb      	str	r3, [r7, #12]
 8007faa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fac:	4b15      	ldr	r3, [pc, #84]	; (8008004 <HAL_UART_MspInit+0x90>)
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	4a14      	ldr	r2, [pc, #80]	; (8008004 <HAL_UART_MspInit+0x90>)
 8007fb2:	f043 0304 	orr.w	r3, r3, #4
 8007fb6:	6193      	str	r3, [r2, #24]
 8007fb8:	4b12      	ldr	r3, [pc, #72]	; (8008004 <HAL_UART_MspInit+0x90>)
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	f003 0304 	and.w	r3, r3, #4
 8007fc0:	60bb      	str	r3, [r7, #8]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fca:	2302      	movs	r3, #2
 8007fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fd2:	f107 0310 	add.w	r3, r7, #16
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	480b      	ldr	r0, [pc, #44]	; (8008008 <HAL_UART_MspInit+0x94>)
 8007fda:	f000 fa0d 	bl	80083f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fe2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fec:	f107 0310 	add.w	r3, r7, #16
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4805      	ldr	r0, [pc, #20]	; (8008008 <HAL_UART_MspInit+0x94>)
 8007ff4:	f000 fa00 	bl	80083f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007ff8:	bf00      	nop
 8007ffa:	3720      	adds	r7, #32
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40013800 	.word	0x40013800
 8008004:	40021000 	.word	0x40021000
 8008008:	40010800 	.word	0x40010800

0800800c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{  
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8008010:	4b0d      	ldr	r3, [pc, #52]	; (8008048 <SDTimer_Handler+0x3c>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d006      	beq.n	8008028 <SDTimer_Handler+0x1c>
    Timer1--;
 800801a:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <SDTimer_Handler+0x3c>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b2db      	uxtb	r3, r3
 8008020:	3b01      	subs	r3, #1
 8008022:	b2da      	uxtb	r2, r3
 8008024:	4b08      	ldr	r3, [pc, #32]	; (8008048 <SDTimer_Handler+0x3c>)
 8008026:	701a      	strb	r2, [r3, #0]
  
  if(Timer2 > 0)
 8008028:	4b08      	ldr	r3, [pc, #32]	; (800804c <SDTimer_Handler+0x40>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d006      	beq.n	8008040 <SDTimer_Handler+0x34>
    Timer2--;
 8008032:	4b06      	ldr	r3, [pc, #24]	; (800804c <SDTimer_Handler+0x40>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	b2db      	uxtb	r3, r3
 8008038:	3b01      	subs	r3, #1
 800803a:	b2da      	uxtb	r2, r3
 800803c:	4b03      	ldr	r3, [pc, #12]	; (800804c <SDTimer_Handler+0x40>)
 800803e:	701a      	strb	r2, [r3, #0]
}
 8008040:	bf00      	nop
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr
 8008048:	200023d9 	.word	0x200023d9
 800804c:	200023d8 	.word	0x200023d8

08008050 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008054:	bf00      	nop
 8008056:	46bd      	mov	sp, r7
 8008058:	bc80      	pop	{r7}
 800805a:	4770      	bx	lr

0800805c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008060:	bf00      	nop
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr

08008068 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800806c:	4b0b      	ldr	r3, [pc, #44]	; (800809c <SysTick_Handler+0x34>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	3301      	adds	r3, #1
 8008074:	b2da      	uxtb	r2, r3
 8008076:	4b09      	ldr	r3, [pc, #36]	; (800809c <SysTick_Handler+0x34>)
 8008078:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 800807a:	4b08      	ldr	r3, [pc, #32]	; (800809c <SysTick_Handler+0x34>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b09      	cmp	r3, #9
 8008082:	d904      	bls.n	800808e <SysTick_Handler+0x26>
  {
    FatFsCnt = 0;
 8008084:	4b05      	ldr	r3, [pc, #20]	; (800809c <SysTick_Handler+0x34>)
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 800808a:	f7ff ffbf 	bl	800800c <SDTimer_Handler>
  }  

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800808e:	f000 f8a7 	bl	80081e0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8008092:	f000 f9a4 	bl	80083de <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008096:	bf00      	nop
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000042 	.word	0x20000042

080080a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80080a0:	b480      	push	{r7}
 80080a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80080a4:	4b15      	ldr	r3, [pc, #84]	; (80080fc <SystemInit+0x5c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a14      	ldr	r2, [pc, #80]	; (80080fc <SystemInit+0x5c>)
 80080aa:	f043 0301 	orr.w	r3, r3, #1
 80080ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80080b0:	4b12      	ldr	r3, [pc, #72]	; (80080fc <SystemInit+0x5c>)
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	4911      	ldr	r1, [pc, #68]	; (80080fc <SystemInit+0x5c>)
 80080b6:	4b12      	ldr	r3, [pc, #72]	; (8008100 <SystemInit+0x60>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80080bc:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <SystemInit+0x5c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a0e      	ldr	r2, [pc, #56]	; (80080fc <SystemInit+0x5c>)
 80080c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80080c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80080cc:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <SystemInit+0x5c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <SystemInit+0x5c>)
 80080d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80080d8:	4b08      	ldr	r3, [pc, #32]	; (80080fc <SystemInit+0x5c>)
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	4a07      	ldr	r2, [pc, #28]	; (80080fc <SystemInit+0x5c>)
 80080de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80080e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80080e4:	4b05      	ldr	r3, [pc, #20]	; (80080fc <SystemInit+0x5c>)
 80080e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80080ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80080ec:	4b05      	ldr	r3, [pc, #20]	; (8008104 <SystemInit+0x64>)
 80080ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80080f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80080f4:	bf00      	nop
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bc80      	pop	{r7}
 80080fa:	4770      	bx	lr
 80080fc:	40021000 	.word	0x40021000
 8008100:	f8ff0000 	.word	0xf8ff0000
 8008104:	e000ed00 	.word	0xe000ed00

08008108 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008108:	480c      	ldr	r0, [pc, #48]	; (800813c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800810a:	490d      	ldr	r1, [pc, #52]	; (8008140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800810c:	4a0d      	ldr	r2, [pc, #52]	; (8008144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800810e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008110:	e002      	b.n	8008118 <LoopCopyDataInit>

08008112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008116:	3304      	adds	r3, #4

08008118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800811a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800811c:	d3f9      	bcc.n	8008112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800811e:	4a0a      	ldr	r2, [pc, #40]	; (8008148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008120:	4c0a      	ldr	r4, [pc, #40]	; (800814c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008124:	e001      	b.n	800812a <LoopFillZerobss>

08008126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008128:	3204      	adds	r2, #4

0800812a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800812a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800812c:	d3fb      	bcc.n	8008126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800812e:	f7ff ffb7 	bl	80080a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008132:	f005 fb5d 	bl	800d7f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008136:	f7ff fd4b 	bl	8007bd0 <main>
  bx lr
 800813a:	4770      	bx	lr
  ldr r0, =_sdata
 800813c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008140:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8008144:	0800de74 	.word	0x0800de74
  ldr r2, =_sbss
 8008148:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800814c:	20004444 	.word	0x20004444

08008150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008150:	e7fe      	b.n	8008150 <ADC1_2_IRQHandler>
	...

08008154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008158:	4b08      	ldr	r3, [pc, #32]	; (800817c <HAL_Init+0x28>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a07      	ldr	r2, [pc, #28]	; (800817c <HAL_Init+0x28>)
 800815e:	f043 0310 	orr.w	r3, r3, #16
 8008162:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008164:	2003      	movs	r0, #3
 8008166:	f000 f907 	bl	8008378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800816a:	2000      	movs	r0, #0
 800816c:	f000 f808 	bl	8008180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008170:	f7ff fe84 	bl	8007e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	40022000 	.word	0x40022000

08008180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008188:	4b12      	ldr	r3, [pc, #72]	; (80081d4 <HAL_InitTick+0x54>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	4b12      	ldr	r3, [pc, #72]	; (80081d8 <HAL_InitTick+0x58>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	4619      	mov	r1, r3
 8008192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008196:	fbb3 f3f1 	udiv	r3, r3, r1
 800819a:	fbb2 f3f3 	udiv	r3, r2, r3
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f911 	bl	80083c6 <HAL_SYSTICK_Config>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e00e      	b.n	80081cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b0f      	cmp	r3, #15
 80081b2:	d80a      	bhi.n	80081ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80081b4:	2200      	movs	r2, #0
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	f04f 30ff 	mov.w	r0, #4294967295
 80081bc:	f000 f8e7 	bl	800838e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80081c0:	4a06      	ldr	r2, [pc, #24]	; (80081dc <HAL_InitTick+0x5c>)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	e000      	b.n	80081cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	20000004 	.word	0x20000004
 80081d8:	2000000c 	.word	0x2000000c
 80081dc:	20000008 	.word	0x20000008

080081e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80081e0:	b480      	push	{r7}
 80081e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80081e4:	4b05      	ldr	r3, [pc, #20]	; (80081fc <HAL_IncTick+0x1c>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	4b05      	ldr	r3, [pc, #20]	; (8008200 <HAL_IncTick+0x20>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4413      	add	r3, r2
 80081f0:	4a03      	ldr	r2, [pc, #12]	; (8008200 <HAL_IncTick+0x20>)
 80081f2:	6013      	str	r3, [r2, #0]
}
 80081f4:	bf00      	nop
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bc80      	pop	{r7}
 80081fa:	4770      	bx	lr
 80081fc:	2000000c 	.word	0x2000000c
 8008200:	200023dc 	.word	0x200023dc

08008204 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0
  return uwTick;
 8008208:	4b02      	ldr	r3, [pc, #8]	; (8008214 <HAL_GetTick+0x10>)
 800820a:	681b      	ldr	r3, [r3, #0]
}
 800820c:	4618      	mov	r0, r3
 800820e:	46bd      	mov	sp, r7
 8008210:	bc80      	pop	{r7}
 8008212:	4770      	bx	lr
 8008214:	200023dc 	.word	0x200023dc

08008218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008228:	4b0c      	ldr	r3, [pc, #48]	; (800825c <__NVIC_SetPriorityGrouping+0x44>)
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008234:	4013      	ands	r3, r2
 8008236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800824a:	4a04      	ldr	r2, [pc, #16]	; (800825c <__NVIC_SetPriorityGrouping+0x44>)
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	60d3      	str	r3, [r2, #12]
}
 8008250:	bf00      	nop
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	bc80      	pop	{r7}
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	e000ed00 	.word	0xe000ed00

08008260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008260:	b480      	push	{r7}
 8008262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008264:	4b04      	ldr	r3, [pc, #16]	; (8008278 <__NVIC_GetPriorityGrouping+0x18>)
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	0a1b      	lsrs	r3, r3, #8
 800826a:	f003 0307 	and.w	r3, r3, #7
}
 800826e:	4618      	mov	r0, r3
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	e000ed00 	.word	0xe000ed00

0800827c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	6039      	str	r1, [r7, #0]
 8008286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800828c:	2b00      	cmp	r3, #0
 800828e:	db0a      	blt.n	80082a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	b2da      	uxtb	r2, r3
 8008294:	490c      	ldr	r1, [pc, #48]	; (80082c8 <__NVIC_SetPriority+0x4c>)
 8008296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800829a:	0112      	lsls	r2, r2, #4
 800829c:	b2d2      	uxtb	r2, r2
 800829e:	440b      	add	r3, r1
 80082a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80082a4:	e00a      	b.n	80082bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	4908      	ldr	r1, [pc, #32]	; (80082cc <__NVIC_SetPriority+0x50>)
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	f003 030f 	and.w	r3, r3, #15
 80082b2:	3b04      	subs	r3, #4
 80082b4:	0112      	lsls	r2, r2, #4
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	440b      	add	r3, r1
 80082ba:	761a      	strb	r2, [r3, #24]
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bc80      	pop	{r7}
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	e000e100 	.word	0xe000e100
 80082cc:	e000ed00 	.word	0xe000ed00

080082d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b089      	sub	sp, #36	; 0x24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f003 0307 	and.w	r3, r3, #7
 80082e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f1c3 0307 	rsb	r3, r3, #7
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	bf28      	it	cs
 80082ee:	2304      	movcs	r3, #4
 80082f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	3304      	adds	r3, #4
 80082f6:	2b06      	cmp	r3, #6
 80082f8:	d902      	bls.n	8008300 <NVIC_EncodePriority+0x30>
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	3b03      	subs	r3, #3
 80082fe:	e000      	b.n	8008302 <NVIC_EncodePriority+0x32>
 8008300:	2300      	movs	r3, #0
 8008302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008304:	f04f 32ff 	mov.w	r2, #4294967295
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	fa02 f303 	lsl.w	r3, r2, r3
 800830e:	43da      	mvns	r2, r3
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	401a      	ands	r2, r3
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008318:	f04f 31ff 	mov.w	r1, #4294967295
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	fa01 f303 	lsl.w	r3, r1, r3
 8008322:	43d9      	mvns	r1, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008328:	4313      	orrs	r3, r2
         );
}
 800832a:	4618      	mov	r0, r3
 800832c:	3724      	adds	r7, #36	; 0x24
 800832e:	46bd      	mov	sp, r7
 8008330:	bc80      	pop	{r7}
 8008332:	4770      	bx	lr

08008334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	3b01      	subs	r3, #1
 8008340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008344:	d301      	bcc.n	800834a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008346:	2301      	movs	r3, #1
 8008348:	e00f      	b.n	800836a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800834a:	4a0a      	ldr	r2, [pc, #40]	; (8008374 <SysTick_Config+0x40>)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3b01      	subs	r3, #1
 8008350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008352:	210f      	movs	r1, #15
 8008354:	f04f 30ff 	mov.w	r0, #4294967295
 8008358:	f7ff ff90 	bl	800827c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800835c:	4b05      	ldr	r3, [pc, #20]	; (8008374 <SysTick_Config+0x40>)
 800835e:	2200      	movs	r2, #0
 8008360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008362:	4b04      	ldr	r3, [pc, #16]	; (8008374 <SysTick_Config+0x40>)
 8008364:	2207      	movs	r2, #7
 8008366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	e000e010 	.word	0xe000e010

08008378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7ff ff49 	bl	8008218 <__NVIC_SetPriorityGrouping>
}
 8008386:	bf00      	nop
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800838e:	b580      	push	{r7, lr}
 8008390:	b086      	sub	sp, #24
 8008392:	af00      	add	r7, sp, #0
 8008394:	4603      	mov	r3, r0
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	607a      	str	r2, [r7, #4]
 800839a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800839c:	2300      	movs	r3, #0
 800839e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80083a0:	f7ff ff5e 	bl	8008260 <__NVIC_GetPriorityGrouping>
 80083a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	6978      	ldr	r0, [r7, #20]
 80083ac:	f7ff ff90 	bl	80082d0 <NVIC_EncodePriority>
 80083b0:	4602      	mov	r2, r0
 80083b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083b6:	4611      	mov	r1, r2
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7ff ff5f 	bl	800827c <__NVIC_SetPriority>
}
 80083be:	bf00      	nop
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff ffb0 	bl	8008334 <SysTick_Config>
 80083d4:	4603      	mov	r3, r0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80083e2:	f000 f802 	bl	80083ea <HAL_SYSTICK_Callback>
}
 80083e6:	bf00      	nop
 80083e8:	bd80      	pop	{r7, pc}

080083ea <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80083ea:	b480      	push	{r7}
 80083ec:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80083ee:	bf00      	nop
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bc80      	pop	{r7}
 80083f4:	4770      	bx	lr
	...

080083f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b08b      	sub	sp, #44	; 0x2c
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008402:	2300      	movs	r3, #0
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008406:	2300      	movs	r3, #0
 8008408:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800840a:	e179      	b.n	8008700 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800840c:	2201      	movs	r2, #1
 800840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008410:	fa02 f303 	lsl.w	r3, r2, r3
 8008414:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69fa      	ldr	r2, [r7, #28]
 800841c:	4013      	ands	r3, r2
 800841e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	429a      	cmp	r2, r3
 8008426:	f040 8168 	bne.w	80086fa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	4aa0      	ldr	r2, [pc, #640]	; (80086b0 <HAL_GPIO_Init+0x2b8>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d05e      	beq.n	80084f2 <HAL_GPIO_Init+0xfa>
 8008434:	4a9e      	ldr	r2, [pc, #632]	; (80086b0 <HAL_GPIO_Init+0x2b8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d875      	bhi.n	8008526 <HAL_GPIO_Init+0x12e>
 800843a:	4a9e      	ldr	r2, [pc, #632]	; (80086b4 <HAL_GPIO_Init+0x2bc>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d058      	beq.n	80084f2 <HAL_GPIO_Init+0xfa>
 8008440:	4a9c      	ldr	r2, [pc, #624]	; (80086b4 <HAL_GPIO_Init+0x2bc>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d86f      	bhi.n	8008526 <HAL_GPIO_Init+0x12e>
 8008446:	4a9c      	ldr	r2, [pc, #624]	; (80086b8 <HAL_GPIO_Init+0x2c0>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d052      	beq.n	80084f2 <HAL_GPIO_Init+0xfa>
 800844c:	4a9a      	ldr	r2, [pc, #616]	; (80086b8 <HAL_GPIO_Init+0x2c0>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d869      	bhi.n	8008526 <HAL_GPIO_Init+0x12e>
 8008452:	4a9a      	ldr	r2, [pc, #616]	; (80086bc <HAL_GPIO_Init+0x2c4>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d04c      	beq.n	80084f2 <HAL_GPIO_Init+0xfa>
 8008458:	4a98      	ldr	r2, [pc, #608]	; (80086bc <HAL_GPIO_Init+0x2c4>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d863      	bhi.n	8008526 <HAL_GPIO_Init+0x12e>
 800845e:	4a98      	ldr	r2, [pc, #608]	; (80086c0 <HAL_GPIO_Init+0x2c8>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d046      	beq.n	80084f2 <HAL_GPIO_Init+0xfa>
 8008464:	4a96      	ldr	r2, [pc, #600]	; (80086c0 <HAL_GPIO_Init+0x2c8>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d85d      	bhi.n	8008526 <HAL_GPIO_Init+0x12e>
 800846a:	2b12      	cmp	r3, #18
 800846c:	d82a      	bhi.n	80084c4 <HAL_GPIO_Init+0xcc>
 800846e:	2b12      	cmp	r3, #18
 8008470:	d859      	bhi.n	8008526 <HAL_GPIO_Init+0x12e>
 8008472:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <HAL_GPIO_Init+0x80>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	080084f3 	.word	0x080084f3
 800847c:	080084cd 	.word	0x080084cd
 8008480:	080084df 	.word	0x080084df
 8008484:	08008521 	.word	0x08008521
 8008488:	08008527 	.word	0x08008527
 800848c:	08008527 	.word	0x08008527
 8008490:	08008527 	.word	0x08008527
 8008494:	08008527 	.word	0x08008527
 8008498:	08008527 	.word	0x08008527
 800849c:	08008527 	.word	0x08008527
 80084a0:	08008527 	.word	0x08008527
 80084a4:	08008527 	.word	0x08008527
 80084a8:	08008527 	.word	0x08008527
 80084ac:	08008527 	.word	0x08008527
 80084b0:	08008527 	.word	0x08008527
 80084b4:	08008527 	.word	0x08008527
 80084b8:	08008527 	.word	0x08008527
 80084bc:	080084d5 	.word	0x080084d5
 80084c0:	080084e9 	.word	0x080084e9
 80084c4:	4a7f      	ldr	r2, [pc, #508]	; (80086c4 <HAL_GPIO_Init+0x2cc>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d013      	beq.n	80084f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80084ca:	e02c      	b.n	8008526 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	623b      	str	r3, [r7, #32]
          break;
 80084d2:	e029      	b.n	8008528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	3304      	adds	r3, #4
 80084da:	623b      	str	r3, [r7, #32]
          break;
 80084dc:	e024      	b.n	8008528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	3308      	adds	r3, #8
 80084e4:	623b      	str	r3, [r7, #32]
          break;
 80084e6:	e01f      	b.n	8008528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	330c      	adds	r3, #12
 80084ee:	623b      	str	r3, [r7, #32]
          break;
 80084f0:	e01a      	b.n	8008528 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d102      	bne.n	8008500 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80084fa:	2304      	movs	r3, #4
 80084fc:	623b      	str	r3, [r7, #32]
          break;
 80084fe:	e013      	b.n	8008528 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d105      	bne.n	8008514 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008508:	2308      	movs	r3, #8
 800850a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	69fa      	ldr	r2, [r7, #28]
 8008510:	611a      	str	r2, [r3, #16]
          break;
 8008512:	e009      	b.n	8008528 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008514:	2308      	movs	r3, #8
 8008516:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	69fa      	ldr	r2, [r7, #28]
 800851c:	615a      	str	r2, [r3, #20]
          break;
 800851e:	e003      	b.n	8008528 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008520:	2300      	movs	r3, #0
 8008522:	623b      	str	r3, [r7, #32]
          break;
 8008524:	e000      	b.n	8008528 <HAL_GPIO_Init+0x130>
          break;
 8008526:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	2bff      	cmp	r3, #255	; 0xff
 800852c:	d801      	bhi.n	8008532 <HAL_GPIO_Init+0x13a>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	e001      	b.n	8008536 <HAL_GPIO_Init+0x13e>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3304      	adds	r3, #4
 8008536:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	2bff      	cmp	r3, #255	; 0xff
 800853c:	d802      	bhi.n	8008544 <HAL_GPIO_Init+0x14c>
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	e002      	b.n	800854a <HAL_GPIO_Init+0x152>
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	3b08      	subs	r3, #8
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	210f      	movs	r1, #15
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	fa01 f303 	lsl.w	r3, r1, r3
 8008558:	43db      	mvns	r3, r3
 800855a:	401a      	ands	r2, r3
 800855c:	6a39      	ldr	r1, [r7, #32]
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	fa01 f303 	lsl.w	r3, r1, r3
 8008564:	431a      	orrs	r2, r3
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 80c1 	beq.w	80086fa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008578:	4b53      	ldr	r3, [pc, #332]	; (80086c8 <HAL_GPIO_Init+0x2d0>)
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	4a52      	ldr	r2, [pc, #328]	; (80086c8 <HAL_GPIO_Init+0x2d0>)
 800857e:	f043 0301 	orr.w	r3, r3, #1
 8008582:	6193      	str	r3, [r2, #24]
 8008584:	4b50      	ldr	r3, [pc, #320]	; (80086c8 <HAL_GPIO_Init+0x2d0>)
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	60bb      	str	r3, [r7, #8]
 800858e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008590:	4a4e      	ldr	r2, [pc, #312]	; (80086cc <HAL_GPIO_Init+0x2d4>)
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	089b      	lsrs	r3, r3, #2
 8008596:	3302      	adds	r3, #2
 8008598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800859c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	f003 0303 	and.w	r3, r3, #3
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	220f      	movs	r2, #15
 80085a8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ac:	43db      	mvns	r3, r3
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4013      	ands	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a46      	ldr	r2, [pc, #280]	; (80086d0 <HAL_GPIO_Init+0x2d8>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d01f      	beq.n	80085fc <HAL_GPIO_Init+0x204>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a45      	ldr	r2, [pc, #276]	; (80086d4 <HAL_GPIO_Init+0x2dc>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d019      	beq.n	80085f8 <HAL_GPIO_Init+0x200>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a44      	ldr	r2, [pc, #272]	; (80086d8 <HAL_GPIO_Init+0x2e0>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d013      	beq.n	80085f4 <HAL_GPIO_Init+0x1fc>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a43      	ldr	r2, [pc, #268]	; (80086dc <HAL_GPIO_Init+0x2e4>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d00d      	beq.n	80085f0 <HAL_GPIO_Init+0x1f8>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a42      	ldr	r2, [pc, #264]	; (80086e0 <HAL_GPIO_Init+0x2e8>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d007      	beq.n	80085ec <HAL_GPIO_Init+0x1f4>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a41      	ldr	r2, [pc, #260]	; (80086e4 <HAL_GPIO_Init+0x2ec>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d101      	bne.n	80085e8 <HAL_GPIO_Init+0x1f0>
 80085e4:	2305      	movs	r3, #5
 80085e6:	e00a      	b.n	80085fe <HAL_GPIO_Init+0x206>
 80085e8:	2306      	movs	r3, #6
 80085ea:	e008      	b.n	80085fe <HAL_GPIO_Init+0x206>
 80085ec:	2304      	movs	r3, #4
 80085ee:	e006      	b.n	80085fe <HAL_GPIO_Init+0x206>
 80085f0:	2303      	movs	r3, #3
 80085f2:	e004      	b.n	80085fe <HAL_GPIO_Init+0x206>
 80085f4:	2302      	movs	r3, #2
 80085f6:	e002      	b.n	80085fe <HAL_GPIO_Init+0x206>
 80085f8:	2301      	movs	r3, #1
 80085fa:	e000      	b.n	80085fe <HAL_GPIO_Init+0x206>
 80085fc:	2300      	movs	r3, #0
 80085fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008600:	f002 0203 	and.w	r2, r2, #3
 8008604:	0092      	lsls	r2, r2, #2
 8008606:	4093      	lsls	r3, r2
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4313      	orrs	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800860e:	492f      	ldr	r1, [pc, #188]	; (80086cc <HAL_GPIO_Init+0x2d4>)
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	089b      	lsrs	r3, r3, #2
 8008614:	3302      	adds	r3, #2
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d006      	beq.n	8008636 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008628:	4b2f      	ldr	r3, [pc, #188]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	492e      	ldr	r1, [pc, #184]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	4313      	orrs	r3, r2
 8008632:	600b      	str	r3, [r1, #0]
 8008634:	e006      	b.n	8008644 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008636:	4b2c      	ldr	r3, [pc, #176]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	43db      	mvns	r3, r3
 800863e:	492a      	ldr	r1, [pc, #168]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 8008640:	4013      	ands	r3, r2
 8008642:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d006      	beq.n	800865e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008650:	4b25      	ldr	r3, [pc, #148]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	4924      	ldr	r1, [pc, #144]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	4313      	orrs	r3, r2
 800865a:	604b      	str	r3, [r1, #4]
 800865c:	e006      	b.n	800866c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800865e:	4b22      	ldr	r3, [pc, #136]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	43db      	mvns	r3, r3
 8008666:	4920      	ldr	r1, [pc, #128]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 8008668:	4013      	ands	r3, r2
 800866a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d006      	beq.n	8008686 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008678:	4b1b      	ldr	r3, [pc, #108]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	491a      	ldr	r1, [pc, #104]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	4313      	orrs	r3, r2
 8008682:	608b      	str	r3, [r1, #8]
 8008684:	e006      	b.n	8008694 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008686:	4b18      	ldr	r3, [pc, #96]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 8008688:	689a      	ldr	r2, [r3, #8]
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	43db      	mvns	r3, r3
 800868e:	4916      	ldr	r1, [pc, #88]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 8008690:	4013      	ands	r3, r2
 8008692:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d025      	beq.n	80086ec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80086a0:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	4910      	ldr	r1, [pc, #64]	; (80086e8 <HAL_GPIO_Init+0x2f0>)
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	60cb      	str	r3, [r1, #12]
 80086ac:	e025      	b.n	80086fa <HAL_GPIO_Init+0x302>
 80086ae:	bf00      	nop
 80086b0:	10320000 	.word	0x10320000
 80086b4:	10310000 	.word	0x10310000
 80086b8:	10220000 	.word	0x10220000
 80086bc:	10210000 	.word	0x10210000
 80086c0:	10120000 	.word	0x10120000
 80086c4:	10110000 	.word	0x10110000
 80086c8:	40021000 	.word	0x40021000
 80086cc:	40010000 	.word	0x40010000
 80086d0:	40010800 	.word	0x40010800
 80086d4:	40010c00 	.word	0x40010c00
 80086d8:	40011000 	.word	0x40011000
 80086dc:	40011400 	.word	0x40011400
 80086e0:	40011800 	.word	0x40011800
 80086e4:	40011c00 	.word	0x40011c00
 80086e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80086ec:	4b0b      	ldr	r3, [pc, #44]	; (800871c <HAL_GPIO_Init+0x324>)
 80086ee:	68da      	ldr	r2, [r3, #12]
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	43db      	mvns	r3, r3
 80086f4:	4909      	ldr	r1, [pc, #36]	; (800871c <HAL_GPIO_Init+0x324>)
 80086f6:	4013      	ands	r3, r2
 80086f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	3301      	adds	r3, #1
 80086fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	fa22 f303 	lsr.w	r3, r2, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	f47f ae7e 	bne.w	800840c <HAL_GPIO_Init+0x14>
  }
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	372c      	adds	r7, #44	; 0x2c
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr
 800871c:	40010400 	.word	0x40010400

08008720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	807b      	strh	r3, [r7, #2]
 800872c:	4613      	mov	r3, r2
 800872e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008730:	787b      	ldrb	r3, [r7, #1]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008736:	887a      	ldrh	r2, [r7, #2]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800873c:	e003      	b.n	8008746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800873e:	887b      	ldrh	r3, [r7, #2]
 8008740:	041a      	lsls	r2, r3, #16
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	611a      	str	r2, [r3, #16]
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr

08008750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d101      	bne.n	8008762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e26c      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 8087 	beq.w	800887e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008770:	4b92      	ldr	r3, [pc, #584]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f003 030c 	and.w	r3, r3, #12
 8008778:	2b04      	cmp	r3, #4
 800877a:	d00c      	beq.n	8008796 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800877c:	4b8f      	ldr	r3, [pc, #572]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	f003 030c 	and.w	r3, r3, #12
 8008784:	2b08      	cmp	r3, #8
 8008786:	d112      	bne.n	80087ae <HAL_RCC_OscConfig+0x5e>
 8008788:	4b8c      	ldr	r3, [pc, #560]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008794:	d10b      	bne.n	80087ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008796:	4b89      	ldr	r3, [pc, #548]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d06c      	beq.n	800887c <HAL_RCC_OscConfig+0x12c>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d168      	bne.n	800887c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e246      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087b6:	d106      	bne.n	80087c6 <HAL_RCC_OscConfig+0x76>
 80087b8:	4b80      	ldr	r3, [pc, #512]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a7f      	ldr	r2, [pc, #508]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 80087be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087c2:	6013      	str	r3, [r2, #0]
 80087c4:	e02e      	b.n	8008824 <HAL_RCC_OscConfig+0xd4>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10c      	bne.n	80087e8 <HAL_RCC_OscConfig+0x98>
 80087ce:	4b7b      	ldr	r3, [pc, #492]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a7a      	ldr	r2, [pc, #488]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 80087d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	4b78      	ldr	r3, [pc, #480]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a77      	ldr	r2, [pc, #476]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 80087e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	e01d      	b.n	8008824 <HAL_RCC_OscConfig+0xd4>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087f0:	d10c      	bne.n	800880c <HAL_RCC_OscConfig+0xbc>
 80087f2:	4b72      	ldr	r3, [pc, #456]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a71      	ldr	r2, [pc, #452]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 80087f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	4b6f      	ldr	r3, [pc, #444]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a6e      	ldr	r2, [pc, #440]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 8008804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008808:	6013      	str	r3, [r2, #0]
 800880a:	e00b      	b.n	8008824 <HAL_RCC_OscConfig+0xd4>
 800880c:	4b6b      	ldr	r3, [pc, #428]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a6a      	ldr	r2, [pc, #424]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 8008812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	4b68      	ldr	r3, [pc, #416]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a67      	ldr	r2, [pc, #412]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 800881e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008822:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d013      	beq.n	8008854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800882c:	f7ff fcea 	bl	8008204 <HAL_GetTick>
 8008830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008832:	e008      	b.n	8008846 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008834:	f7ff fce6 	bl	8008204 <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b64      	cmp	r3, #100	; 0x64
 8008840:	d901      	bls.n	8008846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e1fa      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008846:	4b5d      	ldr	r3, [pc, #372]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0f0      	beq.n	8008834 <HAL_RCC_OscConfig+0xe4>
 8008852:	e014      	b.n	800887e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008854:	f7ff fcd6 	bl	8008204 <HAL_GetTick>
 8008858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800885a:	e008      	b.n	800886e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800885c:	f7ff fcd2 	bl	8008204 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b64      	cmp	r3, #100	; 0x64
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e1e6      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800886e:	4b53      	ldr	r3, [pc, #332]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1f0      	bne.n	800885c <HAL_RCC_OscConfig+0x10c>
 800887a:	e000      	b.n	800887e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800887c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b00      	cmp	r3, #0
 8008888:	d063      	beq.n	8008952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800888a:	4b4c      	ldr	r3, [pc, #304]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f003 030c 	and.w	r3, r3, #12
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00b      	beq.n	80088ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008896:	4b49      	ldr	r3, [pc, #292]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f003 030c 	and.w	r3, r3, #12
 800889e:	2b08      	cmp	r3, #8
 80088a0:	d11c      	bne.n	80088dc <HAL_RCC_OscConfig+0x18c>
 80088a2:	4b46      	ldr	r3, [pc, #280]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d116      	bne.n	80088dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088ae:	4b43      	ldr	r3, [pc, #268]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d005      	beq.n	80088c6 <HAL_RCC_OscConfig+0x176>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d001      	beq.n	80088c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e1ba      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088c6:	4b3d      	ldr	r3, [pc, #244]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	4939      	ldr	r1, [pc, #228]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088da:	e03a      	b.n	8008952 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d020      	beq.n	8008926 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088e4:	4b36      	ldr	r3, [pc, #216]	; (80089c0 <HAL_RCC_OscConfig+0x270>)
 80088e6:	2201      	movs	r2, #1
 80088e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088ea:	f7ff fc8b 	bl	8008204 <HAL_GetTick>
 80088ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088f0:	e008      	b.n	8008904 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088f2:	f7ff fc87 	bl	8008204 <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d901      	bls.n	8008904 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e19b      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008904:	4b2d      	ldr	r3, [pc, #180]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d0f0      	beq.n	80088f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008910:	4b2a      	ldr	r3, [pc, #168]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	4927      	ldr	r1, [pc, #156]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 8008920:	4313      	orrs	r3, r2
 8008922:	600b      	str	r3, [r1, #0]
 8008924:	e015      	b.n	8008952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008926:	4b26      	ldr	r3, [pc, #152]	; (80089c0 <HAL_RCC_OscConfig+0x270>)
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800892c:	f7ff fc6a 	bl	8008204 <HAL_GetTick>
 8008930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008932:	e008      	b.n	8008946 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008934:	f7ff fc66 	bl	8008204 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	2b02      	cmp	r3, #2
 8008940:	d901      	bls.n	8008946 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e17a      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008946:	4b1d      	ldr	r3, [pc, #116]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1f0      	bne.n	8008934 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0308 	and.w	r3, r3, #8
 800895a:	2b00      	cmp	r3, #0
 800895c:	d03a      	beq.n	80089d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d019      	beq.n	800899a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008966:	4b17      	ldr	r3, [pc, #92]	; (80089c4 <HAL_RCC_OscConfig+0x274>)
 8008968:	2201      	movs	r2, #1
 800896a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800896c:	f7ff fc4a 	bl	8008204 <HAL_GetTick>
 8008970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008972:	e008      	b.n	8008986 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008974:	f7ff fc46 	bl	8008204 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b02      	cmp	r3, #2
 8008980:	d901      	bls.n	8008986 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e15a      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008986:	4b0d      	ldr	r3, [pc, #52]	; (80089bc <HAL_RCC_OscConfig+0x26c>)
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0f0      	beq.n	8008974 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008992:	2001      	movs	r0, #1
 8008994:	f000 fad8 	bl	8008f48 <RCC_Delay>
 8008998:	e01c      	b.n	80089d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800899a:	4b0a      	ldr	r3, [pc, #40]	; (80089c4 <HAL_RCC_OscConfig+0x274>)
 800899c:	2200      	movs	r2, #0
 800899e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089a0:	f7ff fc30 	bl	8008204 <HAL_GetTick>
 80089a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089a6:	e00f      	b.n	80089c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089a8:	f7ff fc2c 	bl	8008204 <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d908      	bls.n	80089c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e140      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
 80089ba:	bf00      	nop
 80089bc:	40021000 	.word	0x40021000
 80089c0:	42420000 	.word	0x42420000
 80089c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089c8:	4b9e      	ldr	r3, [pc, #632]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e9      	bne.n	80089a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0304 	and.w	r3, r3, #4
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 80a6 	beq.w	8008b2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089e2:	2300      	movs	r3, #0
 80089e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089e6:	4b97      	ldr	r3, [pc, #604]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10d      	bne.n	8008a0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089f2:	4b94      	ldr	r3, [pc, #592]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	4a93      	ldr	r2, [pc, #588]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 80089f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089fc:	61d3      	str	r3, [r2, #28]
 80089fe:	4b91      	ldr	r3, [pc, #580]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a06:	60bb      	str	r3, [r7, #8]
 8008a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a0e:	4b8e      	ldr	r3, [pc, #568]	; (8008c48 <HAL_RCC_OscConfig+0x4f8>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d118      	bne.n	8008a4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a1a:	4b8b      	ldr	r3, [pc, #556]	; (8008c48 <HAL_RCC_OscConfig+0x4f8>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a8a      	ldr	r2, [pc, #552]	; (8008c48 <HAL_RCC_OscConfig+0x4f8>)
 8008a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a26:	f7ff fbed 	bl	8008204 <HAL_GetTick>
 8008a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a2c:	e008      	b.n	8008a40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a2e:	f7ff fbe9 	bl	8008204 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	2b64      	cmp	r3, #100	; 0x64
 8008a3a:	d901      	bls.n	8008a40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e0fd      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a40:	4b81      	ldr	r3, [pc, #516]	; (8008c48 <HAL_RCC_OscConfig+0x4f8>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0f0      	beq.n	8008a2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d106      	bne.n	8008a62 <HAL_RCC_OscConfig+0x312>
 8008a54:	4b7b      	ldr	r3, [pc, #492]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	4a7a      	ldr	r2, [pc, #488]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008a5a:	f043 0301 	orr.w	r3, r3, #1
 8008a5e:	6213      	str	r3, [r2, #32]
 8008a60:	e02d      	b.n	8008abe <HAL_RCC_OscConfig+0x36e>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10c      	bne.n	8008a84 <HAL_RCC_OscConfig+0x334>
 8008a6a:	4b76      	ldr	r3, [pc, #472]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	4a75      	ldr	r2, [pc, #468]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008a70:	f023 0301 	bic.w	r3, r3, #1
 8008a74:	6213      	str	r3, [r2, #32]
 8008a76:	4b73      	ldr	r3, [pc, #460]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	4a72      	ldr	r2, [pc, #456]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008a7c:	f023 0304 	bic.w	r3, r3, #4
 8008a80:	6213      	str	r3, [r2, #32]
 8008a82:	e01c      	b.n	8008abe <HAL_RCC_OscConfig+0x36e>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	2b05      	cmp	r3, #5
 8008a8a:	d10c      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x356>
 8008a8c:	4b6d      	ldr	r3, [pc, #436]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	4a6c      	ldr	r2, [pc, #432]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008a92:	f043 0304 	orr.w	r3, r3, #4
 8008a96:	6213      	str	r3, [r2, #32]
 8008a98:	4b6a      	ldr	r3, [pc, #424]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008a9a:	6a1b      	ldr	r3, [r3, #32]
 8008a9c:	4a69      	ldr	r2, [pc, #420]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008a9e:	f043 0301 	orr.w	r3, r3, #1
 8008aa2:	6213      	str	r3, [r2, #32]
 8008aa4:	e00b      	b.n	8008abe <HAL_RCC_OscConfig+0x36e>
 8008aa6:	4b67      	ldr	r3, [pc, #412]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	4a66      	ldr	r2, [pc, #408]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008aac:	f023 0301 	bic.w	r3, r3, #1
 8008ab0:	6213      	str	r3, [r2, #32]
 8008ab2:	4b64      	ldr	r3, [pc, #400]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	4a63      	ldr	r2, [pc, #396]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008ab8:	f023 0304 	bic.w	r3, r3, #4
 8008abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d015      	beq.n	8008af2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ac6:	f7ff fb9d 	bl	8008204 <HAL_GetTick>
 8008aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008acc:	e00a      	b.n	8008ae4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ace:	f7ff fb99 	bl	8008204 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d901      	bls.n	8008ae4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e0ab      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ae4:	4b57      	ldr	r3, [pc, #348]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008ae6:	6a1b      	ldr	r3, [r3, #32]
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0ee      	beq.n	8008ace <HAL_RCC_OscConfig+0x37e>
 8008af0:	e014      	b.n	8008b1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008af2:	f7ff fb87 	bl	8008204 <HAL_GetTick>
 8008af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008af8:	e00a      	b.n	8008b10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008afa:	f7ff fb83 	bl	8008204 <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d901      	bls.n	8008b10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e095      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b10:	4b4c      	ldr	r3, [pc, #304]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1ee      	bne.n	8008afa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d105      	bne.n	8008b2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b22:	4b48      	ldr	r3, [pc, #288]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	4a47      	ldr	r2, [pc, #284]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 8081 	beq.w	8008c3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b38:	4b42      	ldr	r3, [pc, #264]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f003 030c 	and.w	r3, r3, #12
 8008b40:	2b08      	cmp	r3, #8
 8008b42:	d061      	beq.n	8008c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d146      	bne.n	8008bda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b4c:	4b3f      	ldr	r3, [pc, #252]	; (8008c4c <HAL_RCC_OscConfig+0x4fc>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b52:	f7ff fb57 	bl	8008204 <HAL_GetTick>
 8008b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b58:	e008      	b.n	8008b6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b5a:	f7ff fb53 	bl	8008204 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d901      	bls.n	8008b6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e067      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b6c:	4b35      	ldr	r3, [pc, #212]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1f0      	bne.n	8008b5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a1b      	ldr	r3, [r3, #32]
 8008b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b80:	d108      	bne.n	8008b94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008b82:	4b30      	ldr	r3, [pc, #192]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	492d      	ldr	r1, [pc, #180]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b94:	4b2b      	ldr	r3, [pc, #172]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a19      	ldr	r1, [r3, #32]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba4:	430b      	orrs	r3, r1
 8008ba6:	4927      	ldr	r1, [pc, #156]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bac:	4b27      	ldr	r3, [pc, #156]	; (8008c4c <HAL_RCC_OscConfig+0x4fc>)
 8008bae:	2201      	movs	r2, #1
 8008bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bb2:	f7ff fb27 	bl	8008204 <HAL_GetTick>
 8008bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008bb8:	e008      	b.n	8008bcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bba:	f7ff fb23 	bl	8008204 <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d901      	bls.n	8008bcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e037      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d0f0      	beq.n	8008bba <HAL_RCC_OscConfig+0x46a>
 8008bd8:	e02f      	b.n	8008c3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bda:	4b1c      	ldr	r3, [pc, #112]	; (8008c4c <HAL_RCC_OscConfig+0x4fc>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008be0:	f7ff fb10 	bl	8008204 <HAL_GetTick>
 8008be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008be6:	e008      	b.n	8008bfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008be8:	f7ff fb0c 	bl	8008204 <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e020      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bfa:	4b12      	ldr	r3, [pc, #72]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1f0      	bne.n	8008be8 <HAL_RCC_OscConfig+0x498>
 8008c06:	e018      	b.n	8008c3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e013      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008c14:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <HAL_RCC_OscConfig+0x4f4>)
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a1b      	ldr	r3, [r3, #32]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d106      	bne.n	8008c36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d001      	beq.n	8008c3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e000      	b.n	8008c3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	40021000 	.word	0x40021000
 8008c48:	40007000 	.word	0x40007000
 8008c4c:	42420060 	.word	0x42420060

08008c50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e0d0      	b.n	8008e06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c64:	4b6a      	ldr	r3, [pc, #424]	; (8008e10 <HAL_RCC_ClockConfig+0x1c0>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d910      	bls.n	8008c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c72:	4b67      	ldr	r3, [pc, #412]	; (8008e10 <HAL_RCC_ClockConfig+0x1c0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f023 0207 	bic.w	r2, r3, #7
 8008c7a:	4965      	ldr	r1, [pc, #404]	; (8008e10 <HAL_RCC_ClockConfig+0x1c0>)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c82:	4b63      	ldr	r3, [pc, #396]	; (8008e10 <HAL_RCC_ClockConfig+0x1c0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d001      	beq.n	8008c94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e0b8      	b.n	8008e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d020      	beq.n	8008ce2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d005      	beq.n	8008cb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cac:	4b59      	ldr	r3, [pc, #356]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	4a58      	ldr	r2, [pc, #352]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008cb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008cb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0308 	and.w	r3, r3, #8
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d005      	beq.n	8008cd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008cc4:	4b53      	ldr	r3, [pc, #332]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	4a52      	ldr	r2, [pc, #328]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008cca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008cce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cd0:	4b50      	ldr	r3, [pc, #320]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	494d      	ldr	r1, [pc, #308]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d040      	beq.n	8008d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d107      	bne.n	8008d06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cf6:	4b47      	ldr	r3, [pc, #284]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d115      	bne.n	8008d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e07f      	b.n	8008e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d107      	bne.n	8008d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d0e:	4b41      	ldr	r3, [pc, #260]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d109      	bne.n	8008d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e073      	b.n	8008e06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d1e:	4b3d      	ldr	r3, [pc, #244]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0302 	and.w	r3, r3, #2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e06b      	b.n	8008e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d2e:	4b39      	ldr	r3, [pc, #228]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f023 0203 	bic.w	r2, r3, #3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	4936      	ldr	r1, [pc, #216]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d40:	f7ff fa60 	bl	8008204 <HAL_GetTick>
 8008d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d46:	e00a      	b.n	8008d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d48:	f7ff fa5c 	bl	8008204 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e053      	b.n	8008e06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d5e:	4b2d      	ldr	r3, [pc, #180]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f003 020c 	and.w	r2, r3, #12
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d1eb      	bne.n	8008d48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d70:	4b27      	ldr	r3, [pc, #156]	; (8008e10 <HAL_RCC_ClockConfig+0x1c0>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0307 	and.w	r3, r3, #7
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d210      	bcs.n	8008da0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d7e:	4b24      	ldr	r3, [pc, #144]	; (8008e10 <HAL_RCC_ClockConfig+0x1c0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f023 0207 	bic.w	r2, r3, #7
 8008d86:	4922      	ldr	r1, [pc, #136]	; (8008e10 <HAL_RCC_ClockConfig+0x1c0>)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d8e:	4b20      	ldr	r3, [pc, #128]	; (8008e10 <HAL_RCC_ClockConfig+0x1c0>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0307 	and.w	r3, r3, #7
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d001      	beq.n	8008da0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e032      	b.n	8008e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0304 	and.w	r3, r3, #4
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d008      	beq.n	8008dbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dac:	4b19      	ldr	r3, [pc, #100]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	4916      	ldr	r1, [pc, #88]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0308 	and.w	r3, r3, #8
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d009      	beq.n	8008dde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008dca:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	490e      	ldr	r1, [pc, #56]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008dde:	f000 f821 	bl	8008e24 <HAL_RCC_GetSysClockFreq>
 8008de2:	4602      	mov	r2, r0
 8008de4:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	091b      	lsrs	r3, r3, #4
 8008dea:	f003 030f 	and.w	r3, r3, #15
 8008dee:	490a      	ldr	r1, [pc, #40]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008df0:	5ccb      	ldrb	r3, [r1, r3]
 8008df2:	fa22 f303 	lsr.w	r3, r2, r3
 8008df6:	4a09      	ldr	r2, [pc, #36]	; (8008e1c <HAL_RCC_ClockConfig+0x1cc>)
 8008df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008dfa:	4b09      	ldr	r3, [pc, #36]	; (8008e20 <HAL_RCC_ClockConfig+0x1d0>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff f9be 	bl	8008180 <HAL_InitTick>

  return HAL_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	40022000 	.word	0x40022000
 8008e14:	40021000 	.word	0x40021000
 8008e18:	0800d904 	.word	0x0800d904
 8008e1c:	20000004 	.word	0x20000004
 8008e20:	20000008 	.word	0x20000008

08008e24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e24:	b490      	push	{r4, r7}
 8008e26:	b08a      	sub	sp, #40	; 0x28
 8008e28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008e2a:	4b2a      	ldr	r3, [pc, #168]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008e2c:	1d3c      	adds	r4, r7, #4
 8008e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008e34:	f240 2301 	movw	r3, #513	; 0x201
 8008e38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	61fb      	str	r3, [r7, #28]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61bb      	str	r3, [r7, #24]
 8008e42:	2300      	movs	r3, #0
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
 8008e46:	2300      	movs	r3, #0
 8008e48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008e4e:	4b22      	ldr	r3, [pc, #136]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	f003 030c 	and.w	r3, r3, #12
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	d002      	beq.n	8008e64 <HAL_RCC_GetSysClockFreq+0x40>
 8008e5e:	2b08      	cmp	r3, #8
 8008e60:	d003      	beq.n	8008e6a <HAL_RCC_GetSysClockFreq+0x46>
 8008e62:	e02d      	b.n	8008ec0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008e64:	4b1d      	ldr	r3, [pc, #116]	; (8008edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e66:	623b      	str	r3, [r7, #32]
      break;
 8008e68:	e02d      	b.n	8008ec6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	0c9b      	lsrs	r3, r3, #18
 8008e6e:	f003 030f 	and.w	r3, r3, #15
 8008e72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008e76:	4413      	add	r3, r2
 8008e78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008e7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d013      	beq.n	8008eb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008e88:	4b13      	ldr	r3, [pc, #76]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	0c5b      	lsrs	r3, r3, #17
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008e96:	4413      	add	r3, r2
 8008e98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008e9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	4a0e      	ldr	r2, [pc, #56]	; (8008edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ea2:	fb02 f203 	mul.w	r2, r2, r3
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
 8008eae:	e004      	b.n	8008eba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	4a0b      	ldr	r2, [pc, #44]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008eb4:	fb02 f303 	mul.w	r3, r2, r3
 8008eb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	623b      	str	r3, [r7, #32]
      break;
 8008ebe:	e002      	b.n	8008ec6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008ec0:	4b06      	ldr	r3, [pc, #24]	; (8008edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ec2:	623b      	str	r3, [r7, #32]
      break;
 8008ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ec6:	6a3b      	ldr	r3, [r7, #32]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3728      	adds	r7, #40	; 0x28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bc90      	pop	{r4, r7}
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	0800d8ac 	.word	0x0800d8ac
 8008ed8:	40021000 	.word	0x40021000
 8008edc:	007a1200 	.word	0x007a1200
 8008ee0:	003d0900 	.word	0x003d0900

08008ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ee8:	4b02      	ldr	r3, [pc, #8]	; (8008ef4 <HAL_RCC_GetHCLKFreq+0x10>)
 8008eea:	681b      	ldr	r3, [r3, #0]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr
 8008ef4:	20000004 	.word	0x20000004

08008ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008efc:	f7ff fff2 	bl	8008ee4 <HAL_RCC_GetHCLKFreq>
 8008f00:	4602      	mov	r2, r0
 8008f02:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	0a1b      	lsrs	r3, r3, #8
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	4903      	ldr	r1, [pc, #12]	; (8008f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f0e:	5ccb      	ldrb	r3, [r1, r3]
 8008f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40021000 	.word	0x40021000
 8008f1c:	0800d914 	.word	0x0800d914

08008f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008f24:	f7ff ffde 	bl	8008ee4 <HAL_RCC_GetHCLKFreq>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	0adb      	lsrs	r3, r3, #11
 8008f30:	f003 0307 	and.w	r3, r3, #7
 8008f34:	4903      	ldr	r1, [pc, #12]	; (8008f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f36:	5ccb      	ldrb	r3, [r1, r3]
 8008f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	40021000 	.word	0x40021000
 8008f44:	0800d914 	.word	0x0800d914

08008f48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008f50:	4b0a      	ldr	r3, [pc, #40]	; (8008f7c <RCC_Delay+0x34>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a0a      	ldr	r2, [pc, #40]	; (8008f80 <RCC_Delay+0x38>)
 8008f56:	fba2 2303 	umull	r2, r3, r2, r3
 8008f5a:	0a5b      	lsrs	r3, r3, #9
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	fb02 f303 	mul.w	r3, r2, r3
 8008f62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008f64:	bf00      	nop
  }
  while (Delay --);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	1e5a      	subs	r2, r3, #1
 8008f6a:	60fa      	str	r2, [r7, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1f9      	bne.n	8008f64 <RCC_Delay+0x1c>
}
 8008f70:	bf00      	nop
 8008f72:	bf00      	nop
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bc80      	pop	{r7}
 8008f7a:	4770      	bx	lr
 8008f7c:	20000004 	.word	0x20000004
 8008f80:	10624dd3 	.word	0x10624dd3

08008f84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e076      	b.n	8009084 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d108      	bne.n	8008fb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fa6:	d009      	beq.n	8008fbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	61da      	str	r2, [r3, #28]
 8008fae:	e005      	b.n	8008fbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d106      	bne.n	8008fdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7fe ff82 	bl	8007ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ff2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009004:	431a      	orrs	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800900e:	431a      	orrs	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	f003 0302 	and.w	r3, r3, #2
 8009018:	431a      	orrs	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	431a      	orrs	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800902c:	431a      	orrs	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	69db      	ldr	r3, [r3, #28]
 8009032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009036:	431a      	orrs	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009040:	ea42 0103 	orr.w	r1, r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009048:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	430a      	orrs	r2, r1
 8009052:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	0c1a      	lsrs	r2, r3, #16
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f002 0204 	and.w	r2, r2, #4
 8009062:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	69da      	ldr	r2, [r3, #28]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009072:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	603b      	str	r3, [r7, #0]
 8009098:	4613      	mov	r3, r2
 800909a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d101      	bne.n	80090ae <HAL_SPI_Transmit+0x22>
 80090aa:	2302      	movs	r3, #2
 80090ac:	e126      	b.n	80092fc <HAL_SPI_Transmit+0x270>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090b6:	f7ff f8a5 	bl	8008204 <HAL_GetTick>
 80090ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80090bc:	88fb      	ldrh	r3, [r7, #6]
 80090be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d002      	beq.n	80090d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80090cc:	2302      	movs	r3, #2
 80090ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090d0:	e10b      	b.n	80092ea <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <HAL_SPI_Transmit+0x52>
 80090d8:	88fb      	ldrh	r3, [r7, #6]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d102      	bne.n	80090e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090e2:	e102      	b.n	80092ea <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2203      	movs	r2, #3
 80090e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	88fa      	ldrh	r2, [r7, #6]
 80090fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	88fa      	ldrh	r2, [r7, #6]
 8009102:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800912a:	d10f      	bne.n	800914c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800913a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800914a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009156:	2b40      	cmp	r3, #64	; 0x40
 8009158:	d007      	beq.n	800916a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009168:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009172:	d14b      	bne.n	800920c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <HAL_SPI_Transmit+0xf6>
 800917c:	8afb      	ldrh	r3, [r7, #22]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d13e      	bne.n	8009200 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009186:	881a      	ldrh	r2, [r3, #0]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009192:	1c9a      	adds	r2, r3, #2
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800919c:	b29b      	uxth	r3, r3
 800919e:	3b01      	subs	r3, #1
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80091a6:	e02b      	b.n	8009200 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d112      	bne.n	80091dc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ba:	881a      	ldrh	r2, [r3, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	1c9a      	adds	r2, r3, #2
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80091da:	e011      	b.n	8009200 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091dc:	f7ff f812 	bl	8008204 <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d803      	bhi.n	80091f4 <HAL_SPI_Transmit+0x168>
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f2:	d102      	bne.n	80091fa <HAL_SPI_Transmit+0x16e>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d102      	bne.n	8009200 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091fe:	e074      	b.n	80092ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009204:	b29b      	uxth	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1ce      	bne.n	80091a8 <HAL_SPI_Transmit+0x11c>
 800920a:	e04c      	b.n	80092a6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <HAL_SPI_Transmit+0x18e>
 8009214:	8afb      	ldrh	r3, [r7, #22]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d140      	bne.n	800929c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	330c      	adds	r3, #12
 8009224:	7812      	ldrb	r2, [r2, #0]
 8009226:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009236:	b29b      	uxth	r3, r3
 8009238:	3b01      	subs	r3, #1
 800923a:	b29a      	uxth	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009240:	e02c      	b.n	800929c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b02      	cmp	r3, #2
 800924e:	d113      	bne.n	8009278 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	330c      	adds	r3, #12
 800925a:	7812      	ldrb	r2, [r2, #0]
 800925c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009262:	1c5a      	adds	r2, r3, #1
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800926c:	b29b      	uxth	r3, r3
 800926e:	3b01      	subs	r3, #1
 8009270:	b29a      	uxth	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	86da      	strh	r2, [r3, #54]	; 0x36
 8009276:	e011      	b.n	800929c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009278:	f7fe ffc4 	bl	8008204 <HAL_GetTick>
 800927c:	4602      	mov	r2, r0
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	429a      	cmp	r2, r3
 8009286:	d803      	bhi.n	8009290 <HAL_SPI_Transmit+0x204>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928e:	d102      	bne.n	8009296 <HAL_SPI_Transmit+0x20a>
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d102      	bne.n	800929c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	77fb      	strb	r3, [r7, #31]
          goto error;
 800929a:	e026      	b.n	80092ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1cd      	bne.n	8009242 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 fa62 	bl	8009774 <SPI_EndRxTxTransaction>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2220      	movs	r2, #32
 80092ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10a      	bne.n	80092da <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092c4:	2300      	movs	r3, #0
 80092c6:	613b      	str	r3, [r7, #16]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	613b      	str	r3, [r7, #16]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	613b      	str	r3, [r7, #16]
 80092d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d002      	beq.n	80092e8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	77fb      	strb	r3, [r7, #31]
 80092e6:	e000      	b.n	80092ea <HAL_SPI_Transmit+0x25e>
  }

error:
 80092e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80092fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3720      	adds	r7, #32
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b08c      	sub	sp, #48	; 0x30
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
 8009310:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009312:	2301      	movs	r3, #1
 8009314:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009322:	2b01      	cmp	r3, #1
 8009324:	d101      	bne.n	800932a <HAL_SPI_TransmitReceive+0x26>
 8009326:	2302      	movs	r3, #2
 8009328:	e18a      	b.n	8009640 <HAL_SPI_TransmitReceive+0x33c>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009332:	f7fe ff67 	bl	8008204 <HAL_GetTick>
 8009336:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800933e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009348:	887b      	ldrh	r3, [r7, #2]
 800934a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800934c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009350:	2b01      	cmp	r3, #1
 8009352:	d00f      	beq.n	8009374 <HAL_SPI_TransmitReceive+0x70>
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800935a:	d107      	bne.n	800936c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d103      	bne.n	800936c <HAL_SPI_TransmitReceive+0x68>
 8009364:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009368:	2b04      	cmp	r3, #4
 800936a:	d003      	beq.n	8009374 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800936c:	2302      	movs	r3, #2
 800936e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009372:	e15b      	b.n	800962c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d005      	beq.n	8009386 <HAL_SPI_TransmitReceive+0x82>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <HAL_SPI_TransmitReceive+0x82>
 8009380:	887b      	ldrh	r3, [r7, #2]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d103      	bne.n	800938e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800938c:	e14e      	b.n	800962c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b04      	cmp	r3, #4
 8009398:	d003      	beq.n	80093a2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2205      	movs	r2, #5
 800939e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	887a      	ldrh	r2, [r7, #2]
 80093b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	887a      	ldrh	r2, [r7, #2]
 80093b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	887a      	ldrh	r2, [r7, #2]
 80093c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	887a      	ldrh	r2, [r7, #2]
 80093ca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e2:	2b40      	cmp	r3, #64	; 0x40
 80093e4:	d007      	beq.n	80093f6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093fe:	d178      	bne.n	80094f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <HAL_SPI_TransmitReceive+0x10a>
 8009408:	8b7b      	ldrh	r3, [r7, #26]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d166      	bne.n	80094dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009412:	881a      	ldrh	r2, [r3, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941e:	1c9a      	adds	r2, r3, #2
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009428:	b29b      	uxth	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	b29a      	uxth	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009432:	e053      	b.n	80094dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f003 0302 	and.w	r3, r3, #2
 800943e:	2b02      	cmp	r3, #2
 8009440:	d11b      	bne.n	800947a <HAL_SPI_TransmitReceive+0x176>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009446:	b29b      	uxth	r3, r3
 8009448:	2b00      	cmp	r3, #0
 800944a:	d016      	beq.n	800947a <HAL_SPI_TransmitReceive+0x176>
 800944c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944e:	2b01      	cmp	r3, #1
 8009450:	d113      	bne.n	800947a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	881a      	ldrh	r2, [r3, #0]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009462:	1c9a      	adds	r2, r3, #2
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800946c:	b29b      	uxth	r3, r3
 800946e:	3b01      	subs	r3, #1
 8009470:	b29a      	uxth	r2, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b01      	cmp	r3, #1
 8009486:	d119      	bne.n	80094bc <HAL_SPI_TransmitReceive+0x1b8>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800948c:	b29b      	uxth	r3, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d014      	beq.n	80094bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68da      	ldr	r2, [r3, #12]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949c:	b292      	uxth	r2, r2
 800949e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a4:	1c9a      	adds	r2, r3, #2
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	3b01      	subs	r3, #1
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80094b8:	2301      	movs	r3, #1
 80094ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80094bc:	f7fe fea2 	bl	8008204 <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d807      	bhi.n	80094dc <HAL_SPI_TransmitReceive+0x1d8>
 80094cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d2:	d003      	beq.n	80094dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80094da:	e0a7      	b.n	800962c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1a6      	bne.n	8009434 <HAL_SPI_TransmitReceive+0x130>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1a1      	bne.n	8009434 <HAL_SPI_TransmitReceive+0x130>
 80094f0:	e07c      	b.n	80095ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <HAL_SPI_TransmitReceive+0x1fc>
 80094fa:	8b7b      	ldrh	r3, [r7, #26]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d16b      	bne.n	80095d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	330c      	adds	r3, #12
 800950a:	7812      	ldrb	r2, [r2, #0]
 800950c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800951c:	b29b      	uxth	r3, r3
 800951e:	3b01      	subs	r3, #1
 8009520:	b29a      	uxth	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009526:	e057      	b.n	80095d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b02      	cmp	r3, #2
 8009534:	d11c      	bne.n	8009570 <HAL_SPI_TransmitReceive+0x26c>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800953a:	b29b      	uxth	r3, r3
 800953c:	2b00      	cmp	r3, #0
 800953e:	d017      	beq.n	8009570 <HAL_SPI_TransmitReceive+0x26c>
 8009540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009542:	2b01      	cmp	r3, #1
 8009544:	d114      	bne.n	8009570 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	330c      	adds	r3, #12
 8009550:	7812      	ldrb	r2, [r2, #0]
 8009552:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009558:	1c5a      	adds	r2, r3, #1
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009562:	b29b      	uxth	r3, r3
 8009564:	3b01      	subs	r3, #1
 8009566:	b29a      	uxth	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b01      	cmp	r3, #1
 800957c:	d119      	bne.n	80095b2 <HAL_SPI_TransmitReceive+0x2ae>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009582:	b29b      	uxth	r3, r3
 8009584:	2b00      	cmp	r3, #0
 8009586:	d014      	beq.n	80095b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009592:	b2d2      	uxtb	r2, r2
 8009594:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095ae:	2301      	movs	r3, #1
 80095b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80095b2:	f7fe fe27 	bl	8008204 <HAL_GetTick>
 80095b6:	4602      	mov	r2, r0
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095be:	429a      	cmp	r2, r3
 80095c0:	d803      	bhi.n	80095ca <HAL_SPI_TransmitReceive+0x2c6>
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c8:	d102      	bne.n	80095d0 <HAL_SPI_TransmitReceive+0x2cc>
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d103      	bne.n	80095d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80095d6:	e029      	b.n	800962c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095dc:	b29b      	uxth	r3, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1a2      	bne.n	8009528 <HAL_SPI_TransmitReceive+0x224>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d19d      	bne.n	8009528 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 f8bf 	bl	8009774 <SPI_EndRxTxTransaction>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d006      	beq.n	800960a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2220      	movs	r2, #32
 8009606:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009608:	e010      	b.n	800962c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10b      	bne.n	800962a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009612:	2300      	movs	r3, #0
 8009614:	617b      	str	r3, [r7, #20]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	617b      	str	r3, [r7, #20]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	617b      	str	r3, [r7, #20]
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	e000      	b.n	800962c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800962a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800963c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009640:	4618      	mov	r0, r3
 8009642:	3730      	adds	r7, #48	; 0x30
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009656:	b2db      	uxtb	r3, r3
}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	bc80      	pop	{r7}
 8009660:	4770      	bx	lr
	...

08009664 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b088      	sub	sp, #32
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	603b      	str	r3, [r7, #0]
 8009670:	4613      	mov	r3, r2
 8009672:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009674:	f7fe fdc6 	bl	8008204 <HAL_GetTick>
 8009678:	4602      	mov	r2, r0
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	1a9b      	subs	r3, r3, r2
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	4413      	add	r3, r2
 8009682:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009684:	f7fe fdbe 	bl	8008204 <HAL_GetTick>
 8009688:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800968a:	4b39      	ldr	r3, [pc, #228]	; (8009770 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	015b      	lsls	r3, r3, #5
 8009690:	0d1b      	lsrs	r3, r3, #20
 8009692:	69fa      	ldr	r2, [r7, #28]
 8009694:	fb02 f303 	mul.w	r3, r2, r3
 8009698:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800969a:	e054      	b.n	8009746 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a2:	d050      	beq.n	8009746 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096a4:	f7fe fdae 	bl	8008204 <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	69fa      	ldr	r2, [r7, #28]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d902      	bls.n	80096ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d13d      	bne.n	8009736 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80096c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096d2:	d111      	bne.n	80096f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096dc:	d004      	beq.n	80096e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096e6:	d107      	bne.n	80096f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009700:	d10f      	bne.n	8009722 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009720:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e017      	b.n	8009766 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800973c:	2300      	movs	r3, #0
 800973e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	3b01      	subs	r3, #1
 8009744:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	689a      	ldr	r2, [r3, #8]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	4013      	ands	r3, r2
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	429a      	cmp	r2, r3
 8009754:	bf0c      	ite	eq
 8009756:	2301      	moveq	r3, #1
 8009758:	2300      	movne	r3, #0
 800975a:	b2db      	uxtb	r3, r3
 800975c:	461a      	mov	r2, r3
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	429a      	cmp	r2, r3
 8009762:	d19b      	bne.n	800969c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3720      	adds	r7, #32
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20000004 	.word	0x20000004

08009774 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af02      	add	r7, sp, #8
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2200      	movs	r2, #0
 8009788:	2180      	movs	r1, #128	; 0x80
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f7ff ff6a 	bl	8009664 <SPI_WaitFlagStateUntilTimeout>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d007      	beq.n	80097a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800979a:	f043 0220 	orr.w	r2, r3, #32
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e000      	b.n	80097a8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e03f      	b.n	8009842 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d106      	bne.n	80097dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7fe fbcc 	bl	8007f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2224      	movs	r2, #36	; 0x24
 80097e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68da      	ldr	r2, [r3, #12]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f9a7 	bl	8009b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	691a      	ldr	r2, [r3, #16]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	695a      	ldr	r2, [r3, #20]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68da      	ldr	r2, [r3, #12]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2220      	movs	r2, #32
 8009834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2220      	movs	r2, #32
 800983c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b08a      	sub	sp, #40	; 0x28
 800984e:	af02      	add	r7, sp, #8
 8009850:	60f8      	str	r0, [r7, #12]
 8009852:	60b9      	str	r1, [r7, #8]
 8009854:	603b      	str	r3, [r7, #0]
 8009856:	4613      	mov	r3, r2
 8009858:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800985a:	2300      	movs	r3, #0
 800985c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b20      	cmp	r3, #32
 8009868:	d17c      	bne.n	8009964 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <HAL_UART_Transmit+0x2c>
 8009870:	88fb      	ldrh	r3, [r7, #6]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e075      	b.n	8009966 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009880:	2b01      	cmp	r3, #1
 8009882:	d101      	bne.n	8009888 <HAL_UART_Transmit+0x3e>
 8009884:	2302      	movs	r3, #2
 8009886:	e06e      	b.n	8009966 <HAL_UART_Transmit+0x11c>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2221      	movs	r2, #33	; 0x21
 800989a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800989e:	f7fe fcb1 	bl	8008204 <HAL_GetTick>
 80098a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	88fa      	ldrh	r2, [r7, #6]
 80098a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	88fa      	ldrh	r2, [r7, #6]
 80098ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b8:	d108      	bne.n	80098cc <HAL_UART_Transmit+0x82>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d104      	bne.n	80098cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80098c2:	2300      	movs	r3, #0
 80098c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	61bb      	str	r3, [r7, #24]
 80098ca:	e003      	b.n	80098d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098d0:	2300      	movs	r3, #0
 80098d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80098dc:	e02a      	b.n	8009934 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	2200      	movs	r2, #0
 80098e6:	2180      	movs	r1, #128	; 0x80
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 f8e2 	bl	8009ab2 <UART_WaitOnFlagUntilTimeout>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80098f4:	2303      	movs	r3, #3
 80098f6:	e036      	b.n	8009966 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10b      	bne.n	8009916 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800990c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	3302      	adds	r3, #2
 8009912:	61bb      	str	r3, [r7, #24]
 8009914:	e007      	b.n	8009926 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	781a      	ldrb	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	3301      	adds	r3, #1
 8009924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800992a:	b29b      	uxth	r3, r3
 800992c:	3b01      	subs	r3, #1
 800992e:	b29a      	uxth	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009938:	b29b      	uxth	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1cf      	bne.n	80098de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	2200      	movs	r2, #0
 8009946:	2140      	movs	r1, #64	; 0x40
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 f8b2 	bl	8009ab2 <UART_WaitOnFlagUntilTimeout>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e006      	b.n	8009966 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2220      	movs	r2, #32
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	e000      	b.n	8009966 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009964:	2302      	movs	r3, #2
  }
}
 8009966:	4618      	mov	r0, r3
 8009968:	3720      	adds	r7, #32
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b08a      	sub	sp, #40	; 0x28
 8009972:	af02      	add	r7, sp, #8
 8009974:	60f8      	str	r0, [r7, #12]
 8009976:	60b9      	str	r1, [r7, #8]
 8009978:	603b      	str	r3, [r7, #0]
 800997a:	4613      	mov	r3, r2
 800997c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b20      	cmp	r3, #32
 800998c:	f040 808c 	bne.w	8009aa8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d002      	beq.n	800999c <HAL_UART_Receive+0x2e>
 8009996:	88fb      	ldrh	r3, [r7, #6]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e084      	b.n	8009aaa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d101      	bne.n	80099ae <HAL_UART_Receive+0x40>
 80099aa:	2302      	movs	r3, #2
 80099ac:	e07d      	b.n	8009aaa <HAL_UART_Receive+0x13c>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2222      	movs	r2, #34	; 0x22
 80099c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099ca:	f7fe fc1b 	bl	8008204 <HAL_GetTick>
 80099ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	88fa      	ldrh	r2, [r7, #6]
 80099d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	88fa      	ldrh	r2, [r7, #6]
 80099da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099e4:	d108      	bne.n	80099f8 <HAL_UART_Receive+0x8a>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d104      	bne.n	80099f8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80099ee:	2300      	movs	r3, #0
 80099f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	e003      	b.n	8009a00 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099fc:	2300      	movs	r3, #0
 80099fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009a08:	e043      	b.n	8009a92 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2200      	movs	r2, #0
 8009a12:	2120      	movs	r1, #32
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 f84c 	bl	8009ab2 <UART_WaitOnFlagUntilTimeout>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e042      	b.n	8009aaa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10c      	bne.n	8009a44 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	3302      	adds	r3, #2
 8009a40:	61bb      	str	r3, [r7, #24]
 8009a42:	e01f      	b.n	8009a84 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a4c:	d007      	beq.n	8009a5e <HAL_UART_Receive+0xf0>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10a      	bne.n	8009a6c <HAL_UART_Receive+0xfe>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d106      	bne.n	8009a6c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	701a      	strb	r2, [r3, #0]
 8009a6a:	e008      	b.n	8009a7e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	3301      	adds	r3, #1
 8009a82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1b6      	bne.n	8009a0a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2220      	movs	r2, #32
 8009aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	e000      	b.n	8009aaa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009aa8:	2302      	movs	r3, #2
  }
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3720      	adds	r7, #32
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	60f8      	str	r0, [r7, #12]
 8009aba:	60b9      	str	r1, [r7, #8]
 8009abc:	603b      	str	r3, [r7, #0]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ac2:	e02c      	b.n	8009b1e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aca:	d028      	beq.n	8009b1e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d007      	beq.n	8009ae2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ad2:	f7fe fb97 	bl	8008204 <HAL_GetTick>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	69ba      	ldr	r2, [r7, #24]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d21d      	bcs.n	8009b1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68da      	ldr	r2, [r3, #12]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009af0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	695a      	ldr	r2, [r3, #20]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f022 0201 	bic.w	r2, r2, #1
 8009b00:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2220      	movs	r2, #32
 8009b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2220      	movs	r2, #32
 8009b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e00f      	b.n	8009b3e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	4013      	ands	r3, r2
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	bf0c      	ite	eq
 8009b2e:	2301      	moveq	r3, #1
 8009b30:	2300      	movne	r3, #0
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	461a      	mov	r2, r3
 8009b36:	79fb      	ldrb	r3, [r7, #7]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d0c3      	beq.n	8009ac4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
	...

08009b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	689a      	ldr	r2, [r3, #8]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	431a      	orrs	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009b82:	f023 030c 	bic.w	r3, r3, #12
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	6812      	ldr	r2, [r2, #0]
 8009b8a:	68b9      	ldr	r1, [r7, #8]
 8009b8c:	430b      	orrs	r3, r1
 8009b8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	695b      	ldr	r3, [r3, #20]
 8009b96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	699a      	ldr	r2, [r3, #24]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a2c      	ldr	r2, [pc, #176]	; (8009c5c <UART_SetConfig+0x114>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d103      	bne.n	8009bb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009bb0:	f7ff f9b6 	bl	8008f20 <HAL_RCC_GetPCLK2Freq>
 8009bb4:	60f8      	str	r0, [r7, #12]
 8009bb6:	e002      	b.n	8009bbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009bb8:	f7ff f99e 	bl	8008ef8 <HAL_RCC_GetPCLK1Freq>
 8009bbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	009a      	lsls	r2, r3, #2
 8009bc8:	441a      	add	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd4:	4a22      	ldr	r2, [pc, #136]	; (8009c60 <UART_SetConfig+0x118>)
 8009bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bda:	095b      	lsrs	r3, r3, #5
 8009bdc:	0119      	lsls	r1, r3, #4
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	4613      	mov	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4413      	add	r3, r2
 8009be6:	009a      	lsls	r2, r3, #2
 8009be8:	441a      	add	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009bf4:	4b1a      	ldr	r3, [pc, #104]	; (8009c60 <UART_SetConfig+0x118>)
 8009bf6:	fba3 0302 	umull	r0, r3, r3, r2
 8009bfa:	095b      	lsrs	r3, r3, #5
 8009bfc:	2064      	movs	r0, #100	; 0x64
 8009bfe:	fb00 f303 	mul.w	r3, r0, r3
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	011b      	lsls	r3, r3, #4
 8009c06:	3332      	adds	r3, #50	; 0x32
 8009c08:	4a15      	ldr	r2, [pc, #84]	; (8009c60 <UART_SetConfig+0x118>)
 8009c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c0e:	095b      	lsrs	r3, r3, #5
 8009c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c14:	4419      	add	r1, r3
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	009a      	lsls	r2, r3, #2
 8009c20:	441a      	add	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c2c:	4b0c      	ldr	r3, [pc, #48]	; (8009c60 <UART_SetConfig+0x118>)
 8009c2e:	fba3 0302 	umull	r0, r3, r3, r2
 8009c32:	095b      	lsrs	r3, r3, #5
 8009c34:	2064      	movs	r0, #100	; 0x64
 8009c36:	fb00 f303 	mul.w	r3, r0, r3
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	011b      	lsls	r3, r3, #4
 8009c3e:	3332      	adds	r3, #50	; 0x32
 8009c40:	4a07      	ldr	r2, [pc, #28]	; (8009c60 <UART_SetConfig+0x118>)
 8009c42:	fba2 2303 	umull	r2, r3, r2, r3
 8009c46:	095b      	lsrs	r3, r3, #5
 8009c48:	f003 020f 	and.w	r2, r3, #15
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	440a      	add	r2, r1
 8009c52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009c54:	bf00      	nop
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	40013800 	.word	0x40013800
 8009c60:	51eb851f 	.word	0x51eb851f

08009c64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009c68:	4904      	ldr	r1, [pc, #16]	; (8009c7c <MX_FATFS_Init+0x18>)
 8009c6a:	4805      	ldr	r0, [pc, #20]	; (8009c80 <MX_FATFS_Init+0x1c>)
 8009c6c:	f003 fd48 	bl	800d700 <FATFS_LinkDriver>
 8009c70:	4603      	mov	r3, r0
 8009c72:	461a      	mov	r2, r3
 8009c74:	4b03      	ldr	r3, [pc, #12]	; (8009c84 <MX_FATFS_Init+0x20>)
 8009c76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009c78:	bf00      	nop
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	200023e0 	.word	0x200023e0
 8009c80:	20000010 	.word	0x20000010
 8009c84:	200023e4 	.word	0x200023e4

08009c88 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009c8c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bc80      	pop	{r7}
 8009c94:	4770      	bx	lr

08009c96 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b082      	sub	sp, #8
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8009ca0:	79fb      	ldrb	r3, [r7, #7]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fd fc76 	bl	8007594 <SD_disk_initialize>
 8009ca8:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	4603      	mov	r3, r0
 8009cba:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8009cbc:	79fb      	ldrb	r3, [r7, #7]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fd fd52 	bl	8007768 <SD_disk_status>
 8009cc4:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	603b      	str	r3, [r7, #0]
 8009cda:	4603      	mov	r3, r0
 8009cdc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8009cde:	7bf8      	ldrb	r0, [r7, #15]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	68b9      	ldr	r1, [r7, #8]
 8009ce6:	f7fd fd53 	bl	8007790 <SD_disk_read>
 8009cea:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60b9      	str	r1, [r7, #8]
 8009cfc:	607a      	str	r2, [r7, #4]
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	4603      	mov	r3, r0
 8009d02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8009d04:	7bf8      	ldrb	r0, [r7, #15]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	68b9      	ldr	r1, [r7, #8]
 8009d0c:	f7fd fdaa 	bl	8007864 <SD_disk_write>
 8009d10:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	4603      	mov	r3, r0
 8009d22:	603a      	str	r2, [r7, #0]
 8009d24:	71fb      	strb	r3, [r7, #7]
 8009d26:	460b      	mov	r3, r1
 8009d28:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8009d2a:	79b9      	ldrb	r1, [r7, #6]
 8009d2c:	79fb      	ldrb	r3, [r7, #7]
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fd fe1b 	bl	800796c <SD_disk_ioctl>
 8009d36:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	4603      	mov	r3, r0
 8009d48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009d4a:	79fb      	ldrb	r3, [r7, #7]
 8009d4c:	4a08      	ldr	r2, [pc, #32]	; (8009d70 <disk_status+0x30>)
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	4413      	add	r3, r2
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	79fa      	ldrb	r2, [r7, #7]
 8009d58:	4905      	ldr	r1, [pc, #20]	; (8009d70 <disk_status+0x30>)
 8009d5a:	440a      	add	r2, r1
 8009d5c:	7a12      	ldrb	r2, [r2, #8]
 8009d5e:	4610      	mov	r0, r2
 8009d60:	4798      	blx	r3
 8009d62:	4603      	mov	r3, r0
 8009d64:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20000264 	.word	0x20000264

08009d74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	4a0d      	ldr	r2, [pc, #52]	; (8009dbc <disk_initialize+0x48>)
 8009d86:	5cd3      	ldrb	r3, [r2, r3]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d111      	bne.n	8009db0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	4a0b      	ldr	r2, [pc, #44]	; (8009dbc <disk_initialize+0x48>)
 8009d90:	2101      	movs	r1, #1
 8009d92:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009d94:	79fb      	ldrb	r3, [r7, #7]
 8009d96:	4a09      	ldr	r2, [pc, #36]	; (8009dbc <disk_initialize+0x48>)
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	79fa      	ldrb	r2, [r7, #7]
 8009da2:	4906      	ldr	r1, [pc, #24]	; (8009dbc <disk_initialize+0x48>)
 8009da4:	440a      	add	r2, r1
 8009da6:	7a12      	ldrb	r2, [r2, #8]
 8009da8:	4610      	mov	r0, r2
 8009daa:	4798      	blx	r3
 8009dac:	4603      	mov	r3, r0
 8009dae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	20000264 	.word	0x20000264

08009dc0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009dc0:	b590      	push	{r4, r7, lr}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60b9      	str	r1, [r7, #8]
 8009dc8:	607a      	str	r2, [r7, #4]
 8009dca:	603b      	str	r3, [r7, #0]
 8009dcc:	4603      	mov	r3, r0
 8009dce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	4a0a      	ldr	r2, [pc, #40]	; (8009dfc <disk_read+0x3c>)
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	689c      	ldr	r4, [r3, #8]
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
 8009dde:	4a07      	ldr	r2, [pc, #28]	; (8009dfc <disk_read+0x3c>)
 8009de0:	4413      	add	r3, r2
 8009de2:	7a18      	ldrb	r0, [r3, #8]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	68b9      	ldr	r1, [r7, #8]
 8009dea:	47a0      	blx	r4
 8009dec:	4603      	mov	r3, r0
 8009dee:	75fb      	strb	r3, [r7, #23]
  return res;
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	371c      	adds	r7, #28
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd90      	pop	{r4, r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20000264 	.word	0x20000264

08009e00 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009e00:	b590      	push	{r4, r7, lr}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60b9      	str	r1, [r7, #8]
 8009e08:	607a      	str	r2, [r7, #4]
 8009e0a:	603b      	str	r3, [r7, #0]
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	4a0a      	ldr	r2, [pc, #40]	; (8009e3c <disk_write+0x3c>)
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	68dc      	ldr	r4, [r3, #12]
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
 8009e1e:	4a07      	ldr	r2, [pc, #28]	; (8009e3c <disk_write+0x3c>)
 8009e20:	4413      	add	r3, r2
 8009e22:	7a18      	ldrb	r0, [r3, #8]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	68b9      	ldr	r1, [r7, #8]
 8009e2a:	47a0      	blx	r4
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	371c      	adds	r7, #28
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd90      	pop	{r4, r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20000264 	.word	0x20000264

08009e40 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	603a      	str	r2, [r7, #0]
 8009e4a:	71fb      	strb	r3, [r7, #7]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	4a09      	ldr	r2, [pc, #36]	; (8009e78 <disk_ioctl+0x38>)
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	79fa      	ldrb	r2, [r7, #7]
 8009e5e:	4906      	ldr	r1, [pc, #24]	; (8009e78 <disk_ioctl+0x38>)
 8009e60:	440a      	add	r2, r1
 8009e62:	7a10      	ldrb	r0, [r2, #8]
 8009e64:	79b9      	ldrb	r1, [r7, #6]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	4798      	blx	r3
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73fb      	strb	r3, [r7, #15]
  return res;
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20000264 	.word	0x20000264

08009e7c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009e7c:	b480      	push	{r7}
 8009e7e:	b087      	sub	sp, #28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009e90:	e007      	b.n	8009ea2 <mem_cpy+0x26>
		*d++ = *s++;
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	1c53      	adds	r3, r2, #1
 8009e96:	613b      	str	r3, [r7, #16]
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	1c59      	adds	r1, r3, #1
 8009e9c:	6179      	str	r1, [r7, #20]
 8009e9e:	7812      	ldrb	r2, [r2, #0]
 8009ea0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	1e5a      	subs	r2, r3, #1
 8009ea6:	607a      	str	r2, [r7, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1f2      	bne.n	8009e92 <mem_cpy+0x16>
}
 8009eac:	bf00      	nop
 8009eae:	bf00      	nop
 8009eb0:	371c      	adds	r7, #28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bc80      	pop	{r7}
 8009eb6:	4770      	bx	lr

08009eb8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8009ec8:	e005      	b.n	8009ed6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	617a      	str	r2, [r7, #20]
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	b2d2      	uxtb	r2, r2
 8009ed4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	1e5a      	subs	r2, r3, #1
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1f4      	bne.n	8009eca <mem_set+0x12>
}
 8009ee0:	bf00      	nop
 8009ee2:	bf00      	nop
 8009ee4:	371c      	adds	r7, #28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bc80      	pop	{r7}
 8009eea:	4770      	bx	lr

08009eec <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8009eec:	b480      	push	{r7}
 8009eee:	b089      	sub	sp, #36	; 0x24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	61fb      	str	r3, [r7, #28]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009f04:	bf00      	nop
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	1e5a      	subs	r2, r3, #1
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00d      	beq.n	8009f2c <mem_cmp+0x40>
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	61fa      	str	r2, [r7, #28]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	4619      	mov	r1, r3
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	1c5a      	adds	r2, r3, #1
 8009f1e:	61ba      	str	r2, [r7, #24]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	1acb      	subs	r3, r1, r3
 8009f24:	617b      	str	r3, [r7, #20]
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d0ec      	beq.n	8009f06 <mem_cmp+0x1a>
	return r;
 8009f2c:	697b      	ldr	r3, [r7, #20]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3724      	adds	r7, #36	; 0x24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bc80      	pop	{r7}
 8009f36:	4770      	bx	lr

08009f38 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009f42:	e002      	b.n	8009f4a <chk_chr+0x12>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	3301      	adds	r3, #1
 8009f48:	607b      	str	r3, [r7, #4]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d005      	beq.n	8009f5e <chk_chr+0x26>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d1f2      	bne.n	8009f44 <chk_chr+0xc>
	return *str;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	781b      	ldrb	r3, [r3, #0]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bc80      	pop	{r7}
 8009f6a:	4770      	bx	lr

08009f6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009f76:	2300      	movs	r3, #0
 8009f78:	60bb      	str	r3, [r7, #8]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	60fb      	str	r3, [r7, #12]
 8009f7e:	e03d      	b.n	8009ffc <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8009f80:	4932      	ldr	r1, [pc, #200]	; (800a04c <chk_lock+0xe0>)
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	4613      	mov	r3, r2
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	4413      	add	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	440b      	add	r3, r1
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d02e      	beq.n	8009ff2 <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009f94:	492d      	ldr	r1, [pc, #180]	; (800a04c <chk_lock+0xe0>)
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	005b      	lsls	r3, r3, #1
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	440b      	add	r3, r1
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d122      	bne.n	8009ff6 <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8009fb0:	4926      	ldr	r1, [pc, #152]	; (800a04c <chk_lock+0xe0>)
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	005b      	lsls	r3, r3, #1
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fc8:	3308      	adds	r3, #8
 8009fca:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d112      	bne.n	8009ff6 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8009fd0:	491e      	ldr	r1, [pc, #120]	; (800a04c <chk_lock+0xe0>)
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	005b      	lsls	r3, r3, #1
 8009fd8:	4413      	add	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	440b      	add	r3, r1
 8009fde:	3308      	adds	r3, #8
 8009fe0:	881a      	ldrh	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fe8:	3306      	adds	r3, #6
 8009fea:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d102      	bne.n	8009ff6 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8009ff0:	e007      	b.n	800a002 <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d9be      	bls.n	8009f80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b02      	cmp	r3, #2
 800a006:	d109      	bne.n	800a01c <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d102      	bne.n	800a014 <chk_lock+0xa8>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b02      	cmp	r3, #2
 800a012:	d101      	bne.n	800a018 <chk_lock+0xac>
 800a014:	2300      	movs	r3, #0
 800a016:	e013      	b.n	800a040 <chk_lock+0xd4>
 800a018:	2312      	movs	r3, #18
 800a01a:	e011      	b.n	800a040 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10b      	bne.n	800a03a <chk_lock+0xce>
 800a022:	490a      	ldr	r1, [pc, #40]	; (800a04c <chk_lock+0xe0>)
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	4613      	mov	r3, r2
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	4413      	add	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	440b      	add	r3, r1
 800a030:	330a      	adds	r3, #10
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a038:	d101      	bne.n	800a03e <chk_lock+0xd2>
 800a03a:	2310      	movs	r3, #16
 800a03c:	e000      	b.n	800a040 <chk_lock+0xd4>
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	bc80      	pop	{r7}
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	2000004c 	.word	0x2000004c

0800a050 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a056:	2300      	movs	r3, #0
 800a058:	607b      	str	r3, [r7, #4]
 800a05a:	e002      	b.n	800a062 <enq_lock+0x12>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	3301      	adds	r3, #1
 800a060:	607b      	str	r3, [r7, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d809      	bhi.n	800a07c <enq_lock+0x2c>
 800a068:	490a      	ldr	r1, [pc, #40]	; (800a094 <enq_lock+0x44>)
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	4613      	mov	r3, r2
 800a06e:	005b      	lsls	r3, r3, #1
 800a070:	4413      	add	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	440b      	add	r3, r1
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1ef      	bne.n	800a05c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b02      	cmp	r3, #2
 800a080:	bf14      	ite	ne
 800a082:	2301      	movne	r3, #1
 800a084:	2300      	moveq	r3, #0
 800a086:	b2db      	uxtb	r3, r3
}
 800a088:	4618      	mov	r0, r3
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bc80      	pop	{r7}
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	2000004c 	.word	0x2000004c

0800a098 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]
 800a0a6:	e030      	b.n	800a10a <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 800a0a8:	495a      	ldr	r1, [pc, #360]	; (800a214 <inc_lock+0x17c>)
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	005b      	lsls	r3, r3, #1
 800a0b0:	4413      	add	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	440b      	add	r3, r1
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d11f      	bne.n	800a104 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 800a0c4:	4953      	ldr	r1, [pc, #332]	; (800a214 <inc_lock+0x17c>)
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	005b      	lsls	r3, r3, #1
 800a0cc:	4413      	add	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	440b      	add	r3, r1
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0dc:	3308      	adds	r3, #8
 800a0de:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d10f      	bne.n	800a104 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800a0e4:	494b      	ldr	r1, [pc, #300]	; (800a214 <inc_lock+0x17c>)
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	005b      	lsls	r3, r3, #1
 800a0ec:	4413      	add	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	440b      	add	r3, r1
 800a0f2:	3308      	adds	r3, #8
 800a0f4:	881a      	ldrh	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0fc:	3306      	adds	r3, #6
 800a0fe:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 800a100:	429a      	cmp	r2, r3
 800a102:	d006      	beq.n	800a112 <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3301      	adds	r3, #1
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d9cb      	bls.n	800a0a8 <inc_lock+0x10>
 800a110:	e000      	b.n	800a114 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 800a112:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2b02      	cmp	r3, #2
 800a118:	d14a      	bne.n	800a1b0 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60fb      	str	r3, [r7, #12]
 800a11e:	e002      	b.n	800a126 <inc_lock+0x8e>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	3301      	adds	r3, #1
 800a124:	60fb      	str	r3, [r7, #12]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d809      	bhi.n	800a140 <inc_lock+0xa8>
 800a12c:	4939      	ldr	r1, [pc, #228]	; (800a214 <inc_lock+0x17c>)
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	4613      	mov	r3, r2
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	4413      	add	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	440b      	add	r3, r1
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1ef      	bne.n	800a120 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2b02      	cmp	r3, #2
 800a144:	d101      	bne.n	800a14a <inc_lock+0xb2>
 800a146:	2300      	movs	r3, #0
 800a148:	e05f      	b.n	800a20a <inc_lock+0x172>
		Files[i].fs = dp->fs;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a150:	6819      	ldr	r1, [r3, #0]
 800a152:	4830      	ldr	r0, [pc, #192]	; (800a214 <inc_lock+0x17c>)
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	4613      	mov	r3, r2
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	4413      	add	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4403      	add	r3, r0
 800a160:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a168:	3308      	adds	r3, #8
 800a16a:	6819      	ldr	r1, [r3, #0]
 800a16c:	4829      	ldr	r0, [pc, #164]	; (800a214 <inc_lock+0x17c>)
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	4613      	mov	r3, r2
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4403      	add	r3, r0
 800a17a:	3304      	adds	r3, #4
 800a17c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a184:	3306      	adds	r3, #6
 800a186:	8818      	ldrh	r0, [r3, #0]
 800a188:	4922      	ldr	r1, [pc, #136]	; (800a214 <inc_lock+0x17c>)
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4613      	mov	r3, r2
 800a18e:	005b      	lsls	r3, r3, #1
 800a190:	4413      	add	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	440b      	add	r3, r1
 800a196:	3308      	adds	r3, #8
 800a198:	4602      	mov	r2, r0
 800a19a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800a19c:	491d      	ldr	r1, [pc, #116]	; (800a214 <inc_lock+0x17c>)
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	4413      	add	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	440b      	add	r3, r1
 800a1aa:	330a      	adds	r3, #10
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00c      	beq.n	800a1d0 <inc_lock+0x138>
 800a1b6:	4917      	ldr	r1, [pc, #92]	; (800a214 <inc_lock+0x17c>)
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	440b      	add	r3, r1
 800a1c4:	330a      	adds	r3, #10
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <inc_lock+0x138>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	e01c      	b.n	800a20a <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10b      	bne.n	800a1ee <inc_lock+0x156>
 800a1d6:	490f      	ldr	r1, [pc, #60]	; (800a214 <inc_lock+0x17c>)
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	005b      	lsls	r3, r3, #1
 800a1de:	4413      	add	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	440b      	add	r3, r1
 800a1e4:	330a      	adds	r3, #10
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	b299      	uxth	r1, r3
 800a1ec:	e001      	b.n	800a1f2 <inc_lock+0x15a>
 800a1ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a1f2:	4808      	ldr	r0, [pc, #32]	; (800a214 <inc_lock+0x17c>)
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4403      	add	r3, r0
 800a200:	330a      	adds	r3, #10
 800a202:	460a      	mov	r2, r1
 800a204:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3301      	adds	r3, #1
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	bc80      	pop	{r7}
 800a212:	4770      	bx	lr
 800a214:	2000004c 	.word	0x2000004c

0800a218 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	3b01      	subs	r3, #1
 800a224:	607b      	str	r3, [r7, #4]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d82e      	bhi.n	800a28a <dec_lock+0x72>
		n = Files[i].ctr;
 800a22c:	491b      	ldr	r1, [pc, #108]	; (800a29c <dec_lock+0x84>)
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	4613      	mov	r3, r2
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	4413      	add	r3, r2
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	440b      	add	r3, r1
 800a23a:	330a      	adds	r3, #10
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a240:	89fb      	ldrh	r3, [r7, #14]
 800a242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a246:	d101      	bne.n	800a24c <dec_lock+0x34>
 800a248:	2300      	movs	r3, #0
 800a24a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800a24c:	89fb      	ldrh	r3, [r7, #14]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <dec_lock+0x40>
 800a252:	89fb      	ldrh	r3, [r7, #14]
 800a254:	3b01      	subs	r3, #1
 800a256:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a258:	4910      	ldr	r1, [pc, #64]	; (800a29c <dec_lock+0x84>)
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	4613      	mov	r3, r2
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	4413      	add	r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	440b      	add	r3, r1
 800a266:	330a      	adds	r3, #10
 800a268:	89fa      	ldrh	r2, [r7, #14]
 800a26a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a26c:	89fb      	ldrh	r3, [r7, #14]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d108      	bne.n	800a284 <dec_lock+0x6c>
 800a272:	490a      	ldr	r1, [pc, #40]	; (800a29c <dec_lock+0x84>)
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	4613      	mov	r3, r2
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	4413      	add	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	440b      	add	r3, r1
 800a280:	2200      	movs	r2, #0
 800a282:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	737b      	strb	r3, [r7, #13]
 800a288:	e001      	b.n	800a28e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a28a:	2302      	movs	r3, #2
 800a28c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a28e:	7b7b      	ldrb	r3, [r7, #13]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	bc80      	pop	{r7}
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	2000004c 	.word	0x2000004c

0800a2a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	60fb      	str	r3, [r7, #12]
 800a2ac:	e016      	b.n	800a2dc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a2ae:	4910      	ldr	r1, [pc, #64]	; (800a2f0 <clear_lock+0x50>)
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	4413      	add	r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	440b      	add	r3, r1
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d108      	bne.n	800a2d6 <clear_lock+0x36>
 800a2c4:	490a      	ldr	r1, [pc, #40]	; (800a2f0 <clear_lock+0x50>)
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	005b      	lsls	r3, r3, #1
 800a2cc:	4413      	add	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	440b      	add	r3, r1
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d9e5      	bls.n	800a2ae <clear_lock+0xe>
	}
}
 800a2e2:	bf00      	nop
 800a2e4:	bf00      	nop
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bc80      	pop	{r7}
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	2000004c 	.word	0x2000004c

0800a2f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a306:	3304      	adds	r3, #4
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d047      	beq.n	800a39e <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a314:	330c      	adds	r3, #12
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a320:	3301      	adds	r3, #1
 800a322:	7818      	ldrb	r0, [r3, #0]
 800a324:	6879      	ldr	r1, [r7, #4]
 800a326:	2301      	movs	r3, #1
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	f7ff fd69 	bl	8009e00 <disk_write>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <sync_window+0x46>
			res = FR_DISK_ERR;
 800a334:	2301      	movs	r3, #1
 800a336:	73fb      	strb	r3, [r7, #15]
 800a338:	e031      	b.n	800a39e <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a340:	3304      	adds	r3, #4
 800a342:	2200      	movs	r2, #0
 800a344:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	1ad2      	subs	r2, r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a358:	3318      	adds	r3, #24
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d21e      	bcs.n	800a39e <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a366:	3303      	adds	r3, #3
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	613b      	str	r3, [r7, #16]
 800a36c:	e014      	b.n	800a398 <sync_window+0xa4>
					wsect += fs->fsize;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a374:	3318      	adds	r3, #24
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	4413      	add	r3, r2
 800a37c:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a384:	3301      	adds	r3, #1
 800a386:	7818      	ldrb	r0, [r3, #0]
 800a388:	6879      	ldr	r1, [r7, #4]
 800a38a:	2301      	movs	r3, #1
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	f7ff fd37 	bl	8009e00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	3b01      	subs	r3, #1
 800a396:	613b      	str	r3, [r7, #16]
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d8e7      	bhi.n	800a36e <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a3bc:	330c      	adds	r3, #12
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d01f      	beq.n	800a406 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7ff ff94 	bl	800a2f4 <sync_window>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d117      	bne.n	800a406 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3dc:	3301      	adds	r3, #1
 800a3de:	7818      	ldrb	r0, [r3, #0]
 800a3e0:	6879      	ldr	r1, [r7, #4]
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	f7ff fceb 	bl	8009dc0 <disk_read>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d004      	beq.n	800a3fa <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a400:	330c      	adds	r3, #12
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800a406:	7bfb      	ldrb	r3, [r7, #15]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff ff6b 	bl	800a2f4 <sync_window>
 800a41e:	4603      	mov	r3, r0
 800a420:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a422:	7bfb      	ldrb	r3, [r7, #15]
 800a424:	2b00      	cmp	r3, #0
 800a426:	f040 80bd 	bne.w	800a5a4 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	2b03      	cmp	r3, #3
 800a434:	f040 80a7 	bne.w	800a586 <sync_fs+0x176>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a43e:	3305      	adds	r3, #5
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	2b01      	cmp	r3, #1
 800a444:	f040 809f 	bne.w	800a586 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a450:	330a      	adds	r3, #10
 800a452:	881b      	ldrh	r3, [r3, #0]
 800a454:	461a      	mov	r2, r3
 800a456:	2100      	movs	r1, #0
 800a458:	f7ff fd2e 	bl	8009eb8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2255      	movs	r2, #85	; 0x55
 800a460:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	22aa      	movs	r2, #170	; 0xaa
 800a468:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2252      	movs	r2, #82	; 0x52
 800a470:	701a      	strb	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2252      	movs	r2, #82	; 0x52
 800a476:	705a      	strb	r2, [r3, #1]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2261      	movs	r2, #97	; 0x61
 800a47c:	709a      	strb	r2, [r3, #2]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2241      	movs	r2, #65	; 0x41
 800a482:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2272      	movs	r2, #114	; 0x72
 800a488:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2272      	movs	r2, #114	; 0x72
 800a490:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2241      	movs	r2, #65	; 0x41
 800a498:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2261      	movs	r2, #97	; 0x61
 800a4a0:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4aa:	3310      	adds	r3, #16
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4bc:	3310      	adds	r3, #16
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	0a1b      	lsrs	r3, r3, #8
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d4:	3310      	adds	r3, #16
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	0c1b      	lsrs	r3, r3, #16
 800a4da:	b2da      	uxtb	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e8:	3310      	adds	r3, #16
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	0e1b      	lsrs	r3, r3, #24
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4fc:	330c      	adds	r3, #12
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	b2da      	uxtb	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a50e:	330c      	adds	r3, #12
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	b29b      	uxth	r3, r3
 800a514:	0a1b      	lsrs	r3, r3, #8
 800a516:	b29b      	uxth	r3, r3
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a526:	330c      	adds	r3, #12
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	0c1b      	lsrs	r3, r3, #16
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a53a:	330c      	adds	r3, #12
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	0e1b      	lsrs	r3, r3, #24
 800a540:	b2da      	uxtb	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a54e:	331c      	adds	r3, #28
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a55a:	330c      	adds	r3, #12
 800a55c:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a564:	3301      	adds	r3, #1
 800a566:	7818      	ldrb	r0, [r3, #0]
 800a568:	6879      	ldr	r1, [r7, #4]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a570:	330c      	adds	r3, #12
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	2301      	movs	r3, #1
 800a576:	f7ff fc43 	bl	8009e00 <disk_write>
			fs->fsi_flag = 0;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a580:	3305      	adds	r3, #5
 800a582:	2200      	movs	r2, #0
 800a584:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a58c:	3301      	adds	r3, #1
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	2200      	movs	r2, #0
 800a592:	2100      	movs	r1, #0
 800a594:	4618      	mov	r0, r3
 800a596:	f7ff fc53 	bl	8009e40 <disk_ioctl>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <sync_fs+0x194>
			res = FR_DISK_ERR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	3b02      	subs	r3, #2
 800a5bc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c4:	3314      	adds	r3, #20
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3b02      	subs	r3, #2
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d301      	bcc.n	800a5d4 <clust2sect+0x26>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	e00e      	b.n	800a5f2 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5da:	3302      	adds	r3, #2
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	fb03 f202 	mul.w	r2, r3, r2
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4413      	add	r3, r2
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bc80      	pop	{r7}
 800a5fa:	4770      	bx	lr

0800a5fc <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d907      	bls.n	800a61c <get_fat+0x20>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a612:	3314      	adds	r3, #20
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d302      	bcc.n	800a622 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a61c:	2301      	movs	r3, #1
 800a61e:	617b      	str	r3, [r7, #20]
 800a620:	e0ec      	b.n	800a7fc <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a622:	f04f 33ff 	mov.w	r3, #4294967295
 800a626:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	2b03      	cmp	r3, #3
 800a632:	f000 809e 	beq.w	800a772 <get_fat+0x176>
 800a636:	2b03      	cmp	r3, #3
 800a638:	f300 80d6 	bgt.w	800a7e8 <get_fat+0x1ec>
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d002      	beq.n	800a646 <get_fat+0x4a>
 800a640:	2b02      	cmp	r3, #2
 800a642:	d063      	beq.n	800a70c <get_fat+0x110>
 800a644:	e0d0      	b.n	800a7e8 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	60fb      	str	r3, [r7, #12]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	085b      	lsrs	r3, r3, #1
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	4413      	add	r3, r2
 800a652:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a662:	330a      	adds	r3, #10
 800a664:	881b      	ldrh	r3, [r3, #0]
 800a666:	4619      	mov	r1, r3
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a66e:	4413      	add	r3, r2
 800a670:	4619      	mov	r1, r3
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f7ff fe98 	bl	800a3a8 <move_window>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f040 80b7 	bne.w	800a7ee <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	60fa      	str	r2, [r7, #12]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a68c:	320a      	adds	r2, #10
 800a68e:	8812      	ldrh	r2, [r2, #0]
 800a690:	fbb3 f1f2 	udiv	r1, r3, r2
 800a694:	fb02 f201 	mul.w	r2, r2, r1
 800a698:	1a9b      	subs	r3, r3, r2
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	5cd3      	ldrb	r3, [r2, r3]
 800a69e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ae:	330a      	adds	r3, #10
 800a6b0:	881b      	ldrh	r3, [r3, #0]
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6ba:	4413      	add	r3, r2
 800a6bc:	4619      	mov	r1, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7ff fe72 	bl	800a3a8 <move_window>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f040 8093 	bne.w	800a7f2 <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d2:	330a      	adds	r3, #10
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6de:	fb02 f201 	mul.w	r2, r2, r1
 800a6e2:	1a9b      	subs	r3, r3, r2
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	5cd3      	ldrb	r3, [r2, r3]
 800a6e8:	021b      	lsls	r3, r3, #8
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <get_fat+0x106>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	091b      	lsrs	r3, r3, #4
 800a700:	e002      	b.n	800a708 <get_fat+0x10c>
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a708:	617b      	str	r3, [r7, #20]
			break;
 800a70a:	e077      	b.n	800a7fc <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a71a:	330a      	adds	r3, #10
 800a71c:	881b      	ldrh	r3, [r3, #0]
 800a71e:	085b      	lsrs	r3, r3, #1
 800a720:	b29b      	uxth	r3, r3
 800a722:	4619      	mov	r1, r3
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	fbb3 f3f1 	udiv	r3, r3, r1
 800a72a:	4413      	add	r3, r2
 800a72c:	4619      	mov	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff fe3a 	bl	800a3a8 <move_window>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d15d      	bne.n	800a7f6 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	005a      	lsls	r2, r3, #1
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a744:	330a      	adds	r3, #10
 800a746:	881b      	ldrh	r3, [r3, #0]
 800a748:	fbb2 f1f3 	udiv	r1, r2, r3
 800a74c:	fb03 f301 	mul.w	r3, r3, r1
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	4413      	add	r3, r2
 800a756:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	3301      	adds	r3, #1
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	021b      	lsls	r3, r3, #8
 800a760:	b21a      	sxth	r2, r3
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	b21b      	sxth	r3, r3
 800a768:	4313      	orrs	r3, r2
 800a76a:	b21b      	sxth	r3, r3
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	617b      	str	r3, [r7, #20]
			break;
 800a770:	e044      	b.n	800a7fc <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a780:	330a      	adds	r3, #10
 800a782:	881b      	ldrh	r3, [r3, #0]
 800a784:	089b      	lsrs	r3, r3, #2
 800a786:	b29b      	uxth	r3, r3
 800a788:	4619      	mov	r1, r3
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a790:	4413      	add	r3, r2
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7ff fe07 	bl	800a3a8 <move_window>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d12c      	bne.n	800a7fa <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	009a      	lsls	r2, r3, #2
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7aa:	330a      	adds	r3, #10
 800a7ac:	881b      	ldrh	r3, [r3, #0]
 800a7ae:	fbb2 f1f3 	udiv	r1, r2, r3
 800a7b2:	fb03 f301 	mul.w	r3, r3, r1
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	3303      	adds	r3, #3
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	061a      	lsls	r2, r3, #24
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	3302      	adds	r3, #2
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	041b      	lsls	r3, r3, #16
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	3201      	adds	r2, #1
 800a7d4:	7812      	ldrb	r2, [r2, #0]
 800a7d6:	0212      	lsls	r2, r2, #8
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	7812      	ldrb	r2, [r2, #0]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a7e4:	617b      	str	r3, [r7, #20]
			break;
 800a7e6:	e009      	b.n	800a7fc <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	617b      	str	r3, [r7, #20]
 800a7ec:	e006      	b.n	800a7fc <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7ee:	bf00      	nop
 800a7f0:	e004      	b.n	800a7fc <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7f2:	bf00      	nop
 800a7f4:	e002      	b.n	800a7fc <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a7f6:	bf00      	nop
 800a7f8:	e000      	b.n	800a7fc <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7fa:	bf00      	nop
		}
	}

	return val;
 800a7fc:	697b      	ldr	r3, [r7, #20]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3718      	adds	r7, #24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b088      	sub	sp, #32
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	60f8      	str	r0, [r7, #12]
 800a80e:	60b9      	str	r1, [r7, #8]
 800a810:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d907      	bls.n	800a828 <put_fat+0x22>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a81e:	3314      	adds	r3, #20
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	429a      	cmp	r2, r3
 800a826:	d302      	bcc.n	800a82e <put_fat+0x28>
		res = FR_INT_ERR;
 800a828:	2302      	movs	r3, #2
 800a82a:	77fb      	strb	r3, [r7, #31]
 800a82c:	e146      	b.n	800aabc <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b03      	cmp	r3, #3
 800a838:	f000 80d9 	beq.w	800a9ee <put_fat+0x1e8>
 800a83c:	2b03      	cmp	r3, #3
 800a83e:	f300 8133 	bgt.w	800aaa8 <put_fat+0x2a2>
 800a842:	2b01      	cmp	r3, #1
 800a844:	d003      	beq.n	800a84e <put_fat+0x48>
 800a846:	2b02      	cmp	r3, #2
 800a848:	f000 8095 	beq.w	800a976 <put_fat+0x170>
 800a84c:	e12c      	b.n	800aaa8 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	617b      	str	r3, [r7, #20]
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	085b      	lsrs	r3, r3, #1
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	4413      	add	r3, r2
 800a85a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a86a:	330a      	adds	r3, #10
 800a86c:	881b      	ldrh	r3, [r3, #0]
 800a86e:	4619      	mov	r1, r3
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	fbb3 f3f1 	udiv	r3, r3, r1
 800a876:	4413      	add	r3, r2
 800a878:	4619      	mov	r1, r3
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f7ff fd94 	bl	800a3a8 <move_window>
 800a880:	4603      	mov	r3, r0
 800a882:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a884:	7ffb      	ldrb	r3, [r7, #31]
 800a886:	2b00      	cmp	r3, #0
 800a888:	f040 8111 	bne.w	800aaae <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	1c5a      	adds	r2, r3, #1
 800a890:	617a      	str	r2, [r7, #20]
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a898:	320a      	adds	r2, #10
 800a89a:	8812      	ldrh	r2, [r2, #0]
 800a89c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8a0:	fb02 f201 	mul.w	r2, r2, r1
 800a8a4:	1a9b      	subs	r3, r3, r2
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00d      	beq.n	800a8d2 <put_fat+0xcc>
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	b25b      	sxtb	r3, r3
 800a8bc:	f003 030f 	and.w	r3, r3, #15
 800a8c0:	b25a      	sxtb	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	011b      	lsls	r3, r3, #4
 800a8c8:	b25b      	sxtb	r3, r3
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	b25b      	sxtb	r3, r3
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	e001      	b.n	800a8d6 <put_fat+0xd0>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	69ba      	ldr	r2, [r7, #24]
 800a8d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f4:	330a      	adds	r3, #10
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a900:	4413      	add	r3, r2
 800a902:	4619      	mov	r1, r3
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f7ff fd4f 	bl	800a3a8 <move_window>
 800a90a:	4603      	mov	r3, r0
 800a90c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a90e:	7ffb      	ldrb	r3, [r7, #31]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f040 80ce 	bne.w	800aab2 <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a91c:	330a      	adds	r3, #10
 800a91e:	881b      	ldrh	r3, [r3, #0]
 800a920:	461a      	mov	r2, r3
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	fbb3 f1f2 	udiv	r1, r3, r2
 800a928:	fb02 f201 	mul.w	r2, r2, r1
 800a92c:	1a9b      	subs	r3, r3, r2
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	4413      	add	r3, r2
 800a932:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d003      	beq.n	800a946 <put_fat+0x140>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	091b      	lsrs	r3, r3, #4
 800a942:	b2db      	uxtb	r3, r3
 800a944:	e00e      	b.n	800a964 <put_fat+0x15e>
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	b25b      	sxtb	r3, r3
 800a94c:	f023 030f 	bic.w	r3, r3, #15
 800a950:	b25a      	sxtb	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	0a1b      	lsrs	r3, r3, #8
 800a956:	b25b      	sxtb	r3, r3
 800a958:	f003 030f 	and.w	r3, r3, #15
 800a95c:	b25b      	sxtb	r3, r3
 800a95e:	4313      	orrs	r3, r2
 800a960:	b25b      	sxtb	r3, r3
 800a962:	b2db      	uxtb	r3, r3
 800a964:	69ba      	ldr	r2, [r7, #24]
 800a966:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a96e:	3304      	adds	r3, #4
 800a970:	2201      	movs	r2, #1
 800a972:	701a      	strb	r2, [r3, #0]
			break;
 800a974:	e0a2      	b.n	800aabc <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a984:	330a      	adds	r3, #10
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	085b      	lsrs	r3, r3, #1
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	4619      	mov	r1, r3
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	fbb3 f3f1 	udiv	r3, r3, r1
 800a994:	4413      	add	r3, r2
 800a996:	4619      	mov	r1, r3
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7ff fd05 	bl	800a3a8 <move_window>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9a2:	7ffb      	ldrb	r3, [r7, #31]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f040 8086 	bne.w	800aab6 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	005a      	lsls	r2, r3, #1
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9b4:	330a      	adds	r3, #10
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800a9bc:	fb03 f301 	mul.w	r3, r3, r1
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	b2da      	uxtb	r2, r3
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	701a      	strb	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	0a1b      	lsrs	r3, r3, #8
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	b2d2      	uxtb	r2, r2
 800a9de:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	701a      	strb	r2, [r3, #0]
			break;
 800a9ec:	e066      	b.n	800aabc <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9fc:	330a      	adds	r3, #10
 800a9fe:	881b      	ldrh	r3, [r3, #0]
 800aa00:	089b      	lsrs	r3, r3, #2
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	4619      	mov	r1, r3
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa0c:	4413      	add	r3, r2
 800aa0e:	4619      	mov	r1, r3
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f7ff fcc9 	bl	800a3a8 <move_window>
 800aa16:	4603      	mov	r3, r0
 800aa18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa1a:	7ffb      	ldrb	r3, [r7, #31]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d14c      	bne.n	800aaba <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	009a      	lsls	r2, r3, #2
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa2a:	330a      	adds	r3, #10
 800aa2c:	881b      	ldrh	r3, [r3, #0]
 800aa2e:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa32:	fb03 f301 	mul.w	r3, r3, r1
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	3303      	adds	r3, #3
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	061a      	lsls	r2, r3, #24
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	3302      	adds	r3, #2
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	041b      	lsls	r3, r3, #16
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	3201      	adds	r2, #1
 800aa54:	7812      	ldrb	r2, [r2, #0]
 800aa56:	0212      	lsls	r2, r2, #8
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	69ba      	ldr	r2, [r7, #24]
 800aa5c:	7812      	ldrb	r2, [r2, #0]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	b2da      	uxtb	r2, r3
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	701a      	strb	r2, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	0a1b      	lsrs	r3, r3, #8
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	b2d2      	uxtb	r2, r2
 800aa80:	701a      	strb	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	0c1a      	lsrs	r2, r3, #16
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	3302      	adds	r3, #2
 800aa8a:	b2d2      	uxtb	r2, r2
 800aa8c:	701a      	strb	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	0e1a      	lsrs	r2, r3, #24
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	3303      	adds	r3, #3
 800aa96:	b2d2      	uxtb	r2, r2
 800aa98:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	701a      	strb	r2, [r3, #0]
			break;
 800aaa6:	e009      	b.n	800aabc <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	77fb      	strb	r3, [r7, #31]
 800aaac:	e006      	b.n	800aabc <put_fat+0x2b6>
			if (res != FR_OK) break;
 800aaae:	bf00      	nop
 800aab0:	e004      	b.n	800aabc <put_fat+0x2b6>
			if (res != FR_OK) break;
 800aab2:	bf00      	nop
 800aab4:	e002      	b.n	800aabc <put_fat+0x2b6>
			if (res != FR_OK) break;
 800aab6:	bf00      	nop
 800aab8:	e000      	b.n	800aabc <put_fat+0x2b6>
			if (res != FR_OK) break;
 800aaba:	bf00      	nop
		}
	}

	return res;
 800aabc:	7ffb      	ldrb	r3, [r7, #31]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3720      	adds	r7, #32
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b084      	sub	sp, #16
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d907      	bls.n	800aae6 <remove_chain+0x20>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aadc:	3314      	adds	r3, #20
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	683a      	ldr	r2, [r7, #0]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d302      	bcc.n	800aaec <remove_chain+0x26>
		res = FR_INT_ERR;
 800aae6:	2302      	movs	r3, #2
 800aae8:	73fb      	strb	r3, [r7, #15]
 800aaea:	e04f      	b.n	800ab8c <remove_chain+0xc6>

	} else {
		res = FR_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800aaf0:	e040      	b.n	800ab74 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7ff fd81 	bl	800a5fc <get_fat>
 800aafa:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d041      	beq.n	800ab86 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d102      	bne.n	800ab0e <remove_chain+0x48>
 800ab08:	2302      	movs	r3, #2
 800ab0a:	73fb      	strb	r3, [r7, #15]
 800ab0c:	e03e      	b.n	800ab8c <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab14:	d102      	bne.n	800ab1c <remove_chain+0x56>
 800ab16:	2301      	movs	r3, #1
 800ab18:	73fb      	strb	r3, [r7, #15]
 800ab1a:	e037      	b.n	800ab8c <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	6839      	ldr	r1, [r7, #0]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7ff fe70 	bl	800a806 <put_fat>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d12c      	bne.n	800ab8a <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab36:	3310      	adds	r3, #16
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3e:	d017      	beq.n	800ab70 <remove_chain+0xaa>
				fs->free_clust++;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab46:	3310      	adds	r3, #16
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	1c5a      	adds	r2, r3, #1
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab52:	3310      	adds	r3, #16
 800ab54:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab5c:	3305      	adds	r3, #5
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	f043 0301 	orr.w	r3, r3, #1
 800ab64:	b2da      	uxtb	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab6c:	3305      	adds	r3, #5
 800ab6e:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab7a:	3314      	adds	r3, #20
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d3b6      	bcc.n	800aaf2 <remove_chain+0x2c>
 800ab84:	e002      	b.n	800ab8c <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 800ab86:	bf00      	nop
 800ab88:	e000      	b.n	800ab8c <remove_chain+0xc6>
			if (res != FR_OK) break;
 800ab8a:	bf00      	nop
		}
	}

	return res;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b086      	sub	sp, #24
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d113      	bne.n	800abce <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abac:	330c      	adds	r3, #12
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d007      	beq.n	800abc8 <create_chain+0x32>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abbe:	3314      	adds	r3, #20
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	693a      	ldr	r2, [r7, #16]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d31e      	bcc.n	800ac06 <create_chain+0x70>
 800abc8:	2301      	movs	r3, #1
 800abca:	613b      	str	r3, [r7, #16]
 800abcc:	e01b      	b.n	800ac06 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7ff fd13 	bl	800a5fc <get_fat>
 800abd6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d801      	bhi.n	800abe2 <create_chain+0x4c>
 800abde:	2301      	movs	r3, #1
 800abe0:	e086      	b.n	800acf0 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe8:	d101      	bne.n	800abee <create_chain+0x58>
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	e080      	b.n	800acf0 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf4:	3314      	adds	r3, #20
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d201      	bcs.n	800ac02 <create_chain+0x6c>
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	e076      	b.n	800acf0 <create_chain+0x15a>
		scl = clst;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac16:	3314      	adds	r3, #20
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	697a      	ldr	r2, [r7, #20]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d307      	bcc.n	800ac30 <create_chain+0x9a>
			ncl = 2;
 800ac20:	2302      	movs	r3, #2
 800ac22:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d901      	bls.n	800ac30 <create_chain+0x9a>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	e05f      	b.n	800acf0 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800ac30:	6979      	ldr	r1, [r7, #20]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f7ff fce2 	bl	800a5fc <get_fat>
 800ac38:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00e      	beq.n	800ac5e <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac46:	d002      	beq.n	800ac4e <create_chain+0xb8>
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d101      	bne.n	800ac52 <create_chain+0xbc>
			return cs;
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	e04e      	b.n	800acf0 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d1d7      	bne.n	800ac0a <create_chain+0x74>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	e048      	b.n	800acf0 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800ac5e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800ac60:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800ac64:	6979      	ldr	r1, [r7, #20]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7ff fdcd 	bl	800a806 <put_fat>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d109      	bne.n	800ac8a <create_chain+0xf4>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d006      	beq.n	800ac8a <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800ac7c:	697a      	ldr	r2, [r7, #20]
 800ac7e:	6839      	ldr	r1, [r7, #0]
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7ff fdc0 	bl	800a806 <put_fat>
 800ac86:	4603      	mov	r3, r0
 800ac88:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d126      	bne.n	800acde <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac96:	330c      	adds	r3, #12
 800ac98:	697a      	ldr	r2, [r7, #20]
 800ac9a:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aca2:	3310      	adds	r3, #16
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acaa:	d020      	beq.n	800acee <create_chain+0x158>
			fs->free_clust--;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb2:	3310      	adds	r3, #16
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	1e5a      	subs	r2, r3, #1
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acbe:	3310      	adds	r3, #16
 800acc0:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acc8:	3305      	adds	r3, #5
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	f043 0301 	orr.w	r3, r3, #1
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acd8:	3305      	adds	r3, #5
 800acda:	701a      	strb	r2, [r3, #0]
 800acdc:	e007      	b.n	800acee <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800acde:	7bfb      	ldrb	r3, [r7, #15]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d102      	bne.n	800acea <create_chain+0x154>
 800ace4:	f04f 33ff 	mov.w	r3, #4294967295
 800ace8:	e000      	b.n	800acec <create_chain+0x156>
 800acea:	2301      	movs	r3, #1
 800acec:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800acee:	697b      	ldr	r3, [r7, #20]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b087      	sub	sp, #28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ad08:	3304      	adds	r3, #4
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad1c:	330a      	adds	r3, #10
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	461a      	mov	r2, r3
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad34:	3302      	adds	r3, #2
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	1d1a      	adds	r2, r3, #4
 800ad42:	613a      	str	r2, [r7, #16]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <clmt_clust+0x5a>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	e010      	b.n	800ad74 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d307      	bcc.n	800ad6a <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	617b      	str	r3, [r7, #20]
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	3304      	adds	r3, #4
 800ad66:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad68:	e7e9      	b.n	800ad3e <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 800ad6a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	4413      	add	r3, r2
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	371c      	adds	r7, #28
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bc80      	pop	{r7}
 800ad7c:	4770      	bx	lr

0800ad7e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b086      	sub	sp, #24
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad92:	3306      	adds	r3, #6
 800ad94:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad9c:	3308      	adds	r3, #8
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d00a      	beq.n	800adbe <dir_sdi+0x40>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adb4:	3314      	adds	r3, #20
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d301      	bcc.n	800adc2 <dir_sdi+0x44>
		return FR_INT_ERR;
 800adbe:	2302      	movs	r3, #2
 800adc0:	e0b4      	b.n	800af2c <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d111      	bne.n	800adec <dir_sdi+0x6e>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	2b03      	cmp	r3, #3
 800add8:	d108      	bne.n	800adec <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ade6:	3304      	adds	r3, #4
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d117      	bne.n	800ae22 <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adfe:	3308      	adds	r3, #8
 800ae00:	881b      	ldrh	r3, [r3, #0]
 800ae02:	461a      	mov	r2, r3
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d301      	bcc.n	800ae0e <dir_sdi+0x90>
			return FR_INT_ERR;
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	e08e      	b.n	800af2c <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	613b      	str	r3, [r7, #16]
 800ae20:	e046      	b.n	800aeb0 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae2e:	330a      	adds	r3, #10
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	095b      	lsrs	r3, r3, #5
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	461a      	mov	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae44:	3302      	adds	r3, #2
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	fb03 f302 	mul.w	r3, r3, r2
 800ae4c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800ae4e:	e022      	b.n	800ae96 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6979      	ldr	r1, [r7, #20]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff fbce 	bl	800a5fc <get_fat>
 800ae60:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae68:	d101      	bne.n	800ae6e <dir_sdi+0xf0>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e05e      	b.n	800af2c <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d90a      	bls.n	800ae8a <dir_sdi+0x10c>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae80:	3314      	adds	r3, #20
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d301      	bcc.n	800ae8e <dir_sdi+0x110>
				return FR_INT_ERR;
 800ae8a:	2302      	movs	r3, #2
 800ae8c:	e04e      	b.n	800af2c <dir_sdi+0x1ae>
			idx -= ic;
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d2d8      	bcs.n	800ae50 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	6979      	ldr	r1, [r7, #20]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7ff fb80 	bl	800a5ae <clust2sect>
 800aeae:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeb6:	330c      	adds	r3, #12
 800aeb8:	697a      	ldr	r2, [r7, #20]
 800aeba:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d101      	bne.n	800aec6 <dir_sdi+0x148>
 800aec2:	2302      	movs	r3, #2
 800aec4:	e032      	b.n	800af2c <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed2:	330a      	adds	r3, #10
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	095b      	lsrs	r3, r3, #5
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	461a      	mov	r2, r3
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	fbb3 f2f2 	udiv	r2, r3, r2
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	441a      	add	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeec:	3310      	adds	r3, #16
 800aeee:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4618      	mov	r0, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af06:	330a      	adds	r3, #10
 800af08:	881b      	ldrh	r3, [r3, #0]
 800af0a:	095b      	lsrs	r3, r3, #5
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	461a      	mov	r2, r3
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	fbb3 f1f2 	udiv	r1, r3, r2
 800af16:	fb02 f201 	mul.w	r2, r2, r1
 800af1a:	1a9b      	subs	r3, r3, r2
 800af1c:	015b      	lsls	r3, r3, #5
 800af1e:	18c2      	adds	r2, r0, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af26:	3314      	adds	r3, #20
 800af28:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3718      	adds	r7, #24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800af34:	b590      	push	{r4, r7, lr}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af44:	3306      	adds	r3, #6
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	3301      	adds	r3, #1
 800af4a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	b29b      	uxth	r3, r3
 800af50:	2b00      	cmp	r3, #0
 800af52:	d006      	beq.n	800af62 <dir_next+0x2e>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af5a:	3310      	adds	r3, #16
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d101      	bne.n	800af66 <dir_next+0x32>
		return FR_NO_FILE;
 800af62:	2304      	movs	r3, #4
 800af64:	e144      	b.n	800b1f0 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af72:	330a      	adds	r3, #10
 800af74:	881b      	ldrh	r3, [r3, #0]
 800af76:	095b      	lsrs	r3, r3, #5
 800af78:	b29b      	uxth	r3, r3
 800af7a:	461a      	mov	r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800af82:	fb02 f201 	mul.w	r2, r2, r1
 800af86:	1a9b      	subs	r3, r3, r2
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f040 810c 	bne.w	800b1a6 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af94:	3310      	adds	r3, #16
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	1c5a      	adds	r2, r3, #1
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afa0:	3310      	adds	r3, #16
 800afa2:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afaa:	330c      	adds	r3, #12
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10e      	bne.n	800afd0 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afbe:	3308      	adds	r3, #8
 800afc0:	881b      	ldrh	r3, [r3, #0]
 800afc2:	461a      	mov	r2, r3
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4293      	cmp	r3, r2
 800afc8:	f0c0 80ed 	bcc.w	800b1a6 <dir_next+0x272>
				return FR_NO_FILE;
 800afcc:	2304      	movs	r3, #4
 800afce:	e10f      	b.n	800b1f0 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afdc:	330a      	adds	r3, #10
 800afde:	881b      	ldrh	r3, [r3, #0]
 800afe0:	095b      	lsrs	r3, r3, #5
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	461a      	mov	r2, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	fbb3 f2f2 	udiv	r2, r3, r2
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aff8:	3302      	adds	r3, #2
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	3b01      	subs	r3, #1
 800affe:	4013      	ands	r3, r2
 800b000:	2b00      	cmp	r3, #0
 800b002:	f040 80d0 	bne.w	800b1a6 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b014:	330c      	adds	r3, #12
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4619      	mov	r1, r3
 800b01a:	4610      	mov	r0, r2
 800b01c:	f7ff faee 	bl	800a5fc <get_fat>
 800b020:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d801      	bhi.n	800b02c <dir_next+0xf8>
 800b028:	2302      	movs	r3, #2
 800b02a:	e0e1      	b.n	800b1f0 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b032:	d101      	bne.n	800b038 <dir_next+0x104>
 800b034:	2301      	movs	r3, #1
 800b036:	e0db      	b.n	800b1f0 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b044:	3314      	adds	r3, #20
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	f0c0 8097 	bcc.w	800b17e <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d101      	bne.n	800b05a <dir_next+0x126>
 800b056:	2304      	movs	r3, #4
 800b058:	e0ca      	b.n	800b1f0 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b068:	330c      	adds	r3, #12
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4619      	mov	r1, r3
 800b06e:	4610      	mov	r0, r2
 800b070:	f7ff fd91 	bl	800ab96 <create_chain>
 800b074:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d101      	bne.n	800b080 <dir_next+0x14c>
 800b07c:	2307      	movs	r3, #7
 800b07e:	e0b7      	b.n	800b1f0 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d101      	bne.n	800b08a <dir_next+0x156>
 800b086:	2302      	movs	r3, #2
 800b088:	e0b2      	b.n	800b1f0 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b090:	d101      	bne.n	800b096 <dir_next+0x162>
 800b092:	2301      	movs	r3, #1
 800b094:	e0ac      	b.n	800b1f0 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7ff f928 	bl	800a2f4 <sync_window>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <dir_next+0x17a>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e0a0      	b.n	800b1f0 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0c4:	330a      	adds	r3, #10
 800b0c6:	881b      	ldrh	r3, [r3, #0]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	f7fe fef4 	bl	8009eb8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0de:	681c      	ldr	r4, [r3, #0]
 800b0e0:	6979      	ldr	r1, [r7, #20]
 800b0e2:	4610      	mov	r0, r2
 800b0e4:	f7ff fa63 	bl	800a5ae <clust2sect>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800b0ee:	330c      	adds	r3, #12
 800b0f0:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	613b      	str	r3, [r7, #16]
 800b0f6:	e024      	b.n	800b142 <dir_next+0x20e>
						dp->fs->wflag = 1;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b104:	3304      	adds	r3, #4
 800b106:	2201      	movs	r2, #1
 800b108:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4618      	mov	r0, r3
 800b114:	f7ff f8ee 	bl	800a2f4 <sync_window>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <dir_next+0x1ee>
 800b11e:	2301      	movs	r3, #1
 800b120:	e066      	b.n	800b1f0 <dir_next+0x2bc>
						dp->fs->winsect++;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800b12e:	330c      	adds	r3, #12
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	1c59      	adds	r1, r3, #1
 800b134:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800b138:	330c      	adds	r3, #12
 800b13a:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	3301      	adds	r3, #1
 800b140:	613b      	str	r3, [r7, #16]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b14e:	3302      	adds	r3, #2
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	4293      	cmp	r3, r2
 800b158:	d3ce      	bcc.n	800b0f8 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b166:	330c      	adds	r3, #12
 800b168:	6819      	ldr	r1, [r3, #0]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	1a8a      	subs	r2, r1, r2
 800b176:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b17a:	330c      	adds	r3, #12
 800b17c:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b184:	330c      	adds	r3, #12
 800b186:	697a      	ldr	r2, [r7, #20]
 800b188:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	6979      	ldr	r1, [r7, #20]
 800b194:	4618      	mov	r0, r3
 800b196:	f7ff fa0a 	bl	800a5ae <clust2sect>
 800b19a:	4602      	mov	r2, r0
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1a2:	3310      	adds	r3, #16
 800b1a4:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1b0:	3306      	adds	r3, #6
 800b1b2:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ca:	330a      	adds	r3, #10
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	095b      	lsrs	r3, r3, #5
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1da:	fb02 f201 	mul.w	r2, r2, r1
 800b1de:	1a9b      	subs	r3, r3, r2
 800b1e0:	015b      	lsls	r3, r3, #5
 800b1e2:	18c2      	adds	r2, r0, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ea:	3314      	adds	r3, #20
 800b1ec:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	371c      	adds	r7, #28
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd90      	pop	{r4, r7, pc}

0800b1f8 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800b202:	2100      	movs	r1, #0
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f7ff fdba 	bl	800ad7e <dir_sdi>
 800b20a:	4603      	mov	r3, r0
 800b20c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d138      	bne.n	800b286 <dir_alloc+0x8e>
		n = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b226:	3310      	adds	r3, #16
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4619      	mov	r1, r3
 800b22c:	4610      	mov	r0, r2
 800b22e:	f7ff f8bb 	bl	800a3a8 <move_window>
 800b232:	4603      	mov	r3, r0
 800b234:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b236:	7bfb      	ldrb	r3, [r7, #15]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d123      	bne.n	800b284 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b242:	3314      	adds	r3, #20
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	2be5      	cmp	r3, #229	; 0xe5
 800b24a:	d007      	beq.n	800b25c <dir_alloc+0x64>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b252:	3314      	adds	r3, #20
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d107      	bne.n	800b26c <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	3301      	adds	r3, #1
 800b260:	60bb      	str	r3, [r7, #8]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	429a      	cmp	r2, r3
 800b268:	d102      	bne.n	800b270 <dir_alloc+0x78>
 800b26a:	e00c      	b.n	800b286 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b26c:	2300      	movs	r3, #0
 800b26e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800b270:	2101      	movs	r1, #1
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7ff fe5e 	bl	800af34 <dir_next>
 800b278:	4603      	mov	r3, r0
 800b27a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800b27c:	7bfb      	ldrb	r3, [r7, #15]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0ca      	beq.n	800b218 <dir_alloc+0x20>
 800b282:	e000      	b.n	800b286 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 800b284:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b286:	7bfb      	ldrb	r3, [r7, #15]
 800b288:	2b04      	cmp	r3, #4
 800b28a:	d101      	bne.n	800b290 <dir_alloc+0x98>
 800b28c:	2307      	movs	r3, #7
 800b28e:	73fb      	strb	r3, [r7, #15]
	return res;
 800b290:	7bfb      	ldrb	r3, [r7, #15]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800b29a:	b480      	push	{r7}
 800b29c:	b085      	sub	sp, #20
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	331b      	adds	r3, #27
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	021b      	lsls	r3, r3, #8
 800b2ac:	b21a      	sxth	r2, r3
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	331a      	adds	r3, #26
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	b21b      	sxth	r3, r3
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	b21b      	sxth	r3, r3
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d10f      	bne.n	800b2ea <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	3315      	adds	r3, #21
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	021b      	lsls	r3, r3, #8
 800b2d2:	b21a      	sxth	r2, r3
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	3314      	adds	r3, #20
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	b21b      	sxth	r3, r3
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	b21b      	sxth	r3, r3
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	041b      	lsls	r3, r3, #16
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]

	return cl;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3714      	adds	r7, #20
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bc80      	pop	{r7}
 800b2f4:	4770      	bx	lr

0800b2f6 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800b2f6:	b480      	push	{r7}
 800b2f8:	b083      	sub	sp, #12
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	331a      	adds	r3, #26
 800b304:	683a      	ldr	r2, [r7, #0]
 800b306:	b2d2      	uxtb	r2, r2
 800b308:	701a      	strb	r2, [r3, #0]
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	0a1b      	lsrs	r3, r3, #8
 800b310:	b29a      	uxth	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	331b      	adds	r3, #27
 800b316:	b2d2      	uxtb	r2, r2
 800b318:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	0c1a      	lsrs	r2, r3, #16
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	3314      	adds	r3, #20
 800b322:	b2d2      	uxtb	r2, r2
 800b324:	701a      	strb	r2, [r3, #0]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	0c1b      	lsrs	r3, r3, #16
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	0a1b      	lsrs	r3, r3, #8
 800b32e:	b29a      	uxth	r2, r3
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	3315      	adds	r3, #21
 800b334:	b2d2      	uxtb	r2, r2
 800b336:	701a      	strb	r2, [r3, #0]
}
 800b338:	bf00      	nop
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bc80      	pop	{r7}
 800b340:	4770      	bx	lr
	...

0800b344 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b356:	1e5a      	subs	r2, r3, #1
 800b358:	4613      	mov	r3, r2
 800b35a:	005b      	lsls	r3, r3, #1
 800b35c:	4413      	add	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	4413      	add	r3, r2
 800b362:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800b364:	2300      	movs	r3, #0
 800b366:	613b      	str	r3, [r7, #16]
 800b368:	2301      	movs	r3, #1
 800b36a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800b36c:	4a2b      	ldr	r2, [pc, #172]	; (800b41c <cmp_lfn+0xd8>)
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	4413      	add	r3, r2
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	3301      	adds	r3, #1
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	4413      	add	r3, r2
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	021b      	lsls	r3, r3, #8
 800b37e:	b21a      	sxth	r2, r3
 800b380:	4926      	ldr	r1, [pc, #152]	; (800b41c <cmp_lfn+0xd8>)
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	440b      	add	r3, r1
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	4619      	mov	r1, r3
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	440b      	add	r3, r1
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	b21b      	sxth	r3, r3
 800b392:	4313      	orrs	r3, r2
 800b394:	b21b      	sxth	r3, r3
 800b396:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800b398:	89fb      	ldrh	r3, [r7, #14]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d019      	beq.n	800b3d2 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800b39e:	89bb      	ldrh	r3, [r7, #12]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f002 f9f7 	bl	800d794 <ff_wtoupper>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	2bfe      	cmp	r3, #254	; 0xfe
 800b3ae:	d80e      	bhi.n	800b3ce <cmp_lfn+0x8a>
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	1c5a      	adds	r2, r3, #1
 800b3b4:	617a      	str	r2, [r7, #20]
 800b3b6:	005b      	lsls	r3, r3, #1
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	881b      	ldrh	r3, [r3, #0]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f002 f9e8 	bl	800d794 <ff_wtoupper>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	89fb      	ldrh	r3, [r7, #14]
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d008      	beq.n	800b3e0 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	e01f      	b.n	800b412 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800b3d2:	89bb      	ldrh	r3, [r7, #12]
 800b3d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d001      	beq.n	800b3e0 <cmp_lfn+0x9c>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	e018      	b.n	800b412 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	613b      	str	r3, [r7, #16]
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	2b0c      	cmp	r3, #12
 800b3ea:	d9bf      	bls.n	800b36c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00b      	beq.n	800b410 <cmp_lfn+0xcc>
 800b3f8:	89fb      	ldrh	r3, [r7, #14]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d008      	beq.n	800b410 <cmp_lfn+0xcc>
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	005b      	lsls	r3, r3, #1
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	4413      	add	r3, r2
 800b406:	881b      	ldrh	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d001      	beq.n	800b410 <cmp_lfn+0xcc>
		return 0;
 800b40c:	2300      	movs	r3, #0
 800b40e:	e000      	b.n	800b412 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800b410:	2301      	movs	r3, #1
}
 800b412:	4618      	mov	r0, r3
 800b414:	3718      	adds	r7, #24
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	0800d99c 	.word	0x0800d99c

0800b420 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800b420:	b480      	push	{r7}
 800b422:	b089      	sub	sp, #36	; 0x24
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	4611      	mov	r1, r2
 800b42c:	461a      	mov	r2, r3
 800b42e:	460b      	mov	r3, r1
 800b430:	71fb      	strb	r3, [r7, #7]
 800b432:	4613      	mov	r3, r2
 800b434:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	330d      	adds	r3, #13
 800b43a:	79ba      	ldrb	r2, [r7, #6]
 800b43c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	330b      	adds	r3, #11
 800b442:	220f      	movs	r2, #15
 800b444:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	330c      	adds	r3, #12
 800b44a:	2200      	movs	r2, #0
 800b44c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	331a      	adds	r3, #26
 800b452:	2200      	movs	r2, #0
 800b454:	701a      	strb	r2, [r3, #0]
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	331b      	adds	r3, #27
 800b45a:	2200      	movs	r2, #0
 800b45c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800b45e:	79fb      	ldrb	r3, [r7, #7]
 800b460:	1e5a      	subs	r2, r3, #1
 800b462:	4613      	mov	r3, r2
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	4413      	add	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b46e:	2300      	movs	r3, #0
 800b470:	82fb      	strh	r3, [r7, #22]
 800b472:	2300      	movs	r3, #0
 800b474:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800b476:	8afb      	ldrh	r3, [r7, #22]
 800b478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d007      	beq.n	800b490 <fit_lfn+0x70>
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	1c5a      	adds	r2, r3, #1
 800b484:	61fa      	str	r2, [r7, #28]
 800b486:	005b      	lsls	r3, r3, #1
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	4413      	add	r3, r2
 800b48c:	881b      	ldrh	r3, [r3, #0]
 800b48e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800b490:	4a1c      	ldr	r2, [pc, #112]	; (800b504 <fit_lfn+0xe4>)
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	4413      	add	r3, r2
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	461a      	mov	r2, r3
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	4413      	add	r3, r2
 800b49e:	8afa      	ldrh	r2, [r7, #22]
 800b4a0:	b2d2      	uxtb	r2, r2
 800b4a2:	701a      	strb	r2, [r3, #0]
 800b4a4:	8afb      	ldrh	r3, [r7, #22]
 800b4a6:	0a1b      	lsrs	r3, r3, #8
 800b4a8:	b299      	uxth	r1, r3
 800b4aa:	4a16      	ldr	r2, [pc, #88]	; (800b504 <fit_lfn+0xe4>)
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	b2ca      	uxtb	r2, r1
 800b4ba:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800b4bc:	8afb      	ldrh	r3, [r7, #22]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d102      	bne.n	800b4c8 <fit_lfn+0xa8>
 800b4c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4c6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	61bb      	str	r3, [r7, #24]
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	2b0c      	cmp	r3, #12
 800b4d2:	d9d0      	bls.n	800b476 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800b4d4:	8afb      	ldrh	r3, [r7, #22]
 800b4d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d006      	beq.n	800b4ec <fit_lfn+0xcc>
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	881b      	ldrh	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d103      	bne.n	800b4f4 <fit_lfn+0xd4>
 800b4ec:	79fb      	ldrb	r3, [r7, #7]
 800b4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4f2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	79fa      	ldrb	r2, [r7, #7]
 800b4f8:	701a      	strb	r2, [r3, #0]
}
 800b4fa:	bf00      	nop
 800b4fc:	3724      	adds	r7, #36	; 0x24
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bc80      	pop	{r7}
 800b502:	4770      	bx	lr
 800b504:	0800d99c 	.word	0x0800d99c

0800b508 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08c      	sub	sp, #48	; 0x30
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b516:	220b      	movs	r2, #11
 800b518:	68b9      	ldr	r1, [r7, #8]
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f7fe fcae 	bl	8009e7c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	2b05      	cmp	r3, #5
 800b524:	d92b      	bls.n	800b57e <gen_numname+0x76>
		sr = seq;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b52a:	e022      	b.n	800b572 <gen_numname+0x6a>
			wc = *lfn++;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	1c9a      	adds	r2, r3, #2
 800b530:	607a      	str	r2, [r7, #4]
 800b532:	881b      	ldrh	r3, [r3, #0]
 800b534:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b536:	2300      	movs	r3, #0
 800b538:	62bb      	str	r3, [r7, #40]	; 0x28
 800b53a:	e017      	b.n	800b56c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	005a      	lsls	r2, r3, #1
 800b540:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b542:	f003 0301 	and.w	r3, r3, #1
 800b546:	4413      	add	r3, r2
 800b548:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b54a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b54c:	085b      	lsrs	r3, r3, #1
 800b54e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b556:	2b00      	cmp	r3, #0
 800b558:	d005      	beq.n	800b566 <gen_numname+0x5e>
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b560:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b564:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b568:	3301      	adds	r3, #1
 800b56a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56e:	2b0f      	cmp	r3, #15
 800b570:	d9e4      	bls.n	800b53c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	881b      	ldrh	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1d8      	bne.n	800b52c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b57e:	2307      	movs	r3, #7
 800b580:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	b2db      	uxtb	r3, r3
 800b586:	f003 030f 	and.w	r3, r3, #15
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	3330      	adds	r3, #48	; 0x30
 800b58e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b596:	2b39      	cmp	r3, #57	; 0x39
 800b598:	d904      	bls.n	800b5a4 <gen_numname+0x9c>
 800b59a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b59e:	3307      	adds	r3, #7
 800b5a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a6:	1e5a      	subs	r2, r3, #1
 800b5a8:	62ba      	str	r2, [r7, #40]	; 0x28
 800b5aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b5ae:	4413      	add	r3, r2
 800b5b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b5b4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	091b      	lsrs	r3, r3, #4
 800b5bc:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d1de      	bne.n	800b582 <gen_numname+0x7a>
	ns[i] = '~';
 800b5c4:	f107 0214 	add.w	r2, r7, #20
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	4413      	add	r3, r2
 800b5cc:	227e      	movs	r2, #126	; 0x7e
 800b5ce:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b5d4:	e002      	b.n	800b5dc <gen_numname+0xd4>
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d8:	3301      	adds	r3, #1
 800b5da:	627b      	str	r3, [r7, #36]	; 0x24
 800b5dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d205      	bcs.n	800b5f0 <gen_numname+0xe8>
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e8:	4413      	add	r3, r2
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	2b20      	cmp	r3, #32
 800b5ee:	d1f2      	bne.n	800b5d6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	2b07      	cmp	r3, #7
 800b5f4:	d808      	bhi.n	800b608 <gen_numname+0x100>
 800b5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f8:	1c5a      	adds	r2, r3, #1
 800b5fa:	62ba      	str	r2, [r7, #40]	; 0x28
 800b5fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b600:	4413      	add	r3, r2
 800b602:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b606:	e000      	b.n	800b60a <gen_numname+0x102>
 800b608:	2120      	movs	r1, #32
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60c:	1c5a      	adds	r2, r3, #1
 800b60e:	627a      	str	r2, [r7, #36]	; 0x24
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	4413      	add	r3, r2
 800b614:	460a      	mov	r2, r1
 800b616:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61a:	2b07      	cmp	r3, #7
 800b61c:	d9e8      	bls.n	800b5f0 <gen_numname+0xe8>
}
 800b61e:	bf00      	nop
 800b620:	bf00      	nop
 800b622:	3730      	adds	r7, #48	; 0x30
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b630:	2300      	movs	r3, #0
 800b632:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b634:	230b      	movs	r3, #11
 800b636:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800b638:	7bfb      	ldrb	r3, [r7, #15]
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	0852      	lsrs	r2, r2, #1
 800b63e:	01db      	lsls	r3, r3, #7
 800b640:	4313      	orrs	r3, r2
 800b642:	b2da      	uxtb	r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	1c59      	adds	r1, r3, #1
 800b648:	6079      	str	r1, [r7, #4]
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	4413      	add	r3, r2
 800b64e:	73fb      	strb	r3, [r7, #15]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	3b01      	subs	r3, #1
 800b654:	60bb      	str	r3, [r7, #8]
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1ed      	bne.n	800b638 <sum_sfn+0x10>
	return sum;
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	bc80      	pop	{r7}
 800b666:	4770      	bx	lr

0800b668 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b670:	2100      	movs	r1, #0
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7ff fb83 	bl	800ad7e <dir_sdi>
 800b678:	4603      	mov	r3, r0
 800b67a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b67c:	7dfb      	ldrb	r3, [r7, #23]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <dir_find+0x1e>
 800b682:	7dfb      	ldrb	r3, [r7, #23]
 800b684:	e0c1      	b.n	800b80a <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b686:	23ff      	movs	r3, #255	; 0xff
 800b688:	753b      	strb	r3, [r7, #20]
 800b68a:	7d3b      	ldrb	r3, [r7, #20]
 800b68c:	757b      	strb	r3, [r7, #21]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b694:	3304      	adds	r3, #4
 800b696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b69a:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6aa:	3310      	adds	r3, #16
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	4610      	mov	r0, r2
 800b6b2:	f7fe fe79 	bl	800a3a8 <move_window>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f040 809e 	bne.w	800b7fe <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6c8:	3314      	adds	r3, #20
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b6d4:	7dbb      	ldrb	r3, [r7, #22]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d102      	bne.n	800b6e0 <dir_find+0x78>
 800b6da:	2304      	movs	r3, #4
 800b6dc:	75fb      	strb	r3, [r7, #23]
 800b6de:	e093      	b.n	800b808 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	330b      	adds	r3, #11
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6ea:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b6ec:	7dbb      	ldrb	r3, [r7, #22]
 800b6ee:	2be5      	cmp	r3, #229	; 0xe5
 800b6f0:	d007      	beq.n	800b702 <dir_find+0x9a>
 800b6f2:	7bfb      	ldrb	r3, [r7, #15]
 800b6f4:	f003 0308 	and.w	r3, r3, #8
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00c      	beq.n	800b716 <dir_find+0xae>
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
 800b6fe:	2b0f      	cmp	r3, #15
 800b700:	d009      	beq.n	800b716 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b702:	23ff      	movs	r3, #255	; 0xff
 800b704:	757b      	strb	r3, [r7, #21]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b70c:	3304      	adds	r3, #4
 800b70e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b712:	801a      	strh	r2, [r3, #0]
 800b714:	e068      	b.n	800b7e8 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b716:	7bfb      	ldrb	r3, [r7, #15]
 800b718:	2b0f      	cmp	r3, #15
 800b71a:	d139      	bne.n	800b790 <dir_find+0x128>
				if (dp->lfn) {
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d05f      	beq.n	800b7e8 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b728:	7dbb      	ldrb	r3, [r7, #22]
 800b72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d012      	beq.n	800b758 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	7b5b      	ldrb	r3, [r3, #13]
 800b736:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800b738:	7dbb      	ldrb	r3, [r7, #22]
 800b73a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b73e:	75bb      	strb	r3, [r7, #22]
 800b740:	7dbb      	ldrb	r3, [r7, #22]
 800b742:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b74a:	3306      	adds	r3, #6
 800b74c:	881a      	ldrh	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b754:	3304      	adds	r3, #4
 800b756:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800b758:	7dba      	ldrb	r2, [r7, #22]
 800b75a:	7d7b      	ldrb	r3, [r7, #21]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d114      	bne.n	800b78a <dir_find+0x122>
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	330d      	adds	r3, #13
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	7d3a      	ldrb	r2, [r7, #20]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d10e      	bne.n	800b78a <dir_find+0x122>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	6939      	ldr	r1, [r7, #16]
 800b776:	4618      	mov	r0, r3
 800b778:	f7ff fde4 	bl	800b344 <cmp_lfn>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d003      	beq.n	800b78a <dir_find+0x122>
 800b782:	7d7b      	ldrb	r3, [r7, #21]
 800b784:	3b01      	subs	r3, #1
 800b786:	b2db      	uxtb	r3, r3
 800b788:	e000      	b.n	800b78c <dir_find+0x124>
 800b78a:	23ff      	movs	r3, #255	; 0xff
 800b78c:	757b      	strb	r3, [r7, #21]
 800b78e:	e02b      	b.n	800b7e8 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800b790:	7d7b      	ldrb	r3, [r7, #21]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d107      	bne.n	800b7a6 <dir_find+0x13e>
 800b796:	6938      	ldr	r0, [r7, #16]
 800b798:	f7ff ff46 	bl	800b628 <sum_sfn>
 800b79c:	4603      	mov	r3, r0
 800b79e:	461a      	mov	r2, r3
 800b7a0:	7d3b      	ldrb	r3, [r7, #20]
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d02d      	beq.n	800b802 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7ac:	3318      	adds	r3, #24
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	330b      	adds	r3, #11
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	f003 0301 	and.w	r3, r3, #1
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10c      	bne.n	800b7d6 <dir_find+0x16e>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7c2:	3318      	adds	r3, #24
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	220b      	movs	r2, #11
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6938      	ldr	r0, [r7, #16]
 800b7cc:	f7fe fb8e 	bl	8009eec <mem_cmp>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d017      	beq.n	800b806 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b7d6:	23ff      	movs	r3, #255	; 0xff
 800b7d8:	757b      	strb	r3, [r7, #21]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7e6:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f7ff fba2 	bl	800af34 <dir_next>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b7f4:	7dfb      	ldrb	r3, [r7, #23]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	f43f af50 	beq.w	800b69c <dir_find+0x34>
 800b7fc:	e004      	b.n	800b808 <dir_find+0x1a0>
		if (res != FR_OK) break;
 800b7fe:	bf00      	nop
 800b800:	e002      	b.n	800b808 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800b802:	bf00      	nop
 800b804:	e000      	b.n	800b808 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800b806:	bf00      	nop

	return res;
 800b808:	7dfb      	ldrb	r3, [r7, #23]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b08c      	sub	sp, #48	; 0x30
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b822:	3318      	adds	r3, #24
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	623b      	str	r3, [r7, #32]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800b832:	f107 030c 	add.w	r3, r7, #12
 800b836:	220c      	movs	r2, #12
 800b838:	6a39      	ldr	r1, [r7, #32]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fe fb1e 	bl	8009e7c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b840:	7dfb      	ldrb	r3, [r7, #23]
 800b842:	f003 0301 	and.w	r3, r3, #1
 800b846:	2b00      	cmp	r3, #0
 800b848:	d039      	beq.n	800b8be <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800b84a:	6a3b      	ldr	r3, [r7, #32]
 800b84c:	330b      	adds	r3, #11
 800b84e:	2200      	movs	r2, #0
 800b850:	701a      	strb	r2, [r3, #0]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800b85c:	2301      	movs	r3, #1
 800b85e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b860:	e013      	b.n	800b88a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800b862:	f107 010c 	add.w	r1, r7, #12
 800b866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b868:	69fa      	ldr	r2, [r7, #28]
 800b86a:	6a38      	ldr	r0, [r7, #32]
 800b86c:	f7ff fe4c 	bl	800b508 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f7ff fef9 	bl	800b668 <dir_find>
 800b876:	4603      	mov	r3, r0
 800b878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b87c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b880:	2b00      	cmp	r3, #0
 800b882:	d106      	bne.n	800b892 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800b884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b886:	3301      	adds	r3, #1
 800b888:	62bb      	str	r3, [r7, #40]	; 0x28
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	2b63      	cmp	r3, #99	; 0x63
 800b88e:	d9e8      	bls.n	800b862 <dir_register+0x4e>
 800b890:	e000      	b.n	800b894 <dir_register+0x80>
			if (res != FR_OK) break;
 800b892:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b896:	2b64      	cmp	r3, #100	; 0x64
 800b898:	d101      	bne.n	800b89e <dir_register+0x8a>
 800b89a:	2307      	movs	r3, #7
 800b89c:	e0e3      	b.n	800ba66 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b89e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8a2:	2b04      	cmp	r3, #4
 800b8a4:	d002      	beq.n	800b8ac <dir_register+0x98>
 800b8a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8aa:	e0dc      	b.n	800ba66 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	330b      	adds	r3, #11
 800b8b0:	7dfa      	ldrb	r2, [r7, #23]
 800b8b2:	701a      	strb	r2, [r3, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b8ba:	69fa      	ldr	r2, [r7, #28]
 800b8bc:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
 800b8c0:	f003 0302 	and.w	r3, r3, #2
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d014      	beq.n	800b8f2 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8cc:	e002      	b.n	800b8d4 <dir_register+0xc0>
 800b8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	005b      	lsls	r3, r3, #1
 800b8d8:	69fa      	ldr	r2, [r7, #28]
 800b8da:	4413      	add	r3, r2
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1f5      	bne.n	800b8ce <dir_register+0xba>
		nent = (n + 25) / 13;
 800b8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e4:	3319      	adds	r3, #25
 800b8e6:	4a62      	ldr	r2, [pc, #392]	; (800ba70 <dir_register+0x25c>)
 800b8e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ec:	089b      	lsrs	r3, r3, #2
 800b8ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b8f0:	e001      	b.n	800b8f6 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b8f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f7ff fc7d 	bl	800b1f8 <dir_alloc>
 800b8fe:	4603      	mov	r3, r0
 800b900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b904:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d160      	bne.n	800b9ce <dir_register+0x1ba>
 800b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90e:	3b01      	subs	r3, #1
 800b910:	627b      	str	r3, [r7, #36]	; 0x24
 800b912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b914:	2b00      	cmp	r3, #0
 800b916:	d05a      	beq.n	800b9ce <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b91e:	3306      	adds	r3, #6
 800b920:	881b      	ldrh	r3, [r3, #0]
 800b922:	461a      	mov	r2, r3
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	4619      	mov	r1, r3
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7ff fa27 	bl	800ad7e <dir_sdi>
 800b930:	4603      	mov	r3, r0
 800b932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d147      	bne.n	800b9ce <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b944:	3318      	adds	r3, #24
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4618      	mov	r0, r3
 800b94a:	f7ff fe6d 	bl	800b628 <sum_sfn>
 800b94e:	4603      	mov	r3, r0
 800b950:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b960:	3310      	adds	r3, #16
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4619      	mov	r1, r3
 800b966:	4610      	mov	r0, r2
 800b968:	f7fe fd1e 	bl	800a3a8 <move_window>
 800b96c:	4603      	mov	r3, r0
 800b96e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b976:	2b00      	cmp	r3, #0
 800b978:	d128      	bne.n	800b9cc <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b980:	6818      	ldr	r0, [r3, #0]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b988:	3314      	adds	r3, #20
 800b98a:	6819      	ldr	r1, [r3, #0]
 800b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98e:	b2da      	uxtb	r2, r3
 800b990:	7efb      	ldrb	r3, [r7, #27]
 800b992:	f7ff fd45 	bl	800b420 <fit_lfn>
				dp->fs->wflag = 1;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9a2:	3304      	adds	r3, #4
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7ff fac2 	bl	800af34 <dir_next>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b9b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d107      	bne.n	800b9ce <dir_register+0x1ba>
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1c3      	bne.n	800b952 <dir_register+0x13e>
 800b9ca:	e000      	b.n	800b9ce <dir_register+0x1ba>
				if (res != FR_OK) break;
 800b9cc:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800b9ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d145      	bne.n	800ba62 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9e4:	3310      	adds	r3, #16
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	f7fe fcdc 	bl	800a3a8 <move_window>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b9f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d131      	bne.n	800ba62 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba04:	3314      	adds	r3, #20
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2220      	movs	r2, #32
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7fe fa53 	bl	8009eb8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba18:	3314      	adds	r3, #20
 800ba1a:	6818      	ldr	r0, [r3, #0]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba22:	3318      	adds	r3, #24
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	220b      	movs	r2, #11
 800ba28:	4619      	mov	r1, r3
 800ba2a:	f7fe fa27 	bl	8009e7c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba34:	3318      	adds	r3, #24
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	330b      	adds	r3, #11
 800ba3a:	781a      	ldrb	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba42:	3314      	adds	r3, #20
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	330c      	adds	r3, #12
 800ba48:	f002 0218 	and.w	r2, r2, #24
 800ba4c:	b2d2      	uxtb	r2, r2
 800ba4e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	2201      	movs	r2, #1
 800ba60:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800ba62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3730      	adds	r7, #48	; 0x30
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	4ec4ec4f 	.word	0x4ec4ec4f

0800ba74 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b08a      	sub	sp, #40	; 0x28
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	613b      	str	r3, [r7, #16]
 800ba84:	e002      	b.n	800ba8c <create_name+0x18>
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	613b      	str	r3, [r7, #16]
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	2b2f      	cmp	r3, #47	; 0x2f
 800ba92:	d0f8      	beq.n	800ba86 <create_name+0x12>
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	2b5c      	cmp	r3, #92	; 0x5c
 800ba9a:	d0f4      	beq.n	800ba86 <create_name+0x12>
	lfn = dp->lfn;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800baa6:	2300      	movs	r3, #0
 800baa8:	617b      	str	r3, [r7, #20]
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	1c5a      	adds	r2, r3, #1
 800bab2:	61ba      	str	r2, [r7, #24]
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	4413      	add	r3, r2
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800babc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800babe:	2b1f      	cmp	r3, #31
 800bac0:	d92f      	bls.n	800bb22 <create_name+0xae>
 800bac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bac4:	2b2f      	cmp	r3, #47	; 0x2f
 800bac6:	d02c      	beq.n	800bb22 <create_name+0xae>
 800bac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baca:	2b5c      	cmp	r3, #92	; 0x5c
 800bacc:	d029      	beq.n	800bb22 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	2bfe      	cmp	r3, #254	; 0xfe
 800bad2:	d901      	bls.n	800bad8 <create_name+0x64>
			return FR_INVALID_NAME;
 800bad4:	2306      	movs	r3, #6
 800bad6:	e18b      	b.n	800bdf0 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bada:	b2db      	uxtb	r3, r3
 800badc:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bae0:	2101      	movs	r1, #1
 800bae2:	4618      	mov	r0, r3
 800bae4:	f001 fe1c 	bl	800d720 <ff_convert>
 800bae8:	4603      	mov	r3, r0
 800baea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800baec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <create_name+0x82>
 800baf2:	2306      	movs	r3, #6
 800baf4:	e17c      	b.n	800bdf0 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800baf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baf8:	2b7f      	cmp	r3, #127	; 0x7f
 800bafa:	d809      	bhi.n	800bb10 <create_name+0x9c>
 800bafc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bafe:	4619      	mov	r1, r3
 800bb00:	488f      	ldr	r0, [pc, #572]	; (800bd40 <create_name+0x2cc>)
 800bb02:	f7fe fa19 	bl	8009f38 <chk_chr>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <create_name+0x9c>
			return FR_INVALID_NAME;
 800bb0c:	2306      	movs	r3, #6
 800bb0e:	e16f      	b.n	800bdf0 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	617a      	str	r2, [r7, #20]
 800bb16:	005b      	lsls	r3, r3, #1
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bb1e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bb20:	e7c5      	b.n	800baae <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	441a      	add	r2, r3
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800bb2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb2e:	2b1f      	cmp	r3, #31
 800bb30:	d801      	bhi.n	800bb36 <create_name+0xc2>
 800bb32:	2304      	movs	r3, #4
 800bb34:	e000      	b.n	800bb38 <create_name+0xc4>
 800bb36:	2300      	movs	r3, #0
 800bb38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800bb3c:	e011      	b.n	800bb62 <create_name+0xee>
		w = lfn[di - 1];
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb44:	3b01      	subs	r3, #1
 800bb46:	005b      	lsls	r3, r3, #1
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800bb50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb52:	2b20      	cmp	r3, #32
 800bb54:	d002      	beq.n	800bb5c <create_name+0xe8>
 800bb56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb58:	2b2e      	cmp	r3, #46	; 0x2e
 800bb5a:	d106      	bne.n	800bb6a <create_name+0xf6>
		di--;
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1ea      	bne.n	800bb3e <create_name+0xca>
 800bb68:	e000      	b.n	800bb6c <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800bb6a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d101      	bne.n	800bb76 <create_name+0x102>
 800bb72:	2306      	movs	r3, #6
 800bb74:	e13c      	b.n	800bdf0 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	005b      	lsls	r3, r3, #1
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	2200      	movs	r2, #0
 800bb80:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb88:	3318      	adds	r3, #24
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	220b      	movs	r2, #11
 800bb8e:	2120      	movs	r1, #32
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe f991 	bl	8009eb8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bb96:	2300      	movs	r3, #0
 800bb98:	61bb      	str	r3, [r7, #24]
 800bb9a:	e002      	b.n	800bba2 <create_name+0x12e>
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	61bb      	str	r3, [r7, #24]
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	005b      	lsls	r3, r3, #1
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	2b20      	cmp	r3, #32
 800bbae:	d0f5      	beq.n	800bb9c <create_name+0x128>
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	005b      	lsls	r3, r3, #1
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	881b      	ldrh	r3, [r3, #0]
 800bbba:	2b2e      	cmp	r3, #46	; 0x2e
 800bbbc:	d0ee      	beq.n	800bb9c <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d009      	beq.n	800bbd8 <create_name+0x164>
 800bbc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbc8:	f043 0303 	orr.w	r3, r3, #3
 800bbcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bbd0:	e002      	b.n	800bbd8 <create_name+0x164>
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	617b      	str	r3, [r7, #20]
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d009      	beq.n	800bbf2 <create_name+0x17e>
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	005b      	lsls	r3, r3, #1
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	4413      	add	r3, r2
 800bbec:	881b      	ldrh	r3, [r3, #0]
 800bbee:	2b2e      	cmp	r3, #46	; 0x2e
 800bbf0:	d1ef      	bne.n	800bbd2 <create_name+0x15e>

	b = i = 0; ni = 8;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	623b      	str	r3, [r7, #32]
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	1c5a      	adds	r2, r3, #1
 800bc04:	61ba      	str	r2, [r7, #24]
 800bc06:	005b      	lsls	r3, r3, #1
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bc10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f000 8092 	beq.w	800bd3c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bc18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc1a:	2b20      	cmp	r3, #32
 800bc1c:	d006      	beq.n	800bc2c <create_name+0x1b8>
 800bc1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc20:	2b2e      	cmp	r3, #46	; 0x2e
 800bc22:	d10a      	bne.n	800bc3a <create_name+0x1c6>
 800bc24:	69ba      	ldr	r2, [r7, #24]
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d006      	beq.n	800bc3a <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800bc2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc30:	f043 0303 	orr.w	r3, r3, #3
 800bc34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc38:	e07f      	b.n	800bd3a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bc3a:	6a3a      	ldr	r2, [r7, #32]
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d203      	bcs.n	800bc4a <create_name+0x1d6>
 800bc42:	69ba      	ldr	r2, [r7, #24]
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d123      	bne.n	800bc92 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800bc4a:	69fb      	ldr	r3, [r7, #28]
 800bc4c:	2b0b      	cmp	r3, #11
 800bc4e:	d106      	bne.n	800bc5e <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800bc50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc54:	f043 0303 	orr.w	r3, r3, #3
 800bc58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc5c:	e077      	b.n	800bd4e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bc5e:	69ba      	ldr	r2, [r7, #24]
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d005      	beq.n	800bc72 <create_name+0x1fe>
 800bc66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc6a:	f043 0303 	orr.w	r3, r3, #3
 800bc6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d868      	bhi.n	800bd4c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	61bb      	str	r3, [r7, #24]
 800bc7e:	2308      	movs	r3, #8
 800bc80:	623b      	str	r3, [r7, #32]
 800bc82:	230b      	movs	r3, #11
 800bc84:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bc86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bc90:	e053      	b.n	800bd3a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bc92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc94:	2b7f      	cmp	r3, #127	; 0x7f
 800bc96:	d914      	bls.n	800bcc2 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bc98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f001 fd3f 	bl	800d720 <ff_convert>
 800bca2:	4603      	mov	r3, r0
 800bca4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d004      	beq.n	800bcb6 <create_name+0x242>
 800bcac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcae:	3b80      	subs	r3, #128	; 0x80
 800bcb0:	4a24      	ldr	r2, [pc, #144]	; (800bd44 <create_name+0x2d0>)
 800bcb2:	5cd3      	ldrb	r3, [r2, r3]
 800bcb4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bcb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcba:	f043 0302 	orr.w	r3, r3, #2
 800bcbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bcc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d007      	beq.n	800bcd8 <create_name+0x264>
 800bcc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcca:	4619      	mov	r1, r3
 800bccc:	481e      	ldr	r0, [pc, #120]	; (800bd48 <create_name+0x2d4>)
 800bcce:	f7fe f933 	bl	8009f38 <chk_chr>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d008      	beq.n	800bcea <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bcd8:	235f      	movs	r3, #95	; 0x5f
 800bcda:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bcdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bce0:	f043 0303 	orr.w	r3, r3, #3
 800bce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bce8:	e01b      	b.n	800bd22 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bcea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcec:	2b40      	cmp	r3, #64	; 0x40
 800bcee:	d909      	bls.n	800bd04 <create_name+0x290>
 800bcf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcf2:	2b5a      	cmp	r3, #90	; 0x5a
 800bcf4:	d806      	bhi.n	800bd04 <create_name+0x290>
					b |= 2;
 800bcf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bcfa:	f043 0302 	orr.w	r3, r3, #2
 800bcfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bd02:	e00e      	b.n	800bd22 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bd04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd06:	2b60      	cmp	r3, #96	; 0x60
 800bd08:	d90b      	bls.n	800bd22 <create_name+0x2ae>
 800bd0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd0c:	2b7a      	cmp	r3, #122	; 0x7a
 800bd0e:	d808      	bhi.n	800bd22 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 800bd10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd14:	f043 0301 	orr.w	r3, r3, #1
 800bd18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bd1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd1e:	3b20      	subs	r3, #32
 800bd20:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd28:	3318      	adds	r3, #24
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	6a3b      	ldr	r3, [r7, #32]
 800bd2e:	1c59      	adds	r1, r3, #1
 800bd30:	6239      	str	r1, [r7, #32]
 800bd32:	4413      	add	r3, r2
 800bd34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd36:	b2d2      	uxtb	r2, r2
 800bd38:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800bd3a:	e761      	b.n	800bc00 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800bd3c:	bf00      	nop
 800bd3e:	e006      	b.n	800bd4e <create_name+0x2da>
 800bd40:	0800d8bc 	.word	0x0800d8bc
 800bd44:	0800d91c 	.word	0x0800d91c
 800bd48:	0800d8c8 	.word	0x0800d8c8
			if (si > di) break;			/* No extension */
 800bd4c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd54:	3318      	adds	r3, #24
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	2be5      	cmp	r3, #229	; 0xe5
 800bd5c:	d106      	bne.n	800bd6c <create_name+0x2f8>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd64:	3318      	adds	r3, #24
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2205      	movs	r2, #5
 800bd6a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	2b08      	cmp	r3, #8
 800bd70:	d104      	bne.n	800bd7c <create_name+0x308>
 800bd72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800bd7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd80:	f003 030c 	and.w	r3, r3, #12
 800bd84:	2b0c      	cmp	r3, #12
 800bd86:	d005      	beq.n	800bd94 <create_name+0x320>
 800bd88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd8c:	f003 0303 	and.w	r3, r3, #3
 800bd90:	2b03      	cmp	r3, #3
 800bd92:	d105      	bne.n	800bda0 <create_name+0x32c>
		cf |= NS_LFN;
 800bd94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd98:	f043 0302 	orr.w	r3, r3, #2
 800bd9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bda0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bda4:	f003 0302 	and.w	r3, r3, #2
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d117      	bne.n	800bddc <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bdac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdb0:	f003 0303 	and.w	r3, r3, #3
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d105      	bne.n	800bdc4 <create_name+0x350>
 800bdb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdbc:	f043 0310 	orr.w	r3, r3, #16
 800bdc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bdc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdc8:	f003 030c 	and.w	r3, r3, #12
 800bdcc:	2b04      	cmp	r3, #4
 800bdce:	d105      	bne.n	800bddc <create_name+0x368>
 800bdd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdd4:	f043 0308 	orr.w	r3, r3, #8
 800bdd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bde2:	3318      	adds	r3, #24
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	330b      	adds	r3, #11
 800bde8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bdec:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bdee:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3728      	adds	r7, #40	; 0x28
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	2b2f      	cmp	r3, #47	; 0x2f
 800be08:	d003      	beq.n	800be12 <follow_path+0x1a>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	2b5c      	cmp	r3, #92	; 0x5c
 800be10:	d102      	bne.n	800be18 <follow_path+0x20>
		path++;
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	3301      	adds	r3, #1
 800be16:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be1e:	3308      	adds	r3, #8
 800be20:	2200      	movs	r2, #0
 800be22:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	2b1f      	cmp	r3, #31
 800be2a:	d80c      	bhi.n	800be46 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800be2c:	2100      	movs	r1, #0
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f7fe ffa5 	bl	800ad7e <dir_sdi>
 800be34:	4603      	mov	r3, r0
 800be36:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be3e:	3314      	adds	r3, #20
 800be40:	2200      	movs	r2, #0
 800be42:	601a      	str	r2, [r3, #0]
 800be44:	e04c      	b.n	800bee0 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800be46:	463b      	mov	r3, r7
 800be48:	4619      	mov	r1, r3
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f7ff fe12 	bl	800ba74 <create_name>
 800be50:	4603      	mov	r3, r0
 800be52:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800be54:	7bfb      	ldrb	r3, [r7, #15]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d13d      	bne.n	800bed6 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7ff fc04 	bl	800b668 <dir_find>
 800be60:	4603      	mov	r3, r0
 800be62:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be6a:	3318      	adds	r3, #24
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	7adb      	ldrb	r3, [r3, #11]
 800be70:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800be72:	7bfb      	ldrb	r3, [r7, #15]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00a      	beq.n	800be8e <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800be78:	7bfb      	ldrb	r3, [r7, #15]
 800be7a:	2b04      	cmp	r3, #4
 800be7c:	d12d      	bne.n	800beda <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800be7e:	7bbb      	ldrb	r3, [r7, #14]
 800be80:	f003 0304 	and.w	r3, r3, #4
 800be84:	2b00      	cmp	r3, #0
 800be86:	d128      	bne.n	800beda <follow_path+0xe2>
 800be88:	2305      	movs	r3, #5
 800be8a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800be8c:	e025      	b.n	800beda <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800be8e:	7bbb      	ldrb	r3, [r7, #14]
 800be90:	f003 0304 	and.w	r3, r3, #4
 800be94:	2b00      	cmp	r3, #0
 800be96:	d122      	bne.n	800bede <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be9e:	3314      	adds	r3, #20
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	330b      	adds	r3, #11
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	f003 0310 	and.w	r3, r3, #16
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d102      	bne.n	800beb8 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800beb2:	2305      	movs	r3, #5
 800beb4:	73fb      	strb	r3, [r7, #15]
 800beb6:	e013      	b.n	800bee0 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68b9      	ldr	r1, [r7, #8]
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7ff f9e9 	bl	800b29a <ld_clust>
 800bec8:	4602      	mov	r2, r0
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bed0:	3308      	adds	r3, #8
 800bed2:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bed4:	e7b7      	b.n	800be46 <follow_path+0x4e>
			if (res != FR_OK) break;
 800bed6:	bf00      	nop
 800bed8:	e002      	b.n	800bee0 <follow_path+0xe8>
				break;
 800beda:	bf00      	nop
 800bedc:	e000      	b.n	800bee0 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bede:	bf00      	nop
		}
	}

	return res;
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800beea:	b480      	push	{r7}
 800beec:	b087      	sub	sp, #28
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bef2:	f04f 33ff 	mov.w	r3, #4294967295
 800bef6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d031      	beq.n	800bf64 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	617b      	str	r3, [r7, #20]
 800bf06:	e002      	b.n	800bf0e <get_ldnumber+0x24>
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	617b      	str	r3, [r7, #20]
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	2b1f      	cmp	r3, #31
 800bf14:	d903      	bls.n	800bf1e <get_ldnumber+0x34>
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	2b3a      	cmp	r3, #58	; 0x3a
 800bf1c:	d1f4      	bne.n	800bf08 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	2b3a      	cmp	r3, #58	; 0x3a
 800bf24:	d11c      	bne.n	800bf60 <get_ldnumber+0x76>
			tp = *path;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	1c5a      	adds	r2, r3, #1
 800bf30:	60fa      	str	r2, [r7, #12]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	3b30      	subs	r3, #48	; 0x30
 800bf36:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	2b09      	cmp	r3, #9
 800bf3c:	d80e      	bhi.n	800bf5c <get_ldnumber+0x72>
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d10a      	bne.n	800bf5c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d107      	bne.n	800bf5c <get_ldnumber+0x72>
					vol = (int)i;
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	3301      	adds	r3, #1
 800bf54:	617b      	str	r3, [r7, #20]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	697a      	ldr	r2, [r7, #20]
 800bf5a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	e002      	b.n	800bf66 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bf60:	2300      	movs	r3, #0
 800bf62:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bf64:	693b      	ldr	r3, [r7, #16]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	371c      	adds	r7, #28
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bc80      	pop	{r7}
 800bf6e:	4770      	bx	lr

0800bf70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf80:	3304      	adds	r3, #4
 800bf82:	2200      	movs	r2, #0
 800bf84:	701a      	strb	r2, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bf8c:	330c      	adds	r3, #12
 800bf8e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf92:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7fe fa06 	bl	800a3a8 <move_window>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d001      	beq.n	800bfa6 <check_fs+0x36>
		return 3;
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	e04a      	b.n	800c03c <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bfac:	3301      	adds	r3, #1
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	021b      	lsls	r3, r3, #8
 800bfb2:	b21a      	sxth	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800bfba:	b21b      	sxth	r3, r3
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	b21b      	sxth	r3, r3
 800bfc0:	4a20      	ldr	r2, [pc, #128]	; (800c044 <check_fs+0xd4>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d001      	beq.n	800bfca <check_fs+0x5a>
		return 2;
 800bfc6:	2302      	movs	r3, #2
 800bfc8:	e038      	b.n	800c03c <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	3336      	adds	r3, #54	; 0x36
 800bfce:	3303      	adds	r3, #3
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	061a      	lsls	r2, r3, #24
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3336      	adds	r3, #54	; 0x36
 800bfd8:	3302      	adds	r3, #2
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	041b      	lsls	r3, r3, #16
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	3236      	adds	r2, #54	; 0x36
 800bfe4:	3201      	adds	r2, #1
 800bfe6:	7812      	ldrb	r2, [r2, #0]
 800bfe8:	0212      	lsls	r2, r2, #8
 800bfea:	4313      	orrs	r3, r2
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800bff2:	4313      	orrs	r3, r2
 800bff4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bff8:	4a13      	ldr	r2, [pc, #76]	; (800c048 <check_fs+0xd8>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d101      	bne.n	800c002 <check_fs+0x92>
		return 0;
 800bffe:	2300      	movs	r3, #0
 800c000:	e01c      	b.n	800c03c <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	3352      	adds	r3, #82	; 0x52
 800c006:	3303      	adds	r3, #3
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	061a      	lsls	r2, r3, #24
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3352      	adds	r3, #82	; 0x52
 800c010:	3302      	adds	r3, #2
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	041b      	lsls	r3, r3, #16
 800c016:	4313      	orrs	r3, r2
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	3252      	adds	r2, #82	; 0x52
 800c01c:	3201      	adds	r2, #1
 800c01e:	7812      	ldrb	r2, [r2, #0]
 800c020:	0212      	lsls	r2, r2, #8
 800c022:	4313      	orrs	r3, r2
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800c02a:	4313      	orrs	r3, r2
 800c02c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c030:	4a05      	ldr	r2, [pc, #20]	; (800c048 <check_fs+0xd8>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d101      	bne.n	800c03a <check_fs+0xca>
		return 0;
 800c036:	2300      	movs	r3, #0
 800c038:	e000      	b.n	800c03c <check_fs+0xcc>

	return 1;
 800c03a:	2301      	movs	r3, #1
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	ffffaa55 	.word	0xffffaa55
 800c048:	00544146 	.word	0x00544146

0800c04c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b096      	sub	sp, #88	; 0x58
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	4613      	mov	r3, r2
 800c058:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2200      	movs	r2, #0
 800c05e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c060:	68b8      	ldr	r0, [r7, #8]
 800c062:	f7ff ff42 	bl	800beea <get_ldnumber>
 800c066:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	da01      	bge.n	800c072 <find_volume+0x26>
 800c06e:	230b      	movs	r3, #11
 800c070:	e33c      	b.n	800c6ec <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c072:	4ab3      	ldr	r2, [pc, #716]	; (800c340 <find_volume+0x2f4>)
 800c074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c07a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d101      	bne.n	800c086 <find_volume+0x3a>
 800c082:	230c      	movs	r3, #12
 800c084:	e332      	b.n	800c6ec <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c08a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01d      	beq.n	800c0d4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800c098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c09e:	3301      	adds	r3, #1
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fd fe4c 	bl	8009d40 <disk_status>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c0ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c0b2:	f003 0301 	and.w	r3, r3, #1
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10c      	bne.n	800c0d4 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800c0ba:	79fb      	ldrb	r3, [r7, #7]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d007      	beq.n	800c0d0 <find_volume+0x84>
 800c0c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c0c4:	f003 0304 	and.w	r3, r3, #4
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800c0cc:	230a      	movs	r3, #10
 800c0ce:	e30d      	b.n	800c6ec <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	e30b      	b.n	800c6ec <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0da:	2200      	movs	r2, #0
 800c0dc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fd fe3c 	bl	8009d74 <disk_initialize>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800c102:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d001      	beq.n	800c112 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c10e:	2303      	movs	r3, #3
 800c110:	e2ec      	b.n	800c6ec <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800c112:	79fb      	ldrb	r3, [r7, #7]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d007      	beq.n	800c128 <find_volume+0xdc>
 800c118:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c11c:	f003 0304 	and.w	r3, r3, #4
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800c124:	230a      	movs	r3, #10
 800c126:	e2e1      	b.n	800c6ec <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800c128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c12e:	3301      	adds	r3, #1
 800c130:	7818      	ldrb	r0, [r3, #0]
 800c132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c138:	330a      	adds	r3, #10
 800c13a:	461a      	mov	r2, r3
 800c13c:	2102      	movs	r1, #2
 800c13e:	f7fd fe7f 	bl	8009e40 <disk_ioctl>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10f      	bne.n	800c168 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800c148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c14e:	330a      	adds	r3, #10
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c156:	d307      	bcc.n	800c168 <find_volume+0x11c>
 800c158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c15e:	330a      	adds	r3, #10
 800c160:	881b      	ldrh	r3, [r3, #0]
 800c162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c166:	d901      	bls.n	800c16c <find_volume+0x120>
 800c168:	2301      	movs	r3, #1
 800c16a:	e2bf      	b.n	800c6ec <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800c16c:	2300      	movs	r3, #0
 800c16e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800c170:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c172:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c174:	f7ff fefc 	bl	800bf70 <check_fs>
 800c178:	4603      	mov	r3, r0
 800c17a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800c17e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c182:	2b01      	cmp	r3, #1
 800c184:	d155      	bne.n	800c232 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c186:	2300      	movs	r3, #0
 800c188:	643b      	str	r3, [r7, #64]	; 0x40
 800c18a:	e029      	b.n	800c1e0 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800c18c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c190:	011b      	lsls	r3, r3, #4
 800c192:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c196:	4413      	add	r3, r2
 800c198:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800c19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19c:	3304      	adds	r3, #4
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d012      	beq.n	800c1ca <find_volume+0x17e>
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	330b      	adds	r3, #11
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	061a      	lsls	r2, r3, #24
 800c1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ae:	330a      	adds	r3, #10
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	041b      	lsls	r3, r3, #16
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1b8:	3209      	adds	r2, #9
 800c1ba:	7812      	ldrb	r2, [r2, #0]
 800c1bc:	0212      	lsls	r2, r2, #8
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1c2:	3208      	adds	r2, #8
 800c1c4:	7812      	ldrb	r2, [r2, #0]
 800c1c6:	431a      	orrs	r2, r3
 800c1c8:	e000      	b.n	800c1cc <find_volume+0x180>
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c1d4:	440b      	add	r3, r1
 800c1d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1dc:	3301      	adds	r3, #1
 800c1de:	643b      	str	r3, [r7, #64]	; 0x40
 800c1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e2:	2b03      	cmp	r3, #3
 800c1e4:	d9d2      	bls.n	800c18c <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c1ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <find_volume+0x1aa>
 800c1f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800c1f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c1fe:	4413      	add	r3, r2
 800c200:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c204:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800c206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d005      	beq.n	800c218 <find_volume+0x1cc>
 800c20c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c20e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c210:	f7ff feae 	bl	800bf70 <check_fs>
 800c214:	4603      	mov	r3, r0
 800c216:	e000      	b.n	800c21a <find_volume+0x1ce>
 800c218:	2302      	movs	r3, #2
 800c21a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800c21e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c222:	2b00      	cmp	r3, #0
 800c224:	d005      	beq.n	800c232 <find_volume+0x1e6>
 800c226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c228:	3301      	adds	r3, #1
 800c22a:	643b      	str	r3, [r7, #64]	; 0x40
 800c22c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c22e:	2b03      	cmp	r3, #3
 800c230:	d9e1      	bls.n	800c1f6 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c232:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c236:	2b03      	cmp	r3, #3
 800c238:	d101      	bne.n	800c23e <find_volume+0x1f2>
 800c23a:	2301      	movs	r3, #1
 800c23c:	e256      	b.n	800c6ec <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800c23e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c242:	2b00      	cmp	r3, #0
 800c244:	d001      	beq.n	800c24a <find_volume+0x1fe>
 800c246:	230d      	movs	r3, #13
 800c248:	e250      	b.n	800c6ec <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24c:	7b1b      	ldrb	r3, [r3, #12]
 800c24e:	021b      	lsls	r3, r3, #8
 800c250:	b21a      	sxth	r2, r3
 800c252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c254:	7adb      	ldrb	r3, [r3, #11]
 800c256:	b21b      	sxth	r3, r3
 800c258:	4313      	orrs	r3, r2
 800c25a:	b21a      	sxth	r2, r3
 800c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c262:	330a      	adds	r3, #10
 800c264:	881b      	ldrh	r3, [r3, #0]
 800c266:	b21b      	sxth	r3, r3
 800c268:	429a      	cmp	r2, r3
 800c26a:	d001      	beq.n	800c270 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 800c26c:	230d      	movs	r3, #13
 800c26e:	e23d      	b.n	800c6ec <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	7ddb      	ldrb	r3, [r3, #23]
 800c274:	021b      	lsls	r3, r3, #8
 800c276:	b21a      	sxth	r2, r3
 800c278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27a:	7d9b      	ldrb	r3, [r3, #22]
 800c27c:	b21b      	sxth	r3, r3
 800c27e:	4313      	orrs	r3, r2
 800c280:	b21b      	sxth	r3, r3
 800c282:	b29b      	uxth	r3, r3
 800c284:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800c286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d112      	bne.n	800c2b2 <find_volume+0x266>
 800c28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c292:	061a      	lsls	r2, r3, #24
 800c294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c296:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c29a:	041b      	lsls	r3, r3, #16
 800c29c:	4313      	orrs	r3, r2
 800c29e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2a0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c2a4:	0212      	lsls	r2, r2, #8
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2aa:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2b8:	3318      	adds	r3, #24
 800c2ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2bc:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800c2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c0:	7c1a      	ldrb	r2, [r3, #16]
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2c8:	3303      	adds	r3, #3
 800c2ca:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800c2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2d2:	3303      	adds	r3, #3
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d008      	beq.n	800c2ec <find_volume+0x2a0>
 800c2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2e0:	3303      	adds	r3, #3
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d001      	beq.n	800c2ec <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800c2e8:	230d      	movs	r3, #13
 800c2ea:	e1ff      	b.n	800c6ec <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800c2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2f2:	3303      	adds	r3, #3
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2fa:	fb02 f303 	mul.w	r3, r2, r3
 800c2fe:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800c300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c302:	7b5a      	ldrb	r2, [r3, #13]
 800c304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c30a:	3302      	adds	r3, #2
 800c30c:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800c30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c314:	3302      	adds	r3, #2
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00e      	beq.n	800c33a <find_volume+0x2ee>
 800c31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c322:	3302      	adds	r3, #2
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	461a      	mov	r2, r3
 800c328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c32e:	3302      	adds	r3, #2
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	3b01      	subs	r3, #1
 800c334:	4013      	ands	r3, r2
 800c336:	2b00      	cmp	r3, #0
 800c338:	d004      	beq.n	800c344 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800c33a:	230d      	movs	r3, #13
 800c33c:	e1d6      	b.n	800c6ec <find_volume+0x6a0>
 800c33e:	bf00      	nop
 800c340:	20000044 	.word	0x20000044

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800c344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c346:	7c9b      	ldrb	r3, [r3, #18]
 800c348:	021b      	lsls	r3, r3, #8
 800c34a:	b21a      	sxth	r2, r3
 800c34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34e:	7c5b      	ldrb	r3, [r3, #17]
 800c350:	b21b      	sxth	r3, r3
 800c352:	4313      	orrs	r3, r2
 800c354:	b21b      	sxth	r3, r3
 800c356:	b29a      	uxth	r2, r3
 800c358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c35e:	3308      	adds	r3, #8
 800c360:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800c362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c368:	3308      	adds	r3, #8
 800c36a:	881a      	ldrh	r2, [r3, #0]
 800c36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c372:	330a      	adds	r3, #10
 800c374:	881b      	ldrh	r3, [r3, #0]
 800c376:	095b      	lsrs	r3, r3, #5
 800c378:	b29b      	uxth	r3, r3
 800c37a:	fbb2 f1f3 	udiv	r1, r2, r3
 800c37e:	fb03 f301 	mul.w	r3, r3, r1
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	b29b      	uxth	r3, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d001      	beq.n	800c38e <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800c38a:	230d      	movs	r3, #13
 800c38c:	e1ae      	b.n	800c6ec <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800c38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c390:	7d1b      	ldrb	r3, [r3, #20]
 800c392:	021b      	lsls	r3, r3, #8
 800c394:	b21a      	sxth	r2, r3
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	7cdb      	ldrb	r3, [r3, #19]
 800c39a:	b21b      	sxth	r3, r3
 800c39c:	4313      	orrs	r3, r2
 800c39e:	b21b      	sxth	r3, r3
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800c3a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d112      	bne.n	800c3d0 <find_volume+0x384>
 800c3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ac:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c3b0:	061a      	lsls	r2, r3, #24
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c3b8:	041b      	lsls	r3, r3, #16
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3be:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800c3c2:	0212      	lsls	r2, r2, #8
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3c8:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800c3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d2:	7bdb      	ldrb	r3, [r3, #15]
 800c3d4:	021b      	lsls	r3, r3, #8
 800c3d6:	b21a      	sxth	r2, r3
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	7b9b      	ldrb	r3, [r3, #14]
 800c3dc:	b21b      	sxth	r3, r3
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	b21b      	sxth	r3, r3
 800c3e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800c3e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d101      	bne.n	800c3ee <find_volume+0x3a2>
 800c3ea:	230d      	movs	r3, #13
 800c3ec:	e17e      	b.n	800c6ec <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800c3ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c3f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3f2:	441a      	add	r2, r3
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3fa:	3308      	adds	r3, #8
 800c3fc:	8819      	ldrh	r1, [r3, #0]
 800c3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c404:	330a      	adds	r3, #10
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	095b      	lsrs	r3, r3, #5
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	fbb1 f3f3 	udiv	r3, r1, r3
 800c410:	b29b      	uxth	r3, r3
 800c412:	4413      	add	r3, r2
 800c414:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d201      	bcs.n	800c422 <find_volume+0x3d6>
 800c41e:	230d      	movs	r3, #13
 800c420:	e164      	b.n	800c6ec <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800c422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c426:	1ad2      	subs	r2, r2, r3
 800c428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c42e:	3302      	adds	r3, #2
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	fbb2 f3f3 	udiv	r3, r2, r3
 800c436:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800c438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <find_volume+0x3f6>
 800c43e:	230d      	movs	r3, #13
 800c440:	e154      	b.n	800c6ec <find_volume+0x6a0>
	fmt = FS_FAT12;
 800c442:	2301      	movs	r3, #1
 800c444:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c44e:	4293      	cmp	r3, r2
 800c450:	d902      	bls.n	800c458 <find_volume+0x40c>
 800c452:	2302      	movs	r3, #2
 800c454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c45e:	4293      	cmp	r3, r2
 800c460:	d902      	bls.n	800c468 <find_volume+0x41c>
 800c462:	2303      	movs	r3, #3
 800c464:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46a:	1c9a      	adds	r2, r3, #2
 800c46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c472:	3314      	adds	r3, #20
 800c474:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800c476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c47c:	331c      	adds	r3, #28
 800c47e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c480:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800c482:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c486:	441a      	add	r2, r3
 800c488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c48e:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800c490:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c494:	441a      	add	r2, r3
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c49c:	3308      	adds	r3, #8
 800c49e:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800c4a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4a4:	2b03      	cmp	r3, #3
 800c4a6:	d127      	bne.n	800c4f8 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800c4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	881b      	ldrh	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <find_volume+0x46e>
 800c4b6:	230d      	movs	r3, #13
 800c4b8:	e118      	b.n	800c6ec <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c4c0:	061a      	lsls	r2, r3, #24
 800c4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c4c8:	041b      	lsls	r3, r3, #16
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4ce:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c4d2:	0212      	lsls	r2, r2, #8
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4d8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c4dc:	431a      	orrs	r2, r3
 800c4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4ee:	3314      	adds	r3, #20
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	647b      	str	r3, [r7, #68]	; 0x44
 800c4f6:	e030      	b.n	800c55a <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800c4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4fe:	3308      	adds	r3, #8
 800c500:	881b      	ldrh	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d101      	bne.n	800c50a <find_volume+0x4be>
 800c506:	230d      	movs	r3, #13
 800c508:	e0f0      	b.n	800c6ec <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800c50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c514:	441a      	add	r2, r3
 800c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c518:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c51c:	3304      	adds	r3, #4
 800c51e:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c520:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c524:	2b02      	cmp	r3, #2
 800c526:	d106      	bne.n	800c536 <find_volume+0x4ea>
 800c528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c52e:	3314      	adds	r3, #20
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	005b      	lsls	r3, r3, #1
 800c534:	e010      	b.n	800c558 <find_volume+0x50c>
 800c536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c53c:	3314      	adds	r3, #20
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	4613      	mov	r3, r2
 800c542:	005b      	lsls	r3, r3, #1
 800c544:	4413      	add	r3, r2
 800c546:	085a      	lsrs	r2, r3, #1
 800c548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c54e:	3314      	adds	r3, #20
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0301 	and.w	r3, r3, #1
 800c556:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800c558:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800c55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c560:	3318      	adds	r3, #24
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c56a:	330a      	adds	r3, #10
 800c56c:	881b      	ldrh	r3, [r3, #0]
 800c56e:	4619      	mov	r1, r3
 800c570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c572:	440b      	add	r3, r1
 800c574:	1e59      	subs	r1, r3, #1
 800c576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c57c:	330a      	adds	r3, #10
 800c57e:	881b      	ldrh	r3, [r3, #0]
 800c580:	fbb1 f3f3 	udiv	r3, r1, r3
 800c584:	429a      	cmp	r2, r3
 800c586:	d201      	bcs.n	800c58c <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800c588:	230d      	movs	r3, #13
 800c58a:	e0af      	b.n	800c6ec <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800c58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c592:	3310      	adds	r3, #16
 800c594:	f04f 32ff 	mov.w	r2, #4294967295
 800c598:	601a      	str	r2, [r3, #0]
 800c59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5a0:	3310      	adds	r3, #16
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5aa:	330c      	adds	r3, #12
 800c5ac:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800c5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5b4:	3305      	adds	r3, #5
 800c5b6:	2280      	movs	r2, #128	; 0x80
 800c5b8:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800c5ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5be:	2b03      	cmp	r3, #3
 800c5c0:	d17d      	bne.n	800c6be <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800c5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c5c8:	021b      	lsls	r3, r3, #8
 800c5ca:	b21a      	sxth	r2, r3
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5d2:	b21b      	sxth	r3, r3
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	b21b      	sxth	r3, r3
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d170      	bne.n	800c6be <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800c5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5de:	3301      	adds	r3, #1
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5e4:	f7fd fee0 	bl	800a3a8 <move_window>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d167      	bne.n	800c6be <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5f4:	3305      	adds	r3, #5
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fc:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800c600:	021b      	lsls	r3, r3, #8
 800c602:	b21a      	sxth	r2, r3
 800c604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c606:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c60a:	b21b      	sxth	r3, r3
 800c60c:	4313      	orrs	r3, r2
 800c60e:	b21b      	sxth	r3, r3
 800c610:	4a38      	ldr	r2, [pc, #224]	; (800c6f4 <find_volume+0x6a8>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d153      	bne.n	800c6be <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800c616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c618:	78db      	ldrb	r3, [r3, #3]
 800c61a:	061a      	lsls	r2, r3, #24
 800c61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61e:	789b      	ldrb	r3, [r3, #2]
 800c620:	041b      	lsls	r3, r3, #16
 800c622:	4313      	orrs	r3, r2
 800c624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c626:	7852      	ldrb	r2, [r2, #1]
 800c628:	0212      	lsls	r2, r2, #8
 800c62a:	4313      	orrs	r3, r2
 800c62c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c62e:	7812      	ldrb	r2, [r2, #0]
 800c630:	4313      	orrs	r3, r2
 800c632:	4a31      	ldr	r2, [pc, #196]	; (800c6f8 <find_volume+0x6ac>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d142      	bne.n	800c6be <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800c638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63a:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800c63e:	061a      	lsls	r2, r3, #24
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800c646:	041b      	lsls	r3, r3, #16
 800c648:	4313      	orrs	r3, r2
 800c64a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c64c:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800c650:	0212      	lsls	r2, r2, #8
 800c652:	4313      	orrs	r3, r2
 800c654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c656:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800c65a:	4313      	orrs	r3, r2
 800c65c:	4a27      	ldr	r2, [pc, #156]	; (800c6fc <find_volume+0x6b0>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d12d      	bne.n	800c6be <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800c662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c664:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800c668:	061a      	lsls	r2, r3, #24
 800c66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66c:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800c670:	041b      	lsls	r3, r3, #16
 800c672:	4313      	orrs	r3, r2
 800c674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c676:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800c67a:	0212      	lsls	r2, r2, #8
 800c67c:	4313      	orrs	r3, r2
 800c67e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c680:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800c684:	431a      	orrs	r2, r3
 800c686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c68c:	3310      	adds	r3, #16
 800c68e:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c692:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800c696:	061a      	lsls	r2, r3, #24
 800c698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800c69e:	041b      	lsls	r3, r3, #16
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6a4:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800c6a8:	0212      	lsls	r2, r2, #8
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6ae:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800c6b2:	431a      	orrs	r2, r3
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ba:	330c      	adds	r3, #12
 800c6bc:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800c6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c6c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800c6ca:	4b0d      	ldr	r3, [pc, #52]	; (800c700 <find_volume+0x6b4>)
 800c6cc:	881b      	ldrh	r3, [r3, #0]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	4b0b      	ldr	r3, [pc, #44]	; (800c700 <find_volume+0x6b4>)
 800c6d4:	801a      	strh	r2, [r3, #0]
 800c6d6:	4b0a      	ldr	r3, [pc, #40]	; (800c700 <find_volume+0x6b4>)
 800c6d8:	881a      	ldrh	r2, [r3, #0]
 800c6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6e0:	3306      	adds	r3, #6
 800c6e2:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800c6e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c6e6:	f7fd fddb 	bl	800a2a0 <clear_lock>
#endif

	return FR_OK;
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3758      	adds	r7, #88	; 0x58
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	ffffaa55 	.word	0xffffaa55
 800c6f8:	41615252 	.word	0x41615252
 800c6fc:	61417272 	.word	0x61417272
 800c700:	20000048 	.word	0x20000048

0800c704 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d02d      	beq.n	800c772 <validate+0x6e>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d027      	beq.n	800c772 <validate+0x6e>
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d01e      	beq.n	800c772 <validate+0x6e>
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c740:	3306      	adds	r3, #6
 800c742:	881a      	ldrh	r2, [r3, #0]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c74a:	3304      	adds	r3, #4
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d10f      	bne.n	800c772 <validate+0x6e>
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c75e:	3301      	adds	r3, #1
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	4618      	mov	r0, r3
 800c764:	f7fd faec 	bl	8009d40 <disk_status>
 800c768:	4603      	mov	r3, r0
 800c76a:	f003 0301 	and.w	r3, r3, #1
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d001      	beq.n	800c776 <validate+0x72>
		return FR_INVALID_OBJECT;
 800c772:	2309      	movs	r3, #9
 800c774:	e000      	b.n	800c778 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	4613      	mov	r3, r2
 800c78c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800c792:	f107 0310 	add.w	r3, r7, #16
 800c796:	4618      	mov	r0, r3
 800c798:	f7ff fba7 	bl	800beea <get_ldnumber>
 800c79c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	da01      	bge.n	800c7a8 <f_mount+0x28>
 800c7a4:	230b      	movs	r3, #11
 800c7a6:	e02f      	b.n	800c808 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c7a8:	4a19      	ldr	r2, [pc, #100]	; (800c810 <f_mount+0x90>)
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d007      	beq.n	800c7c8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800c7b8:	69b8      	ldr	r0, [r7, #24]
 800c7ba:	f7fd fd71 	bl	800a2a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d004      	beq.n	800c7d8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	490d      	ldr	r1, [pc, #52]	; (800c810 <f_mount+0x90>)
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <f_mount+0x6e>
 800c7e8:	79fb      	ldrb	r3, [r7, #7]
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d001      	beq.n	800c7f2 <f_mount+0x72>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	e00a      	b.n	800c808 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800c7f2:	f107 0108 	add.w	r1, r7, #8
 800c7f6:	f107 030c 	add.w	r3, r7, #12
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7ff fc25 	bl	800c04c <find_volume>
 800c802:	4603      	mov	r3, r0
 800c804:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c806:	7dfb      	ldrb	r3, [r7, #23]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3720      	adds	r7, #32
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	20000044 	.word	0x20000044

0800c814 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800c81a:	b086      	sub	sp, #24
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	f107 0318 	add.w	r3, r7, #24
 800c822:	3b0c      	subs	r3, #12
 800c824:	6018      	str	r0, [r3, #0]
 800c826:	f107 0318 	add.w	r3, r7, #24
 800c82a:	3b10      	subs	r3, #16
 800c82c:	6019      	str	r1, [r3, #0]
 800c82e:	f107 0318 	add.w	r3, r7, #24
 800c832:	3b11      	subs	r3, #17
 800c834:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800c836:	f107 0318 	add.w	r3, r7, #24
 800c83a:	3b0c      	subs	r3, #12
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d101      	bne.n	800c846 <f_open+0x32>
 800c842:	2309      	movs	r3, #9
 800c844:	e319      	b.n	800ce7a <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 800c846:	f107 0318 	add.w	r3, r7, #24
 800c84a:	3b0c      	subs	r3, #12
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c852:	2200      	movs	r2, #0
 800c854:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800c856:	f107 0318 	add.w	r3, r7, #24
 800c85a:	3b11      	subs	r3, #17
 800c85c:	f107 0218 	add.w	r2, r7, #24
 800c860:	3a11      	subs	r2, #17
 800c862:	7812      	ldrb	r2, [r2, #0]
 800c864:	f002 021f 	and.w	r2, r2, #31
 800c868:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800c86a:	f107 0318 	add.w	r3, r7, #24
 800c86e:	3b11      	subs	r3, #17
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	f023 0301 	bic.w	r3, r3, #1
 800c876:	b2da      	uxtb	r2, r3
 800c878:	f107 0118 	add.w	r1, r7, #24
 800c87c:	3910      	subs	r1, #16
 800c87e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c882:	3b18      	subs	r3, #24
 800c884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c888:	4618      	mov	r0, r3
 800c88a:	f7ff fbdf 	bl	800c04c <find_volume>
 800c88e:	4603      	mov	r3, r0
 800c890:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c894:	f102 0217 	add.w	r2, r2, #23
 800c898:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800c89a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c89e:	f103 0317 	add.w	r3, r3, #23
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f040 82e3 	bne.w	800ce70 <f_open+0x65c>
		INIT_BUF(dj);
 800c8aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c8ae:	3b18      	subs	r3, #24
 800c8b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8b4:	3318      	adds	r3, #24
 800c8b6:	f107 0218 	add.w	r2, r7, #24
 800c8ba:	3a04      	subs	r2, #4
 800c8bc:	601a      	str	r2, [r3, #0]
 800c8be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c8c2:	3b18      	subs	r3, #24
 800c8c4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c8c8:	4ad1      	ldr	r2, [pc, #836]	; (800cc10 <f_open+0x3fc>)
 800c8ca:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c8cc:	f107 0318 	add.w	r3, r7, #24
 800c8d0:	3b10      	subs	r3, #16
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c8d8:	3b18      	subs	r3, #24
 800c8da:	4611      	mov	r1, r2
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7ff fa8b 	bl	800bdf8 <follow_path>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c8e8:	f102 0217 	add.w	r2, r2, #23
 800c8ec:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800c8ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c8f2:	3b18      	subs	r3, #24
 800c8f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8f8:	3314      	adds	r3, #20
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c900:	f102 0210 	add.w	r2, r2, #16
 800c904:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c906:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c90a:	f103 0317 	add.w	r3, r3, #23
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d126      	bne.n	800c962 <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800c914:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c918:	f103 0310 	add.w	r3, r3, #16
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d106      	bne.n	800c930 <f_open+0x11c>
				res = FR_INVALID_NAME;
 800c922:	2306      	movs	r3, #6
 800c924:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c928:	f102 0217 	add.w	r2, r2, #23
 800c92c:	7013      	strb	r3, [r2, #0]
 800c92e:	e018      	b.n	800c962 <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c930:	f107 0318 	add.w	r3, r7, #24
 800c934:	3b11      	subs	r3, #17
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	f023 0301 	bic.w	r3, r3, #1
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	bf14      	ite	ne
 800c940:	2301      	movne	r3, #1
 800c942:	2300      	moveq	r3, #0
 800c944:	b2db      	uxtb	r3, r3
 800c946:	461a      	mov	r2, r3
 800c948:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c94c:	3b18      	subs	r3, #24
 800c94e:	4611      	mov	r1, r2
 800c950:	4618      	mov	r0, r3
 800c952:	f7fd fb0b 	bl	8009f6c <chk_lock>
 800c956:	4603      	mov	r3, r0
 800c958:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c95c:	f102 0217 	add.w	r2, r2, #23
 800c960:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c962:	f107 0318 	add.w	r3, r7, #24
 800c966:	3b11      	subs	r3, #17
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	f003 031c 	and.w	r3, r3, #28
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f000 8150 	beq.w	800cc14 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 800c974:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c978:	f103 0317 	add.w	r3, r3, #23
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d030      	beq.n	800c9e4 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800c982:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c986:	f103 0317 	add.w	r3, r3, #23
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	2b04      	cmp	r3, #4
 800c98e:	d112      	bne.n	800c9b6 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c990:	f7fd fb5e 	bl	800a050 <enq_lock>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d007      	beq.n	800c9aa <f_open+0x196>
 800c99a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c99e:	3b18      	subs	r3, #24
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7fe ff37 	bl	800b814 <dir_register>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	e000      	b.n	800c9ac <f_open+0x198>
 800c9aa:	2312      	movs	r3, #18
 800c9ac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c9b0:	f102 0217 	add.w	r2, r2, #23
 800c9b4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c9b6:	f107 0318 	add.w	r3, r7, #24
 800c9ba:	3b11      	subs	r3, #17
 800c9bc:	f107 0218 	add.w	r2, r7, #24
 800c9c0:	3a11      	subs	r2, #17
 800c9c2:	7812      	ldrb	r2, [r2, #0]
 800c9c4:	f042 0208 	orr.w	r2, r2, #8
 800c9c8:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800c9ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c9ce:	3b18      	subs	r3, #24
 800c9d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9d4:	3314      	adds	r3, #20
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c9dc:	f102 0210 	add.w	r2, r2, #16
 800c9e0:	6013      	str	r3, [r2, #0]
 800c9e2:	e01f      	b.n	800ca24 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c9e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c9e8:	f103 0310 	add.w	r3, r3, #16
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	330b      	adds	r3, #11
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	f003 0311 	and.w	r3, r3, #17
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d006      	beq.n	800ca08 <f_open+0x1f4>
					res = FR_DENIED;
 800c9fa:	2307      	movs	r3, #7
 800c9fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ca00:	f102 0217 	add.w	r2, r2, #23
 800ca04:	7013      	strb	r3, [r2, #0]
 800ca06:	e00d      	b.n	800ca24 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800ca08:	f107 0318 	add.w	r3, r7, #24
 800ca0c:	3b11      	subs	r3, #17
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	f003 0304 	and.w	r3, r3, #4
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d005      	beq.n	800ca24 <f_open+0x210>
						res = FR_EXIST;
 800ca18:	2308      	movs	r3, #8
 800ca1a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ca1e:	f102 0217 	add.w	r2, r2, #23
 800ca22:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ca24:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca28:	f103 0317 	add.w	r3, r3, #23
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	f040 8122 	bne.w	800cc78 <f_open+0x464>
 800ca34:	f107 0318 	add.w	r3, r7, #24
 800ca38:	3b11      	subs	r3, #17
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	f003 0308 	and.w	r3, r3, #8
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f000 8119 	beq.w	800cc78 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 800ca46:	f7fd f91f 	bl	8009c88 <get_fattime>
 800ca4a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca4e:	f103 030c 	add.w	r3, r3, #12
 800ca52:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800ca54:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca58:	f103 0310 	add.w	r3, r3, #16
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	330e      	adds	r3, #14
 800ca60:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ca64:	f102 020c 	add.w	r2, r2, #12
 800ca68:	6812      	ldr	r2, [r2, #0]
 800ca6a:	b2d2      	uxtb	r2, r2
 800ca6c:	701a      	strb	r2, [r3, #0]
 800ca6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca72:	f103 030c 	add.w	r3, r3, #12
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	0a1b      	lsrs	r3, r3, #8
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca82:	f103 0310 	add.w	r3, r3, #16
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	330f      	adds	r3, #15
 800ca8a:	b2d2      	uxtb	r2, r2
 800ca8c:	701a      	strb	r2, [r3, #0]
 800ca8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca92:	f103 030c 	add.w	r3, r3, #12
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	0c1a      	lsrs	r2, r3, #16
 800ca9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca9e:	f103 0310 	add.w	r3, r3, #16
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	3310      	adds	r3, #16
 800caa6:	b2d2      	uxtb	r2, r2
 800caa8:	701a      	strb	r2, [r3, #0]
 800caaa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800caae:	f103 030c 	add.w	r3, r3, #12
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	0e1a      	lsrs	r2, r3, #24
 800cab6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800caba:	f103 0310 	add.w	r3, r3, #16
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	3311      	adds	r3, #17
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800cac6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800caca:	f103 0310 	add.w	r3, r3, #16
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	330b      	adds	r3, #11
 800cad2:	2200      	movs	r2, #0
 800cad4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800cad6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cada:	f103 0310 	add.w	r3, r3, #16
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	331c      	adds	r3, #28
 800cae2:	2200      	movs	r2, #0
 800cae4:	701a      	strb	r2, [r3, #0]
 800cae6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800caea:	f103 0310 	add.w	r3, r3, #16
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	331d      	adds	r3, #29
 800caf2:	2200      	movs	r2, #0
 800caf4:	701a      	strb	r2, [r3, #0]
 800caf6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cafa:	f103 0310 	add.w	r3, r3, #16
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	331e      	adds	r3, #30
 800cb02:	2200      	movs	r2, #0
 800cb04:	701a      	strb	r2, [r3, #0]
 800cb06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb0a:	f103 0310 	add.w	r3, r3, #16
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	331f      	adds	r3, #31
 800cb12:	2200      	movs	r2, #0
 800cb14:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800cb16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cb1a:	3b18      	subs	r3, #24
 800cb1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cb26:	f102 0210 	add.w	r2, r2, #16
 800cb2a:	6811      	ldr	r1, [r2, #0]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7fe fbb4 	bl	800b29a <ld_clust>
 800cb32:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb36:	f103 0308 	add.w	r3, r3, #8
 800cb3a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb42:	f103 0310 	add.w	r3, r3, #16
 800cb46:	6818      	ldr	r0, [r3, #0]
 800cb48:	f7fe fbd5 	bl	800b2f6 <st_clust>
				dj.fs->wflag = 1;
 800cb4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cb50:	3b18      	subs	r3, #24
 800cb52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	2201      	movs	r2, #1
 800cb60:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800cb62:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb66:	f103 0308 	add.w	r3, r3, #8
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f000 8083 	beq.w	800cc78 <f_open+0x464>
					dw = dj.fs->winsect;
 800cb72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cb76:	3b18      	subs	r3, #24
 800cb78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cb82:	330c      	adds	r3, #12
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cb8a:	f102 020c 	add.w	r2, r2, #12
 800cb8e:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800cb90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cb94:	3b18      	subs	r3, #24
 800cb96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cba0:	f102 0208 	add.w	r2, r2, #8
 800cba4:	6811      	ldr	r1, [r2, #0]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fd ff8d 	bl	800aac6 <remove_chain>
 800cbac:	4603      	mov	r3, r0
 800cbae:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cbb2:	f102 0217 	add.w	r2, r2, #23
 800cbb6:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800cbb8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cbbc:	f103 0317 	add.w	r3, r3, #23
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d158      	bne.n	800cc78 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800cbc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cbca:	3b18      	subs	r3, #24
 800cbcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cbd6:	f102 0208 	add.w	r2, r2, #8
 800cbda:	6812      	ldr	r2, [r2, #0]
 800cbdc:	3a01      	subs	r2, #1
 800cbde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbe2:	330c      	adds	r3, #12
 800cbe4:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 800cbe6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cbea:	3b18      	subs	r3, #24
 800cbec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cbf6:	f102 020c 	add.w	r2, r2, #12
 800cbfa:	6811      	ldr	r1, [r2, #0]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7fd fbd3 	bl	800a3a8 <move_window>
 800cc02:	4603      	mov	r3, r0
 800cc04:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc08:	f102 0217 	add.w	r2, r2, #23
 800cc0c:	7013      	strb	r3, [r2, #0]
 800cc0e:	e033      	b.n	800cc78 <f_open+0x464>
 800cc10:	20000064 	.word	0x20000064
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800cc14:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc18:	f103 0317 	add.w	r3, r3, #23
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d12a      	bne.n	800cc78 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800cc22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc26:	f103 0310 	add.w	r3, r3, #16
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	330b      	adds	r3, #11
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	f003 0310 	and.w	r3, r3, #16
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d006      	beq.n	800cc46 <f_open+0x432>
					res = FR_NO_FILE;
 800cc38:	2304      	movs	r3, #4
 800cc3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc3e:	f102 0217 	add.w	r2, r2, #23
 800cc42:	7013      	strb	r3, [r2, #0]
 800cc44:	e018      	b.n	800cc78 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800cc46:	f107 0318 	add.w	r3, r7, #24
 800cc4a:	3b11      	subs	r3, #17
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	f003 0302 	and.w	r3, r3, #2
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d010      	beq.n	800cc78 <f_open+0x464>
 800cc56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc5a:	f103 0310 	add.w	r3, r3, #16
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	330b      	adds	r3, #11
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d005      	beq.n	800cc78 <f_open+0x464>
						res = FR_DENIED;
 800cc6c:	2307      	movs	r3, #7
 800cc6e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc72:	f102 0217 	add.w	r2, r2, #23
 800cc76:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800cc78:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc7c:	f103 0317 	add.w	r3, r3, #23
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d15b      	bne.n	800cd3e <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cc86:	f107 0318 	add.w	r3, r7, #24
 800cc8a:	3b11      	subs	r3, #17
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	f003 0308 	and.w	r3, r3, #8
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d009      	beq.n	800ccaa <f_open+0x496>
				mode |= FA__WRITTEN;
 800cc96:	f107 0318 	add.w	r3, r7, #24
 800cc9a:	3b11      	subs	r3, #17
 800cc9c:	f107 0218 	add.w	r2, r7, #24
 800cca0:	3a11      	subs	r2, #17
 800cca2:	7812      	ldrb	r2, [r2, #0]
 800cca4:	f042 0220 	orr.w	r2, r2, #32
 800cca8:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ccaa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ccae:	3b18      	subs	r3, #24
 800ccb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ccba:	330c      	adds	r3, #12
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	f107 0318 	add.w	r3, r7, #24
 800ccc2:	3b0c      	subs	r3, #12
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccca:	331c      	adds	r3, #28
 800cccc:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800ccce:	f107 0318 	add.w	r3, r7, #24
 800ccd2:	3b0c      	subs	r3, #12
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ccda:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ccde:	f102 0210 	add.w	r2, r2, #16
 800cce2:	6812      	ldr	r2, [r2, #0]
 800cce4:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cce6:	f107 0318 	add.w	r3, r7, #24
 800ccea:	3b11      	subs	r3, #17
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	f023 0301 	bic.w	r3, r3, #1
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	bf14      	ite	ne
 800ccf6:	2301      	movne	r3, #1
 800ccf8:	2300      	moveq	r3, #0
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd02:	3b18      	subs	r3, #24
 800cd04:	4611      	mov	r1, r2
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fd f9c6 	bl	800a098 <inc_lock>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	f107 0318 	add.w	r3, r7, #24
 800cd12:	3b0c      	subs	r3, #12
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cd1a:	3308      	adds	r3, #8
 800cd1c:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 800cd1e:	f107 0318 	add.w	r3, r7, #24
 800cd22:	3b0c      	subs	r3, #12
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cd2a:	3308      	adds	r3, #8
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d105      	bne.n	800cd3e <f_open+0x52a>
 800cd32:	2302      	movs	r3, #2
 800cd34:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cd38:	f102 0217 	add.w	r2, r2, #23
 800cd3c:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800cd3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cd42:	f103 0317 	add.w	r3, r3, #23
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f040 8091 	bne.w	800ce70 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 800cd4e:	f107 0318 	add.w	r3, r7, #24
 800cd52:	3b0c      	subs	r3, #12
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd5a:	3306      	adds	r3, #6
 800cd5c:	f107 0218 	add.w	r2, r7, #24
 800cd60:	3a11      	subs	r2, #17
 800cd62:	7812      	ldrb	r2, [r2, #0]
 800cd64:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800cd66:	f107 0318 	add.w	r3, r7, #24
 800cd6a:	3b0c      	subs	r3, #12
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd72:	3307      	adds	r3, #7
 800cd74:	2200      	movs	r2, #0
 800cd76:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800cd78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd7c:	3b18      	subs	r3, #24
 800cd7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cd88:	f102 0210 	add.w	r2, r2, #16
 800cd8c:	6811      	ldr	r1, [r2, #0]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7fe fa83 	bl	800b29a <ld_clust>
 800cd94:	4602      	mov	r2, r0
 800cd96:	f107 0318 	add.w	r3, r7, #24
 800cd9a:	3b0c      	subs	r3, #12
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cda2:	3310      	adds	r3, #16
 800cda4:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800cda6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cdaa:	f103 0310 	add.w	r3, r3, #16
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	331f      	adds	r3, #31
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	061a      	lsls	r2, r3, #24
 800cdb6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cdba:	f103 0310 	add.w	r3, r3, #16
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	331e      	adds	r3, #30
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	041b      	lsls	r3, r3, #16
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cdcc:	f102 0210 	add.w	r2, r2, #16
 800cdd0:	6812      	ldr	r2, [r2, #0]
 800cdd2:	321d      	adds	r2, #29
 800cdd4:	7812      	ldrb	r2, [r2, #0]
 800cdd6:	0212      	lsls	r2, r2, #8
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cdde:	f102 0210 	add.w	r2, r2, #16
 800cde2:	6812      	ldr	r2, [r2, #0]
 800cde4:	321c      	adds	r2, #28
 800cde6:	7812      	ldrb	r2, [r2, #0]
 800cde8:	431a      	orrs	r2, r3
 800cdea:	f107 0318 	add.w	r3, r7, #24
 800cdee:	3b0c      	subs	r3, #12
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdf6:	330c      	adds	r3, #12
 800cdf8:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 800cdfa:	f107 0318 	add.w	r3, r7, #24
 800cdfe:	3b0c      	subs	r3, #12
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce06:	3308      	adds	r3, #8
 800ce08:	2200      	movs	r2, #0
 800ce0a:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 800ce0c:	f107 0318 	add.w	r3, r7, #24
 800ce10:	3b0c      	subs	r3, #12
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce18:	3318      	adds	r3, #24
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800ce1e:	f107 0318 	add.w	r3, r7, #24
 800ce22:	3b0c      	subs	r3, #12
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ce2a:	3304      	adds	r3, #4
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800ce30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ce34:	3b18      	subs	r3, #24
 800ce36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	f107 0318 	add.w	r3, r7, #24
 800ce40:	3b0c      	subs	r3, #12
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce48:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800ce4a:	f107 0318 	add.w	r3, r7, #24
 800ce4e:	3b0c      	subs	r3, #12
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce5c:	3306      	adds	r3, #6
 800ce5e:	881a      	ldrh	r2, [r3, #0]
 800ce60:	f107 0318 	add.w	r3, r7, #24
 800ce64:	3b0c      	subs	r3, #12
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 800ce70:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ce74:	f103 0317 	add.w	r3, r3, #23
 800ce78:	781b      	ldrb	r3, [r3, #0]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800ce80:	3718      	adds	r7, #24
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop

0800ce88 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b08a      	sub	sp, #40	; 0x28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
 800ce94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f7ff fc2f 	bl	800c704 <validate>
 800cea6:	4603      	mov	r3, r0
 800cea8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ceaa:	7dfb      	ldrb	r3, [r7, #23]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d001      	beq.n	800ceb4 <f_write+0x2c>
 800ceb0:	7dfb      	ldrb	r3, [r7, #23]
 800ceb2:	e258      	b.n	800d366 <f_write+0x4de>
	if (fp->err)							/* Check error */
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceba:	3307      	adds	r3, #7
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d005      	beq.n	800cece <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cec8:	3307      	adds	r3, #7
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	e24b      	b.n	800d366 <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ced4:	3306      	adds	r3, #6
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	f003 0302 	and.w	r3, r3, #2
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d101      	bne.n	800cee4 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800cee0:	2307      	movs	r3, #7
 800cee2:	e240      	b.n	800d366 <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceea:	3308      	adds	r3, #8
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	441a      	add	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cef8:	3308      	adds	r3, #8
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	f080 8208 	bcs.w	800d312 <f_write+0x48a>
 800cf02:	2300      	movs	r3, #0
 800cf04:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800cf06:	e204      	b.n	800d312 <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf0e:	3308      	adds	r3, #8
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf1e:	330a      	adds	r3, #10
 800cf20:	881b      	ldrh	r3, [r3, #0]
 800cf22:	fbb2 f1f3 	udiv	r1, r2, r3
 800cf26:	fb03 f301 	mul.w	r3, r3, r1
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f040 818d 	bne.w	800d24c <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf38:	3308      	adds	r3, #8
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf48:	330a      	adds	r3, #10
 800cf4a:	881b      	ldrh	r3, [r3, #0]
 800cf4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf50:	b2da      	uxtb	r2, r3
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf5e:	3302      	adds	r3, #2
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	3b01      	subs	r3, #1
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	4013      	ands	r3, r2
 800cf68:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800cf6a:	7dbb      	ldrb	r3, [r7, #22]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d167      	bne.n	800d040 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf76:	3308      	adds	r3, #8
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d112      	bne.n	800cfa4 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf84:	3310      	adds	r3, #16
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d129      	bne.n	800cfe4 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2100      	movs	r1, #0
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fd fdfb 	bl	800ab96 <create_chain>
 800cfa0:	6278      	str	r0, [r7, #36]	; 0x24
 800cfa2:	e01f      	b.n	800cfe4 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cfaa:	3304      	adds	r3, #4
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00a      	beq.n	800cfc8 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfb8:	3308      	adds	r3, #8
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f7fd fe9a 	bl	800acf8 <clmt_clust>
 800cfc4:	6278      	str	r0, [r7, #36]	; 0x24
 800cfc6:	e00d      	b.n	800cfe4 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfd6:	3314      	adds	r3, #20
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4619      	mov	r1, r3
 800cfdc:	4610      	mov	r0, r2
 800cfde:	f7fd fdda 	bl	800ab96 <create_chain>
 800cfe2:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f000 8198 	beq.w	800d31c <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d107      	bne.n	800d002 <f_write+0x17a>
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cff8:	3307      	adds	r3, #7
 800cffa:	2202      	movs	r2, #2
 800cffc:	701a      	strb	r2, [r3, #0]
 800cffe:	2302      	movs	r3, #2
 800d000:	e1b1      	b.n	800d366 <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d008:	d107      	bne.n	800d01a <f_write+0x192>
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d010:	3307      	adds	r3, #7
 800d012:	2201      	movs	r2, #1
 800d014:	701a      	strb	r2, [r3, #0]
 800d016:	2301      	movs	r3, #1
 800d018:	e1a5      	b.n	800d366 <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d020:	3314      	adds	r3, #20
 800d022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d024:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d02c:	3310      	adds	r3, #16
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d105      	bne.n	800d040 <f_write+0x1b8>
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d03a:	3310      	adds	r3, #16
 800d03c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d03e:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d046:	3306      	adds	r3, #6
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d028      	beq.n	800d0a4 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d05e:	3301      	adds	r3, #1
 800d060:	7818      	ldrb	r0, [r3, #0]
 800d062:	68f9      	ldr	r1, [r7, #12]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d06a:	3318      	adds	r3, #24
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	2301      	movs	r3, #1
 800d070:	f7fc fec6 	bl	8009e00 <disk_write>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d007      	beq.n	800d08a <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d080:	3307      	adds	r3, #7
 800d082:	2201      	movs	r2, #1
 800d084:	701a      	strb	r2, [r3, #0]
 800d086:	2301      	movs	r3, #1
 800d088:	e16d      	b.n	800d366 <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d090:	3306      	adds	r3, #6
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d098:	b2da      	uxtb	r2, r3
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0a0:	3306      	adds	r3, #6
 800d0a2:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0b2:	3314      	adds	r3, #20
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	4610      	mov	r0, r2
 800d0ba:	f7fd fa78 	bl	800a5ae <clust2sect>
 800d0be:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d107      	bne.n	800d0d6 <f_write+0x24e>
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0cc:	3307      	adds	r3, #7
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	701a      	strb	r2, [r3, #0]
 800d0d2:	2302      	movs	r3, #2
 800d0d4:	e147      	b.n	800d366 <f_write+0x4de>
			sect += csect;
 800d0d6:	7dbb      	ldrb	r3, [r7, #22]
 800d0d8:	693a      	ldr	r2, [r7, #16]
 800d0da:	4413      	add	r3, r2
 800d0dc:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0ea:	330a      	adds	r3, #10
 800d0ec:	881b      	ldrh	r3, [r3, #0]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0f6:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d074      	beq.n	800d1e8 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d0fe:	7dba      	ldrb	r2, [r7, #22]
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	441a      	add	r2, r3
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d110:	3302      	adds	r3, #2
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	429a      	cmp	r2, r3
 800d116:	d90b      	bls.n	800d130 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d124:	3302      	adds	r3, #2
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	461a      	mov	r2, r3
 800d12a:	7dbb      	ldrb	r3, [r7, #22]
 800d12c:	1ad3      	subs	r3, r2, r3
 800d12e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d13c:	3301      	adds	r3, #1
 800d13e:	7818      	ldrb	r0, [r3, #0]
 800d140:	69fb      	ldr	r3, [r7, #28]
 800d142:	693a      	ldr	r2, [r7, #16]
 800d144:	69b9      	ldr	r1, [r7, #24]
 800d146:	f7fc fe5b 	bl	8009e00 <disk_write>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d007      	beq.n	800d160 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d156:	3307      	adds	r3, #7
 800d158:	2201      	movs	r2, #1
 800d15a:	701a      	strb	r2, [r3, #0]
 800d15c:	2301      	movs	r3, #1
 800d15e:	e102      	b.n	800d366 <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d166:	3318      	adds	r3, #24
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	1ad3      	subs	r3, r2, r3
 800d16e:	69fa      	ldr	r2, [r7, #28]
 800d170:	429a      	cmp	r2, r3
 800d172:	d92b      	bls.n	800d1cc <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d17c:	3318      	adds	r3, #24
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	1ad2      	subs	r2, r2, r3
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d190:	330a      	adds	r3, #10
 800d192:	881b      	ldrh	r3, [r3, #0]
 800d194:	fb03 f302 	mul.w	r3, r3, r2
 800d198:	69ba      	ldr	r2, [r7, #24]
 800d19a:	18d1      	adds	r1, r2, r3
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1a8:	330a      	adds	r3, #10
 800d1aa:	881b      	ldrh	r3, [r3, #0]
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	f7fc fe65 	bl	8009e7c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1b8:	3306      	adds	r3, #6
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1c0:	b2da      	uxtb	r2, r3
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1c8:	3306      	adds	r3, #6
 800d1ca:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1d8:	330a      	adds	r3, #10
 800d1da:	881b      	ldrh	r3, [r3, #0]
 800d1dc:	461a      	mov	r2, r3
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	fb02 f303 	mul.w	r3, r2, r3
 800d1e4:	623b      	str	r3, [r7, #32]
				continue;
 800d1e6:	e07a      	b.n	800d2de <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1ee:	3318      	adds	r3, #24
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	693a      	ldr	r2, [r7, #16]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d023      	beq.n	800d240 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1fe:	3308      	adds	r3, #8
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d208:	330c      	adds	r3, #12
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d217      	bcs.n	800d240 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d21c:	3301      	adds	r3, #1
 800d21e:	7818      	ldrb	r0, [r3, #0]
 800d220:	68f9      	ldr	r1, [r7, #12]
 800d222:	2301      	movs	r3, #1
 800d224:	693a      	ldr	r2, [r7, #16]
 800d226:	f7fc fdcb 	bl	8009dc0 <disk_read>
 800d22a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d007      	beq.n	800d240 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d236:	3307      	adds	r3, #7
 800d238:	2201      	movs	r2, #1
 800d23a:	701a      	strb	r2, [r3, #0]
 800d23c:	2301      	movs	r3, #1
 800d23e:	e092      	b.n	800d366 <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d246:	3318      	adds	r3, #24
 800d248:	693a      	ldr	r2, [r7, #16]
 800d24a:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d258:	330a      	adds	r3, #10
 800d25a:	881b      	ldrh	r3, [r3, #0]
 800d25c:	4618      	mov	r0, r3
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d264:	3308      	adds	r3, #8
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d274:	330a      	adds	r3, #10
 800d276:	881b      	ldrh	r3, [r3, #0]
 800d278:	fbb2 f1f3 	udiv	r1, r2, r3
 800d27c:	fb03 f301 	mul.w	r3, r3, r1
 800d280:	1ad3      	subs	r3, r2, r3
 800d282:	1ac3      	subs	r3, r0, r3
 800d284:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800d286:	6a3a      	ldr	r2, [r7, #32]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d901      	bls.n	800d292 <f_write+0x40a>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d298:	3308      	adds	r3, #8
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2a8:	330a      	adds	r3, #10
 800d2aa:	881b      	ldrh	r3, [r3, #0]
 800d2ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800d2b0:	fb03 f301 	mul.w	r3, r3, r1
 800d2b4:	1ad3      	subs	r3, r2, r3
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	6a3a      	ldr	r2, [r7, #32]
 800d2bc:	69b9      	ldr	r1, [r7, #24]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fc fddc 	bl	8009e7c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ca:	3306      	adds	r3, #6
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2da:	3306      	adds	r3, #6
 800d2dc:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800d2de:	69ba      	ldr	r2, [r7, #24]
 800d2e0:	6a3b      	ldr	r3, [r7, #32]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	61bb      	str	r3, [r7, #24]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ec:	3308      	adds	r3, #8
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	6a3b      	ldr	r3, [r7, #32]
 800d2f2:	441a      	add	r2, r3
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2fa:	3308      	adds	r3, #8
 800d2fc:	601a      	str	r2, [r3, #0]
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	6a3b      	ldr	r3, [r7, #32]
 800d304:	441a      	add	r2, r3
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	6a3b      	ldr	r3, [r7, #32]
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	f47f adf7 	bne.w	800cf08 <f_write+0x80>
 800d31a:	e000      	b.n	800d31e <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d31c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d324:	3308      	adds	r3, #8
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d32e:	330c      	adds	r3, #12
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	429a      	cmp	r2, r3
 800d334:	d909      	bls.n	800d34a <f_write+0x4c2>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d33c:	3308      	adds	r3, #8
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d346:	330c      	adds	r3, #12
 800d348:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d350:	3306      	adds	r3, #6
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	f043 0320 	orr.w	r3, r3, #32
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d360:	3306      	adds	r3, #6
 800d362:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3728      	adds	r7, #40	; 0x28
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b086      	sub	sp, #24
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7ff f9c4 	bl	800c704 <validate>
 800d37c:	4603      	mov	r3, r0
 800d37e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d380:	7dfb      	ldrb	r3, [r7, #23]
 800d382:	2b00      	cmp	r3, #0
 800d384:	f040 80cc 	bne.w	800d520 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d38e:	3306      	adds	r3, #6
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	f003 0320 	and.w	r3, r3, #32
 800d396:	2b00      	cmp	r3, #0
 800d398:	f000 80c2 	beq.w	800d520 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3a2:	3306      	adds	r3, #6
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d022      	beq.n	800d3f4 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	7818      	ldrb	r0, [r3, #0]
 800d3be:	6879      	ldr	r1, [r7, #4]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3c6:	3318      	adds	r3, #24
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	f7fc fd18 	bl	8009e00 <disk_write>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d001      	beq.n	800d3da <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e0a3      	b.n	800d522 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3e0:	3306      	adds	r3, #6
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3e8:	b2da      	uxtb	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3f0:	3306      	adds	r3, #6
 800d3f2:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d402:	331c      	adds	r3, #28
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4619      	mov	r1, r3
 800d408:	4610      	mov	r0, r2
 800d40a:	f7fc ffcd 	bl	800a3a8 <move_window>
 800d40e:	4603      	mov	r3, r0
 800d410:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800d412:	7dfb      	ldrb	r3, [r7, #23]
 800d414:	2b00      	cmp	r3, #0
 800d416:	f040 8083 	bne.w	800d520 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	330b      	adds	r3, #11
 800d428:	781a      	ldrb	r2, [r3, #0]
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	330b      	adds	r3, #11
 800d42e:	f042 0220 	orr.w	r2, r2, #32
 800d432:	b2d2      	uxtb	r2, r2
 800d434:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d43c:	330c      	adds	r3, #12
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	331c      	adds	r3, #28
 800d444:	b2d2      	uxtb	r2, r2
 800d446:	701a      	strb	r2, [r3, #0]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d44e:	330c      	adds	r3, #12
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	b29b      	uxth	r3, r3
 800d454:	0a1b      	lsrs	r3, r3, #8
 800d456:	b29a      	uxth	r2, r3
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	331d      	adds	r3, #29
 800d45c:	b2d2      	uxtb	r2, r2
 800d45e:	701a      	strb	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d466:	330c      	adds	r3, #12
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	0c1a      	lsrs	r2, r3, #16
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	331e      	adds	r3, #30
 800d470:	b2d2      	uxtb	r2, r2
 800d472:	701a      	strb	r2, [r3, #0]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d47a:	330c      	adds	r3, #12
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	0e1a      	lsrs	r2, r3, #24
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	331f      	adds	r3, #31
 800d484:	b2d2      	uxtb	r2, r2
 800d486:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d48e:	3310      	adds	r3, #16
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4619      	mov	r1, r3
 800d494:	6938      	ldr	r0, [r7, #16]
 800d496:	f7fd ff2e 	bl	800b2f6 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800d49a:	f7fc fbf5 	bl	8009c88 <get_fattime>
 800d49e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	3316      	adds	r3, #22
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	b2d2      	uxtb	r2, r2
 800d4a8:	701a      	strb	r2, [r3, #0]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	0a1b      	lsrs	r3, r3, #8
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	3317      	adds	r3, #23
 800d4b6:	b2d2      	uxtb	r2, r2
 800d4b8:	701a      	strb	r2, [r3, #0]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	0c1a      	lsrs	r2, r3, #16
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	3318      	adds	r3, #24
 800d4c2:	b2d2      	uxtb	r2, r2
 800d4c4:	701a      	strb	r2, [r3, #0]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	0e1a      	lsrs	r2, r3, #24
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	3319      	adds	r3, #25
 800d4ce:	b2d2      	uxtb	r2, r2
 800d4d0:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	3312      	adds	r3, #18
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	701a      	strb	r2, [r3, #0]
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	3313      	adds	r3, #19
 800d4de:	2200      	movs	r2, #0
 800d4e0:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4e8:	3306      	adds	r3, #6
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	f023 0320 	bic.w	r3, r3, #32
 800d4f0:	b2da      	uxtb	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4f8:	3306      	adds	r3, #6
 800d4fa:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d508:	3304      	adds	r3, #4
 800d50a:	2201      	movs	r2, #1
 800d50c:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4618      	mov	r0, r3
 800d518:	f7fc ff7a 	bl	800a410 <sync_fs>
 800d51c:	4603      	mov	r3, r0
 800d51e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800d520:	7dfb      	ldrb	r3, [r7, #23]
}
 800d522:	4618      	mov	r0, r3
 800d524:	3718      	adds	r7, #24
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b084      	sub	sp, #16
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7ff ff1b 	bl	800d36e <f_sync>
 800d538:	4603      	mov	r3, r0
 800d53a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d119      	bne.n	800d576 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7ff f8de 	bl	800c704 <validate>
 800d548:	4603      	mov	r3, r0
 800d54a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d54c:	7bfb      	ldrb	r3, [r7, #15]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d111      	bne.n	800d576 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d558:	3308      	adds	r3, #8
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7fc fe5b 	bl	800a218 <dec_lock>
 800d562:	4603      	mov	r3, r0
 800d564:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d566:	7bfb      	ldrb	r3, [r7, #15]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d104      	bne.n	800d576 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d572:	2200      	movs	r2, #0
 800d574:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d576:	7bfb      	ldrb	r3, [r7, #15]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	460b      	mov	r3, r1
 800d58a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800d58c:	78fb      	ldrb	r3, [r7, #3]
 800d58e:	2b0a      	cmp	r3, #10
 800d590:	d103      	bne.n	800d59a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800d592:	210d      	movs	r1, #13
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7ff fff3 	bl	800d580 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	db25      	blt.n	800d5f2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	1c5a      	adds	r2, r3, #1
 800d5aa:	60fa      	str	r2, [r7, #12]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	78fa      	ldrb	r2, [r7, #3]
 800d5b2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2b3c      	cmp	r3, #60	; 0x3c
 800d5b8:	dd12      	ble.n	800d5e0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6818      	ldr	r0, [r3, #0]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f103 010c 	add.w	r1, r3, #12
 800d5c4:	68fa      	ldr	r2, [r7, #12]
 800d5c6:	f107 0308 	add.w	r3, r7, #8
 800d5ca:	f7ff fc5d 	bl	800ce88 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d5ce:	68ba      	ldr	r2, [r7, #8]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d101      	bne.n	800d5da <putc_bfd+0x5a>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	e001      	b.n	800d5de <putc_bfd+0x5e>
 800d5da:	f04f 33ff 	mov.w	r3, #4294967295
 800d5de:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	609a      	str	r2, [r3, #8]
 800d5f0:	e000      	b.n	800d5f4 <putc_bfd+0x74>
	if (i < 0) return;
 800d5f2:	bf00      	nop
}
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}

0800d5fa <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800d5fa:	b590      	push	{r4, r7, lr}
 800d5fc:	b097      	sub	sp, #92	; 0x5c
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
 800d602:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800d608:	2300      	movs	r3, #0
 800d60a:	613b      	str	r3, [r7, #16]
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800d610:	e009      	b.n	800d626 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	607a      	str	r2, [r7, #4]
 800d618:	781a      	ldrb	r2, [r3, #0]
 800d61a:	f107 030c 	add.w	r3, r7, #12
 800d61e:	4611      	mov	r1, r2
 800d620:	4618      	mov	r0, r3
 800d622:	f7ff ffad 	bl	800d580 <putc_bfd>
	while (*str)			/* Put the string */
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d1f1      	bne.n	800d612 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	2b00      	cmp	r3, #0
 800d632:	db15      	blt.n	800d660 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800d634:	68f8      	ldr	r0, [r7, #12]
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	461c      	mov	r4, r3
 800d63a:	f107 0208 	add.w	r2, r7, #8
 800d63e:	f107 030c 	add.w	r3, r7, #12
 800d642:	f103 010c 	add.w	r1, r3, #12
 800d646:	4613      	mov	r3, r2
 800d648:	4622      	mov	r2, r4
 800d64a:	f7ff fc1d 	bl	800ce88 <f_write>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d105      	bne.n	800d660 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	68ba      	ldr	r2, [r7, #8]
 800d658:	4293      	cmp	r3, r2
 800d65a:	d101      	bne.n	800d660 <f_puts+0x66>
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	e001      	b.n	800d664 <f_puts+0x6a>
	return EOF;
 800d660:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d664:	4618      	mov	r0, r3
 800d666:	375c      	adds	r7, #92	; 0x5c
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd90      	pop	{r4, r7, pc}

0800d66c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b087      	sub	sp, #28
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	4613      	mov	r3, r2
 800d678:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d67a:	2301      	movs	r3, #1
 800d67c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800d682:	4b1e      	ldr	r3, [pc, #120]	; (800d6fc <FATFS_LinkDriverEx+0x90>)
 800d684:	7a5b      	ldrb	r3, [r3, #9]
 800d686:	b2db      	uxtb	r3, r3
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d831      	bhi.n	800d6f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d68c:	4b1b      	ldr	r3, [pc, #108]	; (800d6fc <FATFS_LinkDriverEx+0x90>)
 800d68e:	7a5b      	ldrb	r3, [r3, #9]
 800d690:	b2db      	uxtb	r3, r3
 800d692:	461a      	mov	r2, r3
 800d694:	4b19      	ldr	r3, [pc, #100]	; (800d6fc <FATFS_LinkDriverEx+0x90>)
 800d696:	2100      	movs	r1, #0
 800d698:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800d69a:	4b18      	ldr	r3, [pc, #96]	; (800d6fc <FATFS_LinkDriverEx+0x90>)
 800d69c:	7a5b      	ldrb	r3, [r3, #9]
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	4a16      	ldr	r2, [pc, #88]	; (800d6fc <FATFS_LinkDriverEx+0x90>)
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	4413      	add	r3, r2
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800d6aa:	4b14      	ldr	r3, [pc, #80]	; (800d6fc <FATFS_LinkDriverEx+0x90>)
 800d6ac:	7a5b      	ldrb	r3, [r3, #9]
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	4b12      	ldr	r3, [pc, #72]	; (800d6fc <FATFS_LinkDriverEx+0x90>)
 800d6b4:	4413      	add	r3, r2
 800d6b6:	79fa      	ldrb	r2, [r7, #7]
 800d6b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d6ba:	4b10      	ldr	r3, [pc, #64]	; (800d6fc <FATFS_LinkDriverEx+0x90>)
 800d6bc:	7a5b      	ldrb	r3, [r3, #9]
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	1c5a      	adds	r2, r3, #1
 800d6c2:	b2d1      	uxtb	r1, r2
 800d6c4:	4a0d      	ldr	r2, [pc, #52]	; (800d6fc <FATFS_LinkDriverEx+0x90>)
 800d6c6:	7251      	strb	r1, [r2, #9]
 800d6c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d6ca:	7dbb      	ldrb	r3, [r7, #22]
 800d6cc:	3330      	adds	r3, #48	; 0x30
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	223a      	movs	r2, #58	; 0x3a
 800d6da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	3302      	adds	r3, #2
 800d6e0:	222f      	movs	r2, #47	; 0x2f
 800d6e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	3303      	adds	r3, #3
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800d6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	371c      	adds	r7, #28
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bc80      	pop	{r7}
 800d6fa:	4770      	bx	lr
 800d6fc:	20000264 	.word	0x20000264

0800d700 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d70a:	2200      	movs	r2, #0
 800d70c:	6839      	ldr	r1, [r7, #0]
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f7ff ffac 	bl	800d66c <FATFS_LinkDriverEx>
 800d714:	4603      	mov	r3, r0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3708      	adds	r7, #8
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
	...

0800d720 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	4603      	mov	r3, r0
 800d728:	6039      	str	r1, [r7, #0]
 800d72a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d72c:	88fb      	ldrh	r3, [r7, #6]
 800d72e:	2b7f      	cmp	r3, #127	; 0x7f
 800d730:	d802      	bhi.n	800d738 <ff_convert+0x18>
		c = chr;
 800d732:	88fb      	ldrh	r3, [r7, #6]
 800d734:	81fb      	strh	r3, [r7, #14]
 800d736:	e025      	b.n	800d784 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00b      	beq.n	800d756 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d73e:	88fb      	ldrh	r3, [r7, #6]
 800d740:	2bff      	cmp	r3, #255	; 0xff
 800d742:	d805      	bhi.n	800d750 <ff_convert+0x30>
 800d744:	88fb      	ldrh	r3, [r7, #6]
 800d746:	3b80      	subs	r3, #128	; 0x80
 800d748:	4a11      	ldr	r2, [pc, #68]	; (800d790 <ff_convert+0x70>)
 800d74a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d74e:	e000      	b.n	800d752 <ff_convert+0x32>
 800d750:	2300      	movs	r3, #0
 800d752:	81fb      	strh	r3, [r7, #14]
 800d754:	e016      	b.n	800d784 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800d756:	2300      	movs	r3, #0
 800d758:	81fb      	strh	r3, [r7, #14]
 800d75a:	e009      	b.n	800d770 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d75c:	89fb      	ldrh	r3, [r7, #14]
 800d75e:	4a0c      	ldr	r2, [pc, #48]	; (800d790 <ff_convert+0x70>)
 800d760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d764:	88fa      	ldrh	r2, [r7, #6]
 800d766:	429a      	cmp	r2, r3
 800d768:	d006      	beq.n	800d778 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d76a:	89fb      	ldrh	r3, [r7, #14]
 800d76c:	3301      	adds	r3, #1
 800d76e:	81fb      	strh	r3, [r7, #14]
 800d770:	89fb      	ldrh	r3, [r7, #14]
 800d772:	2b7f      	cmp	r3, #127	; 0x7f
 800d774:	d9f2      	bls.n	800d75c <ff_convert+0x3c>
 800d776:	e000      	b.n	800d77a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d778:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d77a:	89fb      	ldrh	r3, [r7, #14]
 800d77c:	3380      	adds	r3, #128	; 0x80
 800d77e:	b29b      	uxth	r3, r3
 800d780:	b2db      	uxtb	r3, r3
 800d782:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d784:	89fb      	ldrh	r3, [r7, #14]
}
 800d786:	4618      	mov	r0, r3
 800d788:	3714      	adds	r7, #20
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bc80      	pop	{r7}
 800d78e:	4770      	bx	lr
 800d790:	0800d9ac 	.word	0x0800d9ac

0800d794 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800d794:	b480      	push	{r7}
 800d796:	b085      	sub	sp, #20
 800d798:	af00      	add	r7, sp, #0
 800d79a:	4603      	mov	r3, r0
 800d79c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	60fb      	str	r3, [r7, #12]
 800d7a2:	e002      	b.n	800d7aa <ff_wtoupper+0x16>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	60fb      	str	r3, [r7, #12]
 800d7aa:	4a0f      	ldr	r2, [pc, #60]	; (800d7e8 <ff_wtoupper+0x54>)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d006      	beq.n	800d7c4 <ff_wtoupper+0x30>
 800d7b6:	4a0c      	ldr	r2, [pc, #48]	; (800d7e8 <ff_wtoupper+0x54>)
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7be:	88fa      	ldrh	r2, [r7, #6]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d1ef      	bne.n	800d7a4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800d7c4:	4a08      	ldr	r2, [pc, #32]	; (800d7e8 <ff_wtoupper+0x54>)
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d004      	beq.n	800d7da <ff_wtoupper+0x46>
 800d7d0:	4a06      	ldr	r2, [pc, #24]	; (800d7ec <ff_wtoupper+0x58>)
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7d8:	e000      	b.n	800d7dc <ff_wtoupper+0x48>
 800d7da:	88fb      	ldrh	r3, [r7, #6]
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3714      	adds	r7, #20
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bc80      	pop	{r7}
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	0800daac 	.word	0x0800daac
 800d7ec:	0800dc8c 	.word	0x0800dc8c

0800d7f0 <__libc_init_array>:
 800d7f0:	b570      	push	{r4, r5, r6, lr}
 800d7f2:	2600      	movs	r6, #0
 800d7f4:	4d0c      	ldr	r5, [pc, #48]	; (800d828 <__libc_init_array+0x38>)
 800d7f6:	4c0d      	ldr	r4, [pc, #52]	; (800d82c <__libc_init_array+0x3c>)
 800d7f8:	1b64      	subs	r4, r4, r5
 800d7fa:	10a4      	asrs	r4, r4, #2
 800d7fc:	42a6      	cmp	r6, r4
 800d7fe:	d109      	bne.n	800d814 <__libc_init_array+0x24>
 800d800:	f000 f822 	bl	800d848 <_init>
 800d804:	2600      	movs	r6, #0
 800d806:	4d0a      	ldr	r5, [pc, #40]	; (800d830 <__libc_init_array+0x40>)
 800d808:	4c0a      	ldr	r4, [pc, #40]	; (800d834 <__libc_init_array+0x44>)
 800d80a:	1b64      	subs	r4, r4, r5
 800d80c:	10a4      	asrs	r4, r4, #2
 800d80e:	42a6      	cmp	r6, r4
 800d810:	d105      	bne.n	800d81e <__libc_init_array+0x2e>
 800d812:	bd70      	pop	{r4, r5, r6, pc}
 800d814:	f855 3b04 	ldr.w	r3, [r5], #4
 800d818:	4798      	blx	r3
 800d81a:	3601      	adds	r6, #1
 800d81c:	e7ee      	b.n	800d7fc <__libc_init_array+0xc>
 800d81e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d822:	4798      	blx	r3
 800d824:	3601      	adds	r6, #1
 800d826:	e7f2      	b.n	800d80e <__libc_init_array+0x1e>
 800d828:	0800de6c 	.word	0x0800de6c
 800d82c:	0800de6c 	.word	0x0800de6c
 800d830:	0800de6c 	.word	0x0800de6c
 800d834:	0800de70 	.word	0x0800de70

0800d838 <memset>:
 800d838:	4603      	mov	r3, r0
 800d83a:	4402      	add	r2, r0
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d100      	bne.n	800d842 <memset+0xa>
 800d840:	4770      	bx	lr
 800d842:	f803 1b01 	strb.w	r1, [r3], #1
 800d846:	e7f9      	b.n	800d83c <memset+0x4>

0800d848 <_init>:
 800d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84a:	bf00      	nop
 800d84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d84e:	bc08      	pop	{r3}
 800d850:	469e      	mov	lr, r3
 800d852:	4770      	bx	lr

0800d854 <_fini>:
 800d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d856:	bf00      	nop
 800d858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d85a:	bc08      	pop	{r3}
 800d85c:	469e      	mov	lr, r3
 800d85e:	4770      	bx	lr
